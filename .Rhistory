StatsObjectsList <- list()
Bin_Best_Score <- 0 # create blanks for best results to use in loops
Bin_Best_Model <- 0
Gaus_Best_Score <- 0
Gaus_Best_Model <- 0
j <- tc
k <- lr
l <- bf
n <- n + 1   # Add to print counter
####4. Binomial BRT####
print(paste0("Running ", fam1, " BRT, tc=",j,", lr=",k,", bf=",l))
assign(paste0("Bin_BRT",".tc",j,".lr",k,".bf",l),
gbm.step.sd(data = samples,
gbm.x = expvar,
gbm.y = brvcol,
family = fam1,
tree.complexity = j,
learning.rate = k,
bag.fraction = l,
n.trees = ntf1,
{if (!is.null(offset)) offset = grv_yes$offset})
)
assign(paste0("Bin_BRT",".tc",j,".lr",k,".bf",l),
gbm.step.sd(data = samples,
gbm.x = expvar,
gbm.y = brvcol,
family = fam1,
tree.complexity = j,
learning.rate = k,
bag.fraction = l,
n.trees = ntf1,
{if (!is.null(offset)) offset = grv_yes$offset})
)
seq(from = 0, to = 1, length.out = 9)
linear01seq <- seq(from = 0, to = 1, length.out = 9) #linear sequence from 0:1, 9 bins
exp01seq <- expm1(4*linear01seq)/expm1(4) # exponentiate to change shape then scale back to 1
exp01seq
plot(linear01seq,linear01seq)
plot(linear01seq,exp01seq)
?gbm.plot
??gbm.plot
library(dismo)
library(raster)
install.packages("raster")
sudo apt install terra
install.packages("terra")
install.packages("raster")
library(dismo)
install.packages("dismo")
library(dismo)
install.packages("terra")
library(terra)
library(dismo)
gbm.plot
?gbm.plot
library(devtools)
document()
remotes::install_github("rspatial/dismo")
document()
install.packages("sf")
install.packages(rgdal)
install.packages("rgdal"!)
install.packages("rgdal")
document()
library(devtools)
document()
remotes::install_github("SimonDedman/gbm.auto")
siwd <- "/home/simon/Documents/Si Work/PostDoc Work/Gbmauto help/Courtney Knaur/"
setwd(siwd)
library(gbm.auto)
library(dplyr)
data <- data.frame(read.csv("TowDiverTotalCSV2.csv", header = TRUE, as.is = TRUE)) # importing CSV#
data$TourismPresence <- as.factor(data$TourismPresence)
data$IslandorMainland <- as.factor(data$IslandorMainland)
data$Location <- as.factor(data$Location)
data$Year <- as.factor(data$Year)
# full test
gbm.auto(
grids = NULL,
samples = data,
expvar = c(
"Year",
"Location",
"Temp.",
"Salinity.",
"DO.",
"Cond.",
"X.Boats",
"X.CC",
"TourismPresence",
"IslandorMainland",
"StartDepth"
),
resvar = "Total.Turtle",
tc = c(1, 2, 3, 4, 5), # add combos you want to see for initial runs and it will try each. doesn't run the whole gambit like the loops do (from 1-5)
lr = c(0.0005, 0.001, 0.005, 0.01),
# granularity of learning rate, check Elith for numbers
bf = c(0.5, 0.55, 0.60, 0.65, 0.7, 0.75),
# put in series of values because it is the percent of data that is used to train the program then run again with the best option
# typical range is 0.5 to 0.75
n.trees = 50,
ZI = "CHECK",
fam1 = c("binomial"), # if you want a poisson distribution need to select, will auto select Gaussian unless zero inflated
fam2 = c("poisson"), #
simp = TRUE, # Change to true
gridslat = 2,
gridslon = 1,
multiplot = TRUE,
cols = grey.colors(1, 1, 1),
linesfiles = TRUE, # change to true for final run
smooth = TRUE,
# sd edit ####
savedir = siwd,
savegbm = TRUE, # change to true for final runs
loadgbm = NULL,
varint = TRUE,
map = TRUE,
shape = NULL,
RSB = TRUE,
BnW = TRUE,
alerts = TRUE, # this is the noise alerts
pngtype = c("cairo-png"), # quartz for mac  this one for windows : "cairo-png"
gaus = TRUE,
MLEvaluate = TRUE,
brv = NULL,
grv = NULL,
Bin_Preds = NULL,
Gaus_Preds = NULL
)
plot(1:10, 1:10)
mtext("Marginal Effect", side = 2, line = 4.05, las = 0)
abline(h = 0)
plot(-5:5, -5:5)
abline(h = 0)
abline(h = 0, lty = 2)
plot(-5:5, -5:5)
abline(h = 0, lty = 2)
?gbm.plot
remotes::install_github("SimonDedman/gbm.auto")
siwd <- "/home/simon/Documents/Si Work/PostDoc Work/Gbmauto help/Courtney Knaur/"
setwd(siwd)
library(gbm.auto)
library(dplyr)
data <- data.frame(read.csv("TowDiverTotalCSV2.csv", header = TRUE, as.is = TRUE)) # importing CSV#
data$TourismPresence <- as.factor(data$TourismPresence)
data$IslandorMainland <- as.factor(data$IslandorMainland)
data$Location <- as.factor(data$Location)
data$Year <- as.factor(data$Year)
# full test
gbm.auto(
grids = NULL,
samples = data,
expvar = c(
"Year",
"Location",
"Temp.",
"Salinity.",
"DO.",
"Cond.",
"X.Boats",
"X.CC",
"TourismPresence",
"IslandorMainland",
"StartDepth"
),
resvar = "Total.Turtle",
tc = c(1, 2, 3, 4, 5), # add combos you want to see for initial runs and it will try each. doesn't run the whole gambit like the loops do (from 1-5)
# lr = c(0.0005, 0.001, 0.005, 0.01),
lr = c(0.01),
# granularity of learning rate, check Elith for numbers
# bf = c(0.5, 0.55, 0.60, 0.65, 0.7, 0.75),
bf = c(0.5),
# put in series of values because it is the percent of data that is used to train the program then run again with the best option
# typical range is 0.5 to 0.75
n.trees = 50,
ZI = "CHECK",
fam1 = c("binomial"), # if you want a poisson distribution need to select, will auto select Gaussian unless zero inflated
fam2 = c("poisson"), #
simp = TRUE, # Change to true
gridslat = 2,
gridslon = 1,
multiplot = TRUE,
cols = grey.colors(1, 1, 1),
linesfiles = TRUE, # change to true for final run
smooth = TRUE,
# sd edit ####
savedir = siwd,
savegbm = TRUE, # change to true for final runs
loadgbm = NULL,
varint = TRUE,
map = TRUE,
shape = NULL,
RSB = TRUE,
BnW = TRUE,
alerts = TRUE, # this is the noise alerts
pngtype = c("cairo-png"), # quartz for mac  this one for windows : "cairo-png"
gaus = TRUE,
MLEvaluate = TRUE,
brv = NULL,
grv = NULL,
Bin_Preds = NULL,
Gaus_Preds = NULL
)
gbm.plot
dismo::gbm.plot
remotes::install_github("SimonDedman/gbm.auto")
siwd <- "/home/simon/Documents/Si Work/PostDoc Work/Gbmauto help/Courtney Knaur/"
setwd(siwd)
library(gbm.auto)
library(dplyr)
data <- data.frame(read.csv("TowDiverTotalCSV2.csv", header = TRUE, as.is = TRUE)) # importing CSV#
data$TourismPresence <- as.factor(data$TourismPresence)
data$IslandorMainland <- as.factor(data$IslandorMainland)
data$Location <- as.factor(data$Location)
data$Year <- as.factor(data$Year)
# full test
gbm.auto(
grids = NULL,
samples = data,
expvar = c(
"Year",
"Location",
"Temp.",
"Salinity.",
"DO.",
"Cond.",
"X.Boats",
"X.CC",
"TourismPresence",
"IslandorMainland",
"StartDepth"
),
resvar = "Total.Turtle",
# tc = c(1, 2, 3, 4, 5), # add combos you want to see for initial runs and it will try each. doesn't run the whole gambit like the loops do (from 1-5)
tc = c(2), # add combos you want to see for initial runs and it will try each. doesn't run the whole gambit like the loops do (from 1-5)
# lr = c(0.0005, 0.001, 0.005, 0.01),
lr = c(0.01),
# granularity of learning rate, check Elith for numbers
# bf = c(0.5, 0.55, 0.60, 0.65, 0.7, 0.75),
bf = c(0.5),
# put in series of values because it is the percent of data that is used to train the program then run again with the best option
# typical range is 0.5 to 0.75
n.trees = 50,
ZI = "CHECK",
fam1 = c("binomial"), # if you want a poisson distribution need to select, will auto select Gaussian unless zero inflated
fam2 = c("poisson"), #
simp = TRUE, # Change to true
gridslat = 2,
gridslon = 1,
multiplot = TRUE,
cols = grey.colors(1, 1, 1),
linesfiles = TRUE, # change to true for final run
smooth = TRUE,
# sd edit ####
savedir = siwd,
savegbm = TRUE, # change to true for final runs
loadgbm = NULL,
varint = TRUE,
map = TRUE,
shape = NULL,
RSB = TRUE,
BnW = TRUE,
alerts = TRUE, # this is the noise alerts
pngtype = c("cairo-png"), # quartz for mac  this one for windows : "cairo-png"
gaus = TRUE,
MLEvaluate = TRUE,
brv = NULL,
grv = NULL,
Bin_Preds = NULL,
Gaus_Preds = NULL
)
plot(-5:5, -5:5)
abline(h=0)
abline(a=-1, b=0)
abline(a=-1, b=0.5)
abline(a=-3, b=0.5)
abline(h=1)
library(dismo)
gbm.plot
remotes::install_github("SimonDedman/gbm.auto")
siwd <- "/home/simon/Documents/Si Work/PostDoc Work/Gbmauto help/Courtney Knaur/"
setwd(siwd)
library(gbm.auto)
library(dplyr)
data <- data.frame(read.csv("TowDiverTotalCSV2.csv", header = TRUE, as.is = TRUE)) # importing CSV#
data$TourismPresence <- as.factor(data$TourismPresence)
data$IslandorMainland <- as.factor(data$IslandorMainland)
data$Location <- as.factor(data$Location)
data$Year <- as.factor(data$Year)
# full test
gbm.auto(
grids = NULL,
samples = data,
expvar = c(
"Year",
"Location",
"Temp.",
"Salinity.",
"DO.",
"Cond.",
"X.Boats",
"X.CC",
"TourismPresence",
"IslandorMainland",
"StartDepth"
),
resvar = "Total.Turtle",
# tc = c(1, 2, 3, 4, 5), # add combos you want to see for initial runs and it will try each. doesn't run the whole gambit like the loops do (from 1-5)
tc = c(2), # add combos you want to see for initial runs and it will try each. doesn't run the whole gambit like the loops do (from 1-5)
# lr = c(0.0005, 0.001, 0.005, 0.01),
lr = c(0.01),
# granularity of learning rate, check Elith for numbers
# bf = c(0.5, 0.55, 0.60, 0.65, 0.7, 0.75),
bf = c(0.5),
# put in series of values because it is the percent of data that is used to train the program then run again with the best option
# typical range is 0.5 to 0.75
n.trees = 50,
ZI = "CHECK",
fam1 = c("binomial"), # if you want a poisson distribution need to select, will auto select Gaussian unless zero inflated
fam2 = c("poisson"), #
simp = TRUE, # Change to true
gridslat = 2,
gridslon = 1,
multiplot = TRUE,
cols = grey.colors(1, 1, 1),
linesfiles = TRUE, # change to true for final run
smooth = TRUE,
# sd edit ####
savedir = siwd,
savegbm = TRUE, # change to true for final runs
loadgbm = NULL,
varint = TRUE,
map = TRUE,
shape = NULL,
RSB = TRUE,
BnW = TRUE,
alerts = TRUE, # this is the noise alerts
pngtype = c("cairo-png"), # quartz for mac  this one for windows : "cairo-png"
gaus = TRUE,
MLEvaluate = TRUE,
brv = NULL,
grv = NULL,
Bin_Preds = NULL,
Gaus_Preds = NULL
)
lobrary(devtools)
library(devtools)
document()
install.packages(c("clock", "crul", "deldir", "DoseFinding", "DT", "emmeans", "evaluate", "future.apply", "gifski", "Hmisc", "httpuv", "httr", "httr2", "igraph", "lwgeom", "markdown", "pROC", "scatterplot3d", "spatstat", "spatstat.explore", "spatstat.geom", "spatstat.linnet", "spatstat.model", "spatstat.random", "spatstat.utils", "StanHeaders", "tzdb", "waldo"))
??gbm.plot.fits
library(devtools)
document()
build()
release()
spell_check()
release()
"R CMD check"
check()
document()
build()
check()
release()
document()
build()
release()
check_rhub()
release()
check_win_devel()
release()
library(devtools)
document()
check()
check(document = FALSE, args = c('--as-cran'))
release()
devtools::document()
build()
devtools::build()
devtools::release()
?gbm.auto
devtools::document()
# mapping issue
grids <- read.csv("/home/simon/Documents/Si Work/PostDoc Work/Gbmauto help/2022-12-06 Cat Wells/Abundance_Preds_only.csv")
# install.packages("dismo")
# install.packages("beepr")
# install.packages("mapplots")
# install.packages("maptools")
# install.packages("rgdal")
# install.packages("rgeos")
# install.packages("raster")
# install.packages("sf")
# install.packages("shapefiles")
# install.packages("devtools")
install.packages("gbm.auto")
library(dplyr)
library(ggpubr)
# library(mapplots)
# library(maptools)
# library(rgdal)
# library(rgeos)
# library(raster)
# library(sf)
# library(shapefiles)
# library(stats)
# library(devtools)
# install.packages("digest") #needed for devtools
library(digest)
# updates for gbm.auto
library(remotes)
#run this before everything, should fix earlier issues
library(gbm.auto)
sf_use_s2(FALSE)
RSandVSsamples <- read.csv("/home/simon/Documents/Si Work/PostDoc Work/Gbmauto help/NarrowedVars_06072023_RSandVS.csv")
RSandVSsamples <- read.csv("/home/simon/Documents/Si Work/PostDoc Work/Gbmauto help/2022-12-06 Cat Wells/NarrowedVars_06072023_RSandVS.csv")
RSandVSsamples <- RSandVSsamples[-which(is.na(RSandVSsamples[39])),]
########################### Step One for BRT, Calculates minimum Bag Fraction size for gbm.auto################
#RS
gbm.bfcheck(samples = RSandVSsamples, resvar = 39, ZI = "CHECK", grv = NULL) # Run code with defaults, FemaleRS and spawnRS are column 39 and 40
gbm.bfcheck(samples = RSandVSsamples, resvar = 40, ZI = "CHECK", grv = NULL) #check report for best values to use below
samples <- RSandVSsamples
# from gbm.auto:
png(filename = paste0("/home/simon/Documents/Si Work/PostDoc Work/Gbmauto help/2022-12-06 Cat Wells/Map/",names(samples[i]),"/PredAbundMap_",names(samples[i]),".png"),
width = 4*1920, height = 4*1920, units = "px", pointsize = 4*48, bg = "white", res = NA, family = "", type = pngtype)
names(samples[39])
i <- 39
# from gbm.auto:
png(filename = paste0("/home/simon/Documents/Si Work/PostDoc Work/Gbmauto help/2022-12-06 Cat Wells/Map/",names(samples[i]),"/PredAbundMap_",names(samples[i]),".png"),
width = 4*1920, height = 4*1920, units = "px", pointsize = 4*48, bg = "white", res = NA, family = "", type = pngtype)
# from gbm.auto:
png(filename = paste0("/home/simon/Documents/Si Work/PostDoc Work/Gbmauto help/2022-12-06 Cat Wells/Map/",names(samples[i]),"/PredAbundMap_",names(samples[i]),".png"),
width = 4*1920, height = 4*1920, units = "px", pointsize = 4*48, bg = "white", res = NA, family = "", type = "cairo-png")
par(mar = c(3.2,3,1.3,0), las = 1, mgp = c(2.1,0.5,0), xpd = FALSE)
gridslat <- 2
gridslon <- 1
predabund <- 3
?gbm.map
# run gbm.map function with generated parameters
gbm.map(x = grids[,gridslon],
y = grids[,gridslat],
z = grids[,predabund],
species = names(samples[i]),
# shape = shape, #either autogenerated or set by user so never blank
shape = NULL
)  # allows gbm.auto's optional terms to be passed to subfunctions:
traceback()
getwd()
# run gbm.map function with generated parameters
gbm.map(x = grids[,gridslon],
y = grids[,gridslat],
z = grids[,predabund],
species = names(samples[i]),
# shape = shape, #either autogenerated or set by user so never blank
shape = NULL,
savedir = "/home/simon/Documents/Si Work/PostDoc Work/Gbmauto help/2022-12-06 Cat Wells/Map/")  # allows gbm.auto's optional terms to be passed to subfunctions:
# run gbm.map function with generated parameters
gbm.map(x = grids[,gridslon],
y = grids[,gridslat],
z = grids[,predabund],
species = names(samples[i]),
# shape = shape, #either autogenerated or set by user so never blank
shape = NULL,
savedir = "/home/simon/Documents/Si Work/PostDoc Work/Gbmauto help/2022-12-06 Cat Wells/Map/")  # allows gbm.auto's optional terms to be passed to subfunctions:
?attachNamespace
unloadNamespace("shapefiles")
# from gbm.auto:
png(filename = paste0("/home/simon/Documents/Si Work/PostDoc Work/Gbmauto help/2022-12-06 Cat Wells/Map/",names(samples[i]),"/PredAbundMap_",names(samples[i]),".png"),
width = 4*1920, height = 4*1920, units = "px", pointsize = 4*48, bg = "white", res = NA, family = "", type = "cairo-png")
par(mar = c(3.2,3,1.3,0), las = 1, mgp = c(2.1,0.5,0), xpd = FALSE)
# run gbm.map function with generated parameters
gbm.map(x = grids[,gridslon],
y = grids[,gridslat],
z = grids[,predabund],
species = names(samples[i]),
# shape = shape, #either autogenerated or set by user so never blank
shape = NULL,
savedir = "/home/simon/Documents/Si Work/PostDoc Work/Gbmauto help/2022-12-06 Cat Wells/Map/")  # allows gbm.auto's optional terms to be passed to subfunctions:
bounds = c(range(grids[,gridslon]),range(grids[,gridslat]))
#create standard bounds from data, and extra bounds for map aesthetic
shape <- gbm.basemap(bounds = bounds, extrabounds = TRUE, savedir = "/home/simon/Documents/Si Work/PostDoc Work/Gbmauto help/2022-12-06 Cat Wells/Map/")
unloadNamespace("shapefiles")
#create standard bounds from data, and extra bounds for map aesthetic
shape <- gbm.basemap(bounds = bounds, extrabounds = TRUE, savedir = "/home/simon/Documents/Si Work/PostDoc Work/Gbmauto help/2022-12-06 Cat Wells/Map/")
traceback()
xmin = bounds[1] #for sf/st upgrade
xmax = bounds[2]
ymin = bounds[3]
ymax = bounds[4]
extrabounds = TRUE
if (extrabounds) { # grow bounds extents if requested
xmid <- mean(bounds[1:2])
ymid <- mean(bounds[3:4])
xmax <- ((bounds[2] - xmid) * 1.6) + xmid #updated for sf/st
xmin <- xmid - ((xmid - bounds[1]) * 1.6)
ymax <- ((bounds[4] - ymid) * 1.6) + ymid
ymin <- ymid - ((ymid - bounds[3]) * 1.6)
}
scope <- max((bounds[2] - bounds[1]), (bounds[4] - bounds[3])) # distance of largest dimension, x or y
if (scope >= 160) res <- "c" # bigger diff = larger map = lower res
if (160 > scope & scope >= 70) res <- "l"
if (70 > scope & scope >= 29) res <- "i"
if (29 > scope & scope >= 9) res <- "h"
if (9 > scope) res <- "f"}
if (9 > scope) res <- "f"
savedir = "/home/simon/Documents/Si Work/PostDoc Work/Gbmauto help/2022-12-06 Cat Wells/Map/"
# If savedir has a terminal slash, remove it, it's added later
if (substr(x = savedir, start = nchar(savedir), stop = nchar(savedir)) == "/") savedir = substr(x = savedir, start = 1, stop = nchar(savedir) - 1)
setwd("/home/simon/Documents/Si Work/PostDoc Work/Gbmauto help/2022-12-06 Cat Wells/Map/GSHHS_shp/f/")
world <- st_read(dsn = paste0("GSHHS_", res, "_L1.shp"), layer = paste0("GSHHS_", res, "_L1"), quiet = TRUE) # read in worldmap
library(sfheaders)
library(sf)
world <- st_read(dsn = paste0("GSHHS_", res, "_L1.shp"), layer = paste0("GSHHS_", res, "_L1"), quiet = TRUE) # read in worldmap
cropshp <- st_crop(world, xmin = xmin, xmax = xmax, ymin = ymin, ymax = ymax) # crop to extents
?sf_use_s2
