build()
check()
release()
document()
build()
release()
check_rhub()
release()
check_win_devel()
release()
library(devtools)
document()
check()
check(document = FALSE, args = c('--as-cran'))
release()
devtools::document()
build()
devtools::build()
devtools::release()
?gbm.auto
devtools::document()
# mapping issue
grids <- read.csv("/home/simon/Documents/Si Work/PostDoc Work/Gbmauto help/2022-12-06 Cat Wells/Abundance_Preds_only.csv")
# install.packages("dismo")
# install.packages("beepr")
# install.packages("mapplots")
# install.packages("maptools")
# install.packages("rgdal")
# install.packages("rgeos")
# install.packages("raster")
# install.packages("sf")
# install.packages("shapefiles")
# install.packages("devtools")
install.packages("gbm.auto")
library(dplyr)
library(ggpubr)
# library(mapplots)
# library(maptools)
# library(rgdal)
# library(rgeos)
# library(raster)
# library(sf)
# library(shapefiles)
# library(stats)
# library(devtools)
# install.packages("digest") #needed for devtools
library(digest)
# updates for gbm.auto
library(remotes)
#run this before everything, should fix earlier issues
library(gbm.auto)
sf_use_s2(FALSE)
RSandVSsamples <- read.csv("/home/simon/Documents/Si Work/PostDoc Work/Gbmauto help/NarrowedVars_06072023_RSandVS.csv")
RSandVSsamples <- read.csv("/home/simon/Documents/Si Work/PostDoc Work/Gbmauto help/2022-12-06 Cat Wells/NarrowedVars_06072023_RSandVS.csv")
RSandVSsamples <- RSandVSsamples[-which(is.na(RSandVSsamples[39])),]
########################### Step One for BRT, Calculates minimum Bag Fraction size for gbm.auto################
#RS
gbm.bfcheck(samples = RSandVSsamples, resvar = 39, ZI = "CHECK", grv = NULL) # Run code with defaults, FemaleRS and spawnRS are column 39 and 40
gbm.bfcheck(samples = RSandVSsamples, resvar = 40, ZI = "CHECK", grv = NULL) #check report for best values to use below
samples <- RSandVSsamples
# from gbm.auto:
png(filename = paste0("/home/simon/Documents/Si Work/PostDoc Work/Gbmauto help/2022-12-06 Cat Wells/Map/",names(samples[i]),"/PredAbundMap_",names(samples[i]),".png"),
width = 4*1920, height = 4*1920, units = "px", pointsize = 4*48, bg = "white", res = NA, family = "", type = pngtype)
names(samples[39])
i <- 39
# from gbm.auto:
png(filename = paste0("/home/simon/Documents/Si Work/PostDoc Work/Gbmauto help/2022-12-06 Cat Wells/Map/",names(samples[i]),"/PredAbundMap_",names(samples[i]),".png"),
width = 4*1920, height = 4*1920, units = "px", pointsize = 4*48, bg = "white", res = NA, family = "", type = pngtype)
# from gbm.auto:
png(filename = paste0("/home/simon/Documents/Si Work/PostDoc Work/Gbmauto help/2022-12-06 Cat Wells/Map/",names(samples[i]),"/PredAbundMap_",names(samples[i]),".png"),
width = 4*1920, height = 4*1920, units = "px", pointsize = 4*48, bg = "white", res = NA, family = "", type = "cairo-png")
par(mar = c(3.2,3,1.3,0), las = 1, mgp = c(2.1,0.5,0), xpd = FALSE)
gridslat <- 2
gridslon <- 1
predabund <- 3
?gbm.map
# run gbm.map function with generated parameters
gbm.map(x = grids[,gridslon],
y = grids[,gridslat],
z = grids[,predabund],
species = names(samples[i]),
# shape = shape, #either autogenerated or set by user so never blank
shape = NULL
)  # allows gbm.auto's optional terms to be passed to subfunctions:
traceback()
getwd()
# run gbm.map function with generated parameters
gbm.map(x = grids[,gridslon],
y = grids[,gridslat],
z = grids[,predabund],
species = names(samples[i]),
# shape = shape, #either autogenerated or set by user so never blank
shape = NULL,
savedir = "/home/simon/Documents/Si Work/PostDoc Work/Gbmauto help/2022-12-06 Cat Wells/Map/")  # allows gbm.auto's optional terms to be passed to subfunctions:
# run gbm.map function with generated parameters
gbm.map(x = grids[,gridslon],
y = grids[,gridslat],
z = grids[,predabund],
species = names(samples[i]),
# shape = shape, #either autogenerated or set by user so never blank
shape = NULL,
savedir = "/home/simon/Documents/Si Work/PostDoc Work/Gbmauto help/2022-12-06 Cat Wells/Map/")  # allows gbm.auto's optional terms to be passed to subfunctions:
?attachNamespace
unloadNamespace("shapefiles")
# from gbm.auto:
png(filename = paste0("/home/simon/Documents/Si Work/PostDoc Work/Gbmauto help/2022-12-06 Cat Wells/Map/",names(samples[i]),"/PredAbundMap_",names(samples[i]),".png"),
width = 4*1920, height = 4*1920, units = "px", pointsize = 4*48, bg = "white", res = NA, family = "", type = "cairo-png")
par(mar = c(3.2,3,1.3,0), las = 1, mgp = c(2.1,0.5,0), xpd = FALSE)
# run gbm.map function with generated parameters
gbm.map(x = grids[,gridslon],
y = grids[,gridslat],
z = grids[,predabund],
species = names(samples[i]),
# shape = shape, #either autogenerated or set by user so never blank
shape = NULL,
savedir = "/home/simon/Documents/Si Work/PostDoc Work/Gbmauto help/2022-12-06 Cat Wells/Map/")  # allows gbm.auto's optional terms to be passed to subfunctions:
bounds = c(range(grids[,gridslon]),range(grids[,gridslat]))
#create standard bounds from data, and extra bounds for map aesthetic
shape <- gbm.basemap(bounds = bounds, extrabounds = TRUE, savedir = "/home/simon/Documents/Si Work/PostDoc Work/Gbmauto help/2022-12-06 Cat Wells/Map/")
unloadNamespace("shapefiles")
#create standard bounds from data, and extra bounds for map aesthetic
shape <- gbm.basemap(bounds = bounds, extrabounds = TRUE, savedir = "/home/simon/Documents/Si Work/PostDoc Work/Gbmauto help/2022-12-06 Cat Wells/Map/")
traceback()
xmin = bounds[1] #for sf/st upgrade
xmax = bounds[2]
ymin = bounds[3]
ymax = bounds[4]
extrabounds = TRUE
if (extrabounds) { # grow bounds extents if requested
xmid <- mean(bounds[1:2])
ymid <- mean(bounds[3:4])
xmax <- ((bounds[2] - xmid) * 1.6) + xmid #updated for sf/st
xmin <- xmid - ((xmid - bounds[1]) * 1.6)
ymax <- ((bounds[4] - ymid) * 1.6) + ymid
ymin <- ymid - ((ymid - bounds[3]) * 1.6)
}
scope <- max((bounds[2] - bounds[1]), (bounds[4] - bounds[3])) # distance of largest dimension, x or y
if (scope >= 160) res <- "c" # bigger diff = larger map = lower res
if (160 > scope & scope >= 70) res <- "l"
if (70 > scope & scope >= 29) res <- "i"
if (29 > scope & scope >= 9) res <- "h"
if (9 > scope) res <- "f"}
if (9 > scope) res <- "f"
savedir = "/home/simon/Documents/Si Work/PostDoc Work/Gbmauto help/2022-12-06 Cat Wells/Map/"
# If savedir has a terminal slash, remove it, it's added later
if (substr(x = savedir, start = nchar(savedir), stop = nchar(savedir)) == "/") savedir = substr(x = savedir, start = 1, stop = nchar(savedir) - 1)
setwd("/home/simon/Documents/Si Work/PostDoc Work/Gbmauto help/2022-12-06 Cat Wells/Map/GSHHS_shp/f/")
world <- st_read(dsn = paste0("GSHHS_", res, "_L1.shp"), layer = paste0("GSHHS_", res, "_L1"), quiet = TRUE) # read in worldmap
library(sfheaders)
library(sf)
world <- st_read(dsn = paste0("GSHHS_", res, "_L1.shp"), layer = paste0("GSHHS_", res, "_L1"), quiet = TRUE) # read in worldmap
cropshp <- st_crop(world, xmin = xmin, xmax = xmax, ymin = ymin, ymax = ymax) # crop to extents
?sf_use_s2
# install.packages("beepr")
# install.packages("mapplots")
# install.packages("maptools")
# install.packages("rgdal")
# install.packages("rgeos")
# install.packages("raster")
# install.packages("sf")
# install.packages("shapefiles")
# install.packages("devtools")
# install.packages("gbm.auto")
library(dplyr)
library(ggpubr)
# library(mapplots)
# library(maptools)
# library(rgdal)
# library(rgeos)
# library(raster)
# library(sf)
# library(shapefiles)
# library(stats)
# library(devtools)
# install.packages("digest") #needed for devtools
library(digest)
# updates for gbm.auto
library(remotes)
#run this before everything, should fix earlier issues
library(gbm.auto)
RSandVSsamples <- read.csv("/home/simon/Documents/Si Work/PostDoc Work/Gbmauto help/2022-12-06 Cat Wells/NarrowedVars_06072023_RSandVS.csv")
RSandVSsamples <- RSandVSsamples[-which(is.na(RSandVSsamples[39])),]
# mapping issue
grids <- read.csv("/home/simon/Documents/Si Work/PostDoc Work/Gbmauto help/2022-12-06 Cat Wells/Abundance_Preds_only.csv")
samples <- RSandVSsamples
gridslat <- 2
gridslon <- 1
predabund <- 3
i <- 39
# unloadNamespace("shapefiles")
# from gbm.auto:
png(filename = paste0("/home/simon/Documents/Si Work/PostDoc Work/Gbmauto help/2022-12-06 Cat Wells/Map/",names(samples[i]),"/PredAbundMap_",names(samples[i]),".png"),
width = 4*1920, height = 4*1920, units = "px", pointsize = 4*48, bg = "white", res = NA, family = "", type = "cairo-png")
par(mar = c(3.2,3,1.3,0), las = 1, mgp = c(2.1,0.5,0), xpd = FALSE)
# run gbm.map function with generated parameters
gbm.map(x = grids[,gridslon],
y = grids[,gridslat],
z = grids[,predabund],
species = names(samples[i]),
# shape = shape, #either autogenerated or set by user so never blank
shape = NULL,
savedir = "/home/simon/Documents/Si Work/PostDoc Work/Gbmauto help/2022-12-06 Cat Wells/Map/")  # allows gbm.auto's optional terms to be passed to subfunctions:
bounds = c(range(grids[,gridslon]),range(grids[,gridslat]))
#create standard bounds from data, and extra bounds for map aesthetic
shape <- gbm.basemap(bounds = bounds, extrabounds = TRUE, savedir = "/home/simon/Documents/Si Work/PostDoc Work/Gbmauto help/2022-12-06 Cat Wells/Map/")
unloadNamespace("shapefiles")
#create standard bounds from data, and extra bounds for map aesthetic
shape <- gbm.basemap(bounds = bounds, extrabounds = TRUE, savedir = "/home/simon/Documents/Si Work/PostDoc Work/Gbmauto help/2022-12-06 Cat Wells/Map/")
world <- st_read(dsn = "/home/simon/Documents/Si Work/PostDoc Work/Gbmauto help/2022-12-06 Cat Wells/Map/GSHHS_shp/f/GSHHS_f_L1.shp", quiet = TRUE) # read in worldmap
library(sf)
world <- st_read(dsn = "/home/simon/Documents/Si Work/PostDoc Work/Gbmauto help/2022-12-06 Cat Wells/Map/GSHHS_shp/f/GSHHS_f_L1.shp", quiet = TRUE) # read in worldmap
View(world)
# Warning message: In .Internal(vapply(X, FUN, FUN.VALUE, USE.NAMES)) : closing unused connection 3 (Crop_Map.shx)
# due to: gbm.basemap:
cropshp <- st_crop(world, xmin = xmin, xmax = xmax, ymin = ymin, ymax = ymax) # crop to extents
xmin = bounds[1] #for sf/st upgrade
xmax = bounds[2]
ymin = bounds[3]
ymax = bounds[4]
xmid <- mean(bounds[1:2])
ymid <- mean(bounds[3:4])
xmax <- ((bounds[2] - xmid) * 1.6) + xmid #updated for sf/st
xmin <- xmid - ((xmid - bounds[1]) * 1.6)
ymax <- ((bounds[4] - ymid) * 1.6) + ymid
ymin <- ymid - ((ymid - bounds[3]) * 1.6)
# due to: gbm.basemap:
cropshp <- st_crop(world, xmin = xmin, xmax = xmax, ymin = ymin, ymax = ymax) # crop to extents
xmin
xmax
ymin
ymax
bounds
xmin
xmax
grids[,gridslon]
grids[,gridslat]
gridslat <- 1
gridslon <- 2
predabund <- 3
i <- 39
# unloadNamespace("shapefiles")
# from gbm.auto:
png(filename = paste0("/home/simon/Documents/Si Work/PostDoc Work/Gbmauto help/2022-12-06 Cat Wells/Map/",names(samples[i]),"/PredAbundMap_",names(samples[i]),".png"),
width = 4*1920, height = 4*1920, units = "px", pointsize = 4*48, bg = "white", res = NA, family = "", type = "cairo-png")
par(mar = c(3.2,3,1.3,0), las = 1, mgp = c(2.1,0.5,0), xpd = FALSE)
# run gbm.map function with generated parameters
gbm.map(x = grids[,gridslon],
y = grids[,gridslat],
z = grids[,predabund],
species = names(samples[i]),
# shape = shape, #either autogenerated or set by user so never blank
shape = NULL,
savedir = "/home/simon/Documents/Si Work/PostDoc Work/Gbmauto help/2022-12-06 Cat Wells/Map/")  # allows gbm.auto's optional terms to be passed to subfunctions:
# install.packages("beepr")
# install.packages("mapplots")
# install.packages("maptools")
# install.packages("rgdal")
# install.packages("rgeos")
# install.packages("raster")
# install.packages("sf")
# install.packages("shapefiles")
# install.packages("devtools")
# install.packages("gbm.auto")
library(dplyr)
library(ggpubr)
# library(mapplots)
# library(maptools)
# library(rgdal)
# library(rgeos)
# library(raster)
# library(sf)
# library(shapefiles)
# library(stats)
# library(devtools)
# install.packages("digest") #needed for devtools
library(digest)
#run this before everything, should fix earlier issues
library(gbm.auto)
# sf_use_s2(FALSE)
options(timeout = 240) # Stops timeout issue when initially downloading the coastline data
RSandVSsamples <- read.csv("/home/simon/Documents/Si Work/PostDoc Work/Gbmauto help/2022-12-06 Cat Wells/NarrowedVars_06072023_RSandVS.csv")
RSandVSsamples <- RSandVSsamples[-which(is.na(RSandVSsamples[39])),]
# mapping issue
grids <- read.csv("/home/simon/Documents/Si Work/PostDoc Work/Gbmauto help/2022-12-06 Cat Wells/Abundance_Preds_only.csv")
samples <- RSandVSsamples
gridslat <- 1
gridslon <- 2
predabund <- 3
i <- 39
# unloadNamespace("shapefiles")
# from gbm.auto:
png(filename = paste0("/home/simon/Documents/Si Work/PostDoc Work/Gbmauto help/2022-12-06 Cat Wells/Map/",names(samples[i]),"/PredAbundMap_",names(samples[i]),".png"),
width = 4*1920, height = 4*1920, units = "px", pointsize = 4*48, bg = "white", res = NA, family = "", type = "cairo-png")
par(mar = c(3.2,3,1.3,0), las = 1, mgp = c(2.1,0.5,0), xpd = FALSE)
# run gbm.map function with generated parameters
gbm.map(x = grids[,gridslon],
y = grids[,gridslat],
z = grids[,predabund],
species = names(samples[i]),
# shape = shape, #either autogenerated or set by user so never blank
shape = NULL,
savedir = "/home/simon/Documents/Si Work/PostDoc Work/Gbmauto help/2022-12-06 Cat Wells/Map/")  # allows gbm.auto's optional terms to be passed to subfunctions:
traceback()
# byx, byy, mapmain, heatcol, mapback, landcol, lejback, legendloc, grdfun, zero, quantile, heatcolours, colournumber
dev.off()
# byx, byy, mapmain, heatcol, mapback, landcol, lejback, legendloc, grdfun, zero, quantile, heatcolours, colournumber
dev.off()
# unloadNamespace("shapefiles")
# from gbm.auto:
png(filename = paste0("/home/simon/Documents/Si Work/PostDoc Work/Gbmauto help/2022-12-06 Cat Wells/Map/",names(samples[i]),"/PredAbundMap_",names(samples[i]),".png"),
width = 4*1920, height = 4*1920, units = "px", pointsize = 4*48, bg = "white", res = NA, family = "", type = "cairo-png")
par(mar = c(3.2,3,1.3,0), las = 1, mgp = c(2.1,0.5,0), xpd = FALSE)
# run gbm.map function with generated parameters
gbm.map(x = grids[,gridslon],
y = grids[,gridslat],
z = grids[,predabund],
species = names(samples[i]),
# shape = shape, #either autogenerated or set by user so never blank
shape = "/home/simon/Documents/Si Work/PostDoc Work/Gbmauto help/2022-12-06 Cat Wells/Map/CroppedMap/Crop_Map.shp",
savedir = "/home/simon/Documents/Si Work/PostDoc Work/Gbmauto help/2022-12-06 Cat Wells/Map/")  # allows gbm.auto's optional terms to be passed to subfunctions:
x = grids[,gridslon]
y = grids[,gridslat]
z = grids[,predabund]
species = names(samples[i])
species
shape = "/home/simon/Documents/Si Work/PostDoc Work/Gbmauto help/2022-12-06 Cat Wells/Map/CroppedMap/Crop_Map.shp"
savedir = "/home/simon/Documents/Si Work/PostDoc Work/Gbmauto help/2022-12-06 Cat Wells/Map/"
byx = NULL
byy = NULL
grdfun = mean
mapmain = "Predicted CPUE (numbers per hour): "
species = "Response Variable"
heatcolours = c("white", "yellow", "orange","red", "brown4")
colournumber = 8
shape = NULL
landcol = "grey80"
mapback = "lightblue"
legendloc = "bottomright"
legendtitle = "CPUE"
lejback = "white"
zero = TRUE
quantile = 1
byxout = FALSE
breaks = NULL
byxport = NULL
shape
species = names(samples[i])
shape = "/home/simon/Documents/Si Work/PostDoc Work/Gbmauto help/2022-12-06 Cat Wells/Map/CroppedMap/Crop_Map.shp"
# require(mapplots)
if (is.null(shape)) { # if no map shape entered, generate bounds and call gbm.basemap
bounds = c(range(x),range(y))
#create standard bounds from data, and extra bounds for map aesthetic
shape <- gbm.basemap(bounds = bounds, extrabounds = TRUE)
}
is.null(byx)
# work out cell size for uniform square gridded data: Create blank vector for grid length calcs
bydist <- rep(NA, length(x))
bydist
# and attach it to grids
cells <- data.frame(LONGITUDE = x, bydist = bydist, stringsAsFactors = FALSE)
cells
# fill it: if [next longitude minus current longitude] equals [current longitude minus previous longitude], that's a uniform cell.
# data rounded to prevent tiny fluctuations counting as differences. Need to set that tolerance.
# Could do 10% of average distance between uniform points, but you don't know that til the end!
cells[2:(length(x) - 1),"bydist"] <-
ifelse(round(cells[2:(length(x) - 1),1] - cells[1:(length(x) - 2),1], digits = 5)
==
round(cells[3:length(x),1] - cells[2:(length(x) - 1),1], digits = 5),
round(cells[2:(length(x) - 1),1] - cells[1:(length(x) - 2),1], digits = 5),
NA)
View(cells)
# Take an average of those distances, they should all be identical anyway. Apply it to byx & byy.
byx <- mean(cells$bydist, na.rm = TRUE)
byx
# if users grids data are organised in COLUMNS rather than rows, they'll have long blocks of the same longitude
# the mean distance will be 0, and make.grid will fail when it calls seq(xlim[1], xlim[2], by = byx) and byx == 0
# in case of this, try latitude instead of longitude
if (byx == 0) {
bydist <- rep(NA, length(y))
cells <- data.frame(LONGITUDE = y, bydist = bydist, stringsAsFactors = FALSE)
cells[2:(length(y) - 1),"bydist"] <-
ifelse(round(cells[2:(length(y) - 1),1] - cells[1:(length(y) - 2),1], digits = 5) ==
round(cells[3:length(y),1] - cells[2:(length(y) - 1),1], digits = 5),
round(cells[2:(length(y) - 1),1] - cells[1:(length(y) - 2),1], digits = 5),
NA)
byx <- mean(cells$bydist, na.rm = TRUE)
}
byx
bydist <- rep(NA, length(y))
bydist
cells <- data.frame(LONGITUDE = y, bydist = bydist, stringsAsFactors = FALSE)
cells[2:(length(y) - 1),"bydist"] <-
ifelse(round(cells[2:(length(y) - 1),1] - cells[1:(length(y) - 2),1], digits = 5) ==
round(cells[3:length(y),1] - cells[2:(length(y) - 1),1], digits = 5),
round(cells[2:(length(y) - 1),1] - cells[1:(length(y) - 2),1], digits = 5),
NA)
byx <- abs(mean(cells$bydist, na.rm = TRUE))
byx
byy <- byx
devtools::document()
# unloadNamespace("shapefiles")
# from gbm.auto:
png(filename = paste0("/home/simon/Documents/Si Work/PostDoc Work/Gbmauto help/2022-12-06 Cat Wells/Map/",names(samples[i]),"/PredAbundMap_",names(samples[i]),".png"),
width = 4*1920, height = 4*1920, units = "px", pointsize = 4*48, bg = "white", res = NA, family = "", type = "cairo-png")
par(mar = c(3.2,3,1.3,0), las = 1, mgp = c(2.1,0.5,0), xpd = FALSE)
# run gbm.map function with generated parameters
gbm.map(x = grids[,gridslon],
y = grids[,gridslat],
z = grids[,predabund],
species = names(samples[i]),
byx = 0.1,
byy = 0.1,
# shape = shape, #either autogenerated or set by user so never blank
shape = "/home/simon/Documents/Si Work/PostDoc Work/Gbmauto help/2022-12-06 Cat Wells/Map/CroppedMap/Crop_Map.shp",
savedir = "/home/simon/Documents/Si Work/PostDoc Work/Gbmauto help/2022-12-06 Cat Wells/Map/")  # allows gbm.auto's optional terms to be passed to subfunctions:
traceback()
# unloadNamespace("shapefiles")
# from gbm.auto:
png(filename = paste0("/home/simon/Documents/Si Work/PostDoc Work/Gbmauto help/2022-12-06 Cat Wells/Map/",names(samples[i]),"/PredAbundMap_",names(samples[i]),".png"),
width = 4*1920, height = 4*1920, units = "px", pointsize = 4*48, bg = "white", res = NA, family = "", type = "cairo-png")
par(mar = c(3.2,3,1.3,0), las = 1, mgp = c(2.1,0.5,0), xpd = FALSE)
# run gbm.map function with generated parameters
gbm.map(x = grids[,gridslon],
y = grids[,gridslat],
z = grids[,predabund],
species = names(samples[i]),
byx = 0.1,
byy = 0.1,
# shape = shape, #either autogenerated or set by user so never blank
shape = "/home/simon/Documents/Si Work/PostDoc Work/Gbmauto help/2022-12-06 Cat Wells/Map/CroppedMap/Crop_Map.shp",
savedir = "/home/simon/Documents/Si Work/PostDoc Work/Gbmauto help/2022-12-06 Cat Wells/Map/")  # allows gbm.auto's optional terms to be passed to subfunctions:
traceback()
?draw.shape
myshape <- shapefiles::read.shapefile("/home/simon/Documents/Si Work/PostDoc Work/Gbmauto help/2022-12-06 Cat Wells/Map/CroppedMap/Crop_Map.shp")
myshape <- shapefiles::read.shapefile("/home/simon/Documents/Si Work/PostDoc Work/Gbmauto help/2022-12-06 Cat Wells/Map/CroppedMap/Crop_Map")
# byx, byy, mapmain, heatcol, mapback, landcol, lejback, legendloc, grdfun, zero, quantile, heatcolours, colournumber
dev.off()
# byx, byy, mapmain, heatcol, mapback, landcol, lejback, legendloc, grdfun, zero, quantile, heatcolours, colournumber
dev.off()
# byx, byy, mapmain, heatcol, mapback, landcol, lejback, legendloc, grdfun, zero, quantile, heatcolours, colournumber
dev.off()
# byx, byy, mapmain, heatcol, mapback, landcol, lejback, legendloc, grdfun, zero, quantile, heatcolours, colournumber
dev.off()
# from gbm.auto:
png(filename = paste0("/home/simon/Documents/Si Work/PostDoc Work/Gbmauto help/2022-12-06 Cat Wells/Map/",names(samples[i]),"/PredAbundMap_",names(samples[i]),".png"),
width = 4*1920, height = 4*1920, units = "px", pointsize = 4*48, bg = "white", res = NA, family = "", type = "cairo-png")
par(mar = c(3.2,3,1.3,0), las = 1, mgp = c(2.1,0.5,0), xpd = FALSE)
# run gbm.map function with generated parameters
gbm.map(x = grids[,gridslon],
y = grids[,gridslat],
z = grids[,predabund],
species = names(samples[i]),
byx = 0.1,
byy = 0.1,
# shape = shape, #either autogenerated or set by user so never blank
shape = myshape,
savedir = "/home/simon/Documents/Si Work/PostDoc Work/Gbmauto help/2022-12-06 Cat Wells/Map/")  # allows gbm.auto's optional terms to be passed to subfunctions:
# byx, byy, mapmain, heatcol, mapback, landcol, lejback, legendloc, grdfun, zero, quantile, heatcolours, colournumber
dev.off()
getwd()
names(samples[i])
# from gbm.auto:
png(filename = paste0("/home/simon/Documents/Si Work/PostDoc Work/Gbmauto help/2022-12-06 Cat Wells/Map/",names(samples[i]),"/PredAbundMap_",names(samples[i]),".png"),
width = 4*1920, height = 4*1920, units = "px", pointsize = 4*48, bg = "white", res = NA, family = "", type = "cairo-png")
par(mar = c(3.2,3,1.3,0), las = 1, mgp = c(2.1,0.5,0), xpd = FALSE)
# run gbm.map function with generated parameters
gbm.map(x = grids[,gridslon],
y = grids[,gridslat],
z = grids[,predabund],
species = names(samples[i]),
byx = 0.1,
byy = 0.1,
# shape = shape, #either autogenerated or set by user so never blank
shape = myshape,
savedir = "/home/simon/Documents/Si Work/PostDoc Work/Gbmauto help/2022-12-06 Cat Wells/Map/")  # allows gbm.auto's optional terms to be passed to subfunctions:
# byx, byy, mapmain, heatcol, mapback, landcol, lejback, legendloc, grdfun, zero, quantile, heatcolours, colournumber
dev.off()
devtools::document()
library(devtools)
document()
??geom_sf_label
?ggsave
devtools::document()
?write.csv
devtools::document()
reporttmp <- read.csv("/home/simon/Documents/Si Work/PostDoc Work/Kroetz & Dedman Sawfish BRT/loops/10/P.Pectinata.CPUE/Report.csv")
as.character(reporttmp$Best.Binary.BRT[4])
# copy AUC score from this loop's report to allreport
auctmp <- as.character(reporttmp$Best.Binary.BRT[4])
aucspltmp <- strsplit(auctmp, "Training data AUC score: ")
aucspltmp
as.numeric(aucspltmp[[1]][2])
aucsplnumtmp <- as.numeric(aucspltmp[[1]][2])
aucsplnumtmp
devtools::document()
getwd()
exists("Bin_Best_Model")
?exists
loadgbm = "/home/simon/Documents/Si Work/PostDoc Work/Kroetz & Dedman Sawfish BRT/P.Pectinata.CPUE/"
list.files(path = loadgbm,pattern = "Bin_Best_Model")
list.files(path = loadgbm,pattern = "Bin_Best_Modef")
yay <- list.files(path = loadgbm,pattern = "Bin_Best_Model")
nay <- list.files(path = loadgbm,pattern = "Bin_Best_Modef")
class(yay)
class(nay)
length(yay)
length(nay)
length(list.files(path = loadgbm, pattern = "Bin_Best_Model"))
length(list.files(path = loadgbm, pattern = "Bin_Best_Model")) ==1
length(list.files(path = loadgbm, pattern = "Bin_Best_Model")) != 1
?rowMeans
devtools::document()
