responses <- list(rep(NA, n.plots))
predictors[[j]] <- response.matrix[, 1]
# if (is.factor(data[, gbm.call$gbm.x[k]])) {
#   predictors[[j]] <- factor(predictors[[j]], levels = levels(data[,
#                                                                   gbm.call$gbm.x[k]]))
# }
responses[[j]] <- response.matrix[, 2] - mean(response.matrix[, 2])
if (j == 1) {
ymin = min(responses[[j]])
ymax = max(responses[[j]])
}
if (j == 1) {
ymin = min(responses[[j]])
ymax = max(responses[[j]])
} else {
ymin = min(ymin, min(responses[[j]]))
ymax = max(ymax, max(responses[[j]]))
}
op <- graphics::par(no.readonly = TRUE)
graphics::par(mfrow = plot.layout)
plot.layout = c(3, 4)
max.plots <- plot.layout[1] * plot.layout[2]
graphics::par(mfrow = plot.layout)
plot.count
plot.count <- 0
plot.count <- plot.count + 1
n.plots == 1
k <- match(pred.names[variable.no], gbm.object$contributions$var)
common.scale = TRUE
plot(predictors[[j]], responses[[j]], ylim = c(ymin, ymax), type = "l")
common.scale = FALSE
y.label = ""
x.label = NULL
show.contrib = TRUE
plot.layout = c(1, 1)
op <- graphics::par(no.readonly = TRUE)
graphics::par(mfrow = plot.layout)
plot(predictors[[j]], responses[[j]], ylim = c(ymin, ymax), type = "l")
plot(predictors[[j]], responses[[j]], type = "l")
seq(from = -2, to = 3.5, by = 0.5)
tmp <- seq(from = -2, to = 3.5, by = 0.5)
tmp <- tmp - mean(tmp)
tmp <- 1 / (1 + exp(-tmp))
tmp <- scale(tmp, scale = FALSE)
tmp
class(tmp)
tmp[,1]
round(tmp[,1], 2)
tmp <- seq(from = -1.9, to = 3.6, by = 0.1)
tmp <- tmp - mean(tmp)
tmp <- 1 / (1 + exp(-tmp))
tmp <- scale(tmp, scale = FALSE)
round(tmp[,1], 2)
exp(1:10)
exp(0:10)
exp(-1:10)
-1:10
exp(-1:10)
1 / (1 + exp(-1:10))
tmp <- seq(from = -2, to = 8, by = 1)
tmp
tmpx = 1:10
tmpy <- seq(from = -2, to = 8, by = 1)
tmpx = 1:11
tmpy <- tmpy  - mean(tmpy)
tmpy <- seq(from = -2, to = 8, by = 1)
tmpz <- tmpy  - mean(tmpy)
tmpy <- seq(from = -2, to = 8, by = 1)
tmpz <- tmpy  - mean(tmpy)
tmpa <- 1 / (1 + exp(tmpz))
tmpb <- scale(tmpa, center = TRUE, scale = FALSE)
plot(tmpx, tmpy)
plot(tmpx, tmpz)
tmpz
plot(tmpx, tmpa)
plot(tmpx, tmpb)
tmpb
# completely changes the scale and shape of the data!
centrelog <- function(x) {
x <- x  - mean(x)
x <- 1 / (1 + exp(x))
x <- scale(x, center = TRUE, scale = FALSE)
}
tmpx = 1:11
tmpy <- seq(from = -2, to = 8, by = 1)
tmpb <- centrelog(tmpy)
plot(tmpx, tmpy) # scale -2:8 linear
plot(tmpx, tmpb) # scale -0.4933071:0.4933071, falling S logistic
plot(tmpx, tmpy) # scale -2:8 linear
tmpy <- seq(from = 3.5, to = -2, by = -0.5)
tmpy
tmpb <- centrelog(tmpy)
plot(tmpx, tmpy) # scale -2:8 linear
tmpx = 1:(length(tmpy))
plot(tmpx, tmpy) # scale -2:8 linear
plot(tmpx, tmpb) # scale -0.4933071:0.4933071, falling S logistic
mean(tmpa)
plot(predictors[[j]], responses[[j]], type = "l")
temp.lo <- loess(responses[[j]] ~ predictors[[j]],
span = 0.3)
lines(predictors[[j]], fitted(temp.lo), lty = 2,
col = 2)
build()
document()
styler:::style_active_file()
library(devtools)
document()
build()
library(devtools)
document()
build()
library(devtools)
document()
build()
library(devtools)
document()
build()
library(devtools)
document()
build()
library(devtools)
document()
build()
library(devtools)
document()
build()
document()
build()
gbm.plot
library(dismo)
gbm.plot
styler:::style_active_file()
# The grid and samples data are attached, I've been using n_fish as the resvar and everything from ssh through temperature as the expvars.
# Here's the actual gbm.auto code I've been using:
SBass_fall <- read.csv("/home/simon/Documents/Si Work/PostDoc Work/Gbmauto help/Chuck Bangley/2021-12-14_x_must_be_numeric/SBass_fall_samples.csv")
grid_oct_slackhigh <- read.csv("/home/simon/Documents/Si Work/PostDoc Work/Gbmauto help/Chuck Bangley/2021-12-14_x_must_be_numeric/Oct_sl_grid.csv")
# The grid and samples data are attached, I've been using n_fish as the resvar and everything from ssh through temperature as the expvars.
# Here's the actual gbm.auto code I've been using:
library(gbm.auto)
gbm.auto(
grids = grid_oct_slackhigh,
samples = SBass_fall,
expvar = c(6, 7, 8, 9, 10, 11, 12, 13),
resvar = 14,
lr = c(0.01),
bf = c(0.6),
tc = c(2),
gridslat = 3,
gridslon = 4,
map = TRUE,
shape = BaseMap,
gaus = FALSE,
varint = TRUE,
simp = FALSE,
max.trees = 10000,
# savedir = "~/Data/FORCE RAP/Modeling/R Code and Outputs/First Iteration/Striped Bass"
savedir = "/home/simon/Documents/Si Work/PostDoc Work/Gbmauto help/Chuck Bangley/2021-12-14_x_must_be_numeric"
)
gbm.auto(
grids = grid_oct_slackhigh,
samples = SBass_fall,
expvar = c(6, 7, 8, 9, 10, 11, 12, 13),
resvar = 14,
lr = c(0.01),
bf = c(0.6),
tc = c(2),
gridslat = 3,
gridslon = 4,
map = TRUE,
# shape = BaseMap,
gaus = FALSE,
varint = TRUE,
simp = FALSE,
max.trees = 10000,
# savedir = "~/Data/FORCE RAP/Modeling/R Code and Outputs/First Iteration/Striped Bass"
savedir = "/home/simon/Documents/Si Work/PostDoc Work/Gbmauto help/Chuck Bangley/2021-12-14_x_must_be_numeric"
)
setwd("/home/simon/Documents/Si Work/PostDoc Work/Gbmauto help/Chuck Bangley/2021-12-14_x_must_be_numeric")
getwd()
setwd("/home/simon/Documents/Si Work/PostDoc Work/Gbmauto help/Chuck Bangley/2021-12-14_x_must_be_numeric")
gbm.auto(
grids = grid_oct_slackhigh,
samples = SBass_fall,
expvar = c(6, 7, 8, 9, 10, 11, 12, 13),
resvar = 14,
lr = c(0.01),
bf = c(0.6),
tc = c(2),
gridslat = 3,
gridslon = 4,
map = TRUE,
# shape = BaseMap,
gaus = FALSE,
varint = TRUE,
simp = FALSE,
max.trees = 10000,
# savedir = "~/Data/FORCE RAP/Modeling/R Code and Outputs/First Iteration/Striped Bass"
savedir = "/home/simon/Documents/Si Work/PostDoc Work/Gbmauto help/Chuck Bangley/2021-12-14_x_must_be_numeric"
)
# The grid and samples data are attached, I've been using n_fish as the resvar and everything from ssh through temperature as the expvars.
# Here's the actual gbm.auto code I've been using:
library(devtools)
install.github("SimonDedman/gbm.auto")
install_github("SimonDedman/gbm.auto")
library(gbm.auto)
setwd("/home/simon/Documents/Si Work/PostDoc Work/Gbmauto help/Chuck Bangley/2021-12-14_x_must_be_numeric")
SBass_fall <- read.csv("/home/simon/Documents/Si Work/PostDoc Work/Gbmauto help/Chuck Bangley/2021-12-14_x_must_be_numeric/SBass_fall_samples.csv")
grid_oct_slackhigh <- read.csv("/home/simon/Documents/Si Work/PostDoc Work/Gbmauto help/Chuck Bangley/2021-12-14_x_must_be_numeric/Oct_sl_grid.csv")
gbm.auto(
grids = grid_oct_slackhigh,
samples = SBass_fall,
expvar = c(6, 7, 8, 9, 10, 11, 12, 13),
resvar = 14,
lr = c(0.01),
bf = c(0.6),
tc = c(2),
gridslat = 3,
gridslon = 4,
map = TRUE,
# shape = BaseMap,
gaus = FALSE,
varint = TRUE,
simp = FALSE,
max.trees = 10000,
# savedir = "~/Data/FORCE RAP/Modeling/R Code and Outputs/First Iteration/Striped Bass"
savedir = "/home/simon/Documents/Si Work/PostDoc Work/Gbmauto help/Chuck Bangley/2021-12-14_x_must_be_numeric"
)
usethis::use_tidy_description()
getwd()
usethis::use_tidy_description()
usethis::use_package("shapefiles")
source("~/Dropbox/Galway/Analysis/R/gbm.auto/R/gbm.basemap.R")
library(devtools)
document()
build()
# The grid and samples data are attached, I've been using n_fish as the resvar and everything from ssh through temperature as the expvars.
# Here's the actual gbm.auto code I've been using:
library(devtools)
install_github("SimonDedman/gbm.auto")
library(gbm.auto)
# usethis::use_tidy_description()
# usethis::use_package("shapefiles")
setwd("/home/simon/Documents/Si Work/PostDoc Work/Gbmauto help/Chuck Bangley/2021-12-14_x_must_be_numeric")
SBass_fall <- read.csv("/home/simon/Documents/Si Work/PostDoc Work/Gbmauto help/Chuck Bangley/2021-12-14_x_must_be_numeric/SBass_fall_samples.csv")
grid_oct_slackhigh <- read.csv("/home/simon/Documents/Si Work/PostDoc Work/Gbmauto help/Chuck Bangley/2021-12-14_x_must_be_numeric/Oct_sl_grid.csv")
gbm.auto(
grids = grid_oct_slackhigh,
samples = SBass_fall,
expvar = c(6, 7, 8, 9, 10, 11, 12, 13),
resvar = 14,
lr = c(0.01),
bf = c(0.6),
tc = c(2),
gridslat = 3,
gridslon = 4,
map = TRUE,
# shape = BaseMap,
gaus = FALSE,
varint = TRUE,
simp = FALSE,
max.trees = 10000,
# savedir = "~/Data/FORCE RAP/Modeling/R Code and Outputs/First Iteration/Striped Bass"
savedir = "/home/simon/Documents/Si Work/PostDoc Work/Gbmauto help/Chuck Bangley/2021-12-14_x_must_be_numeric"
)
source("~/Dropbox/Galway/Analysis/R/gbm.auto/R/gbm.basemap.R")
# The grid and samples data are attached, I've been using n_fish as the resvar and everything from ssh through temperature as the expvars.
# Here's the actual gbm.auto code I've been using:
library(devtools)
install_github("SimonDedman/gbm.auto")
library(gbm.auto)
# usethis::use_tidy_description()
# usethis::use_package("shapefiles")
setwd("/home/simon/Documents/Si Work/PostDoc Work/Gbmauto help/Chuck Bangley/2021-12-14_x_must_be_numeric")
SBass_fall <- read.csv("/home/simon/Documents/Si Work/PostDoc Work/Gbmauto help/Chuck Bangley/2021-12-14_x_must_be_numeric/SBass_fall_samples.csv")
grid_oct_slackhigh <- read.csv("/home/simon/Documents/Si Work/PostDoc Work/Gbmauto help/Chuck Bangley/2021-12-14_x_must_be_numeric/Oct_sl_grid.csv")
gbm.auto(
grids = grid_oct_slackhigh,
samples = SBass_fall,
expvar = c(6, 7, 8, 9, 10, 11, 12, 13),
resvar = 14,
lr = c(0.01),
bf = c(0.6),
tc = c(2),
gridslat = 3,
gridslon = 4,
map = TRUE,
# shape = BaseMap,
gaus = FALSE,
varint = TRUE,
simp = FALSE,
max.trees = 10000,
# savedir = "~/Data/FORCE RAP/Modeling/R Code and Outputs/First Iteration/Striped Bass"
savedir = "/home/simon/Documents/Si Work/PostDoc Work/Gbmauto help/Chuck Bangley/2021-12-14_x_must_be_numeric"
)
library(gbm.auto)
# usethis::use_tidy_description()
# usethis::use_package("shapefiles")
setwd("/home/simon/Documents/Si Work/PostDoc Work/Gbmauto help/Chuck Bangley/2021-12-14_x_must_be_numeric")
SBass_fall <- read.csv("/home/simon/Documents/Si Work/PostDoc Work/Gbmauto help/Chuck Bangley/2021-12-14_x_must_be_numeric/SBass_fall_samples.csv")
grid_oct_slackhigh <- read.csv("/home/simon/Documents/Si Work/PostDoc Work/Gbmauto help/Chuck Bangley/2021-12-14_x_must_be_numeric/Oct_sl_grid.csv")
gbm.auto(
grids = grid_oct_slackhigh,
samples = SBass_fall,
expvar = c(6, 7, 8, 9, 10, 11, 12, 13),
resvar = 14,
lr = c(0.01),
bf = c(0.6),
tc = c(2),
gridslat = 3,
gridslon = 4,
map = TRUE,
# shape = BaseMap,
gaus = FALSE,
varint = TRUE,
simp = FALSE,
max.trees = 10000,
# savedir = "~/Data/FORCE RAP/Modeling/R Code and Outputs/First Iteration/Striped Bass"
savedir = "/home/simon/Documents/Si Work/PostDoc Work/Gbmauto help/Chuck Bangley/2021-12-14_x_must_be_numeric"
)
traceback()
grid_oct_slackhigh[, 4]
# > traceback()
# 6: stop("invalid '(to - from)/by'")
# 5: seq.default(xlim[1], xlim[2], by = byx)
# 4: seq(xlim[1], xlim[2], by = byx)
# 3: make.grid(x, y, z, byx, byy, xlim = range(x), ylim = range(y), fun = grdfun)
# 2: gbm.map(x = grids[, gridslon], y = grids[, gridslat], z = grids[,predabund], species = names(samples[i]), shape = shape, ...)
# 1: gbm.auto(grids = grid_oct_slackhigh, samples = SBass_fall, expvar = c(6, 7, 8, 9, 10, 11, 12, 13), resvar = 14, lr = c(0.01), bf = c(0.6),
#             tc = c(2), gridslat = 3, gridslon = 4, map = TRUE, gaus = FALSE,
#             varint = TRUE, simp = FALSE, max.trees = 10000, savedir = "/home/simon/Documents/Si Work/PostDoc Work/Gbmauto help/Chuck Bangley/2021-12-14_x_must_be_numeric")
predabund <- read.csv("/home/simon/Documents/Si Work/PostDoc Work/Gbmauto help/Chuck Bangley/2021-12-14_x_must_be_numeric/n_fish/Abundance_Preds_only.csv")
grid_oct_slackhigh <- cbind(grid_oct_slackhigh, predabund[,3])
getwd()
cropshp <- shapefiles::read.shapefile("./CroppedMap/Crop_Map")
gbm.map(x = grid_oct_slackhigh[, 4], y = grid_oct_slackhigh[, 3], z = grid_oct_slackhigh[, 14], species = "n_fish", shape = cropshp)
traceback()
x = grid_oct_slackhigh[, 4]
bydist <- rep(NA, length(x))
bydist
# and attach it to grids
cells <- data.frame(LONGITUDE = x, bydist = bydist, stringsAsFactors = FALSE)
cells
# fill it: if [next longitude minus current longitude] equals [current longitude minus previous longitude], that's a uniform cell.
# data rounded to prevent tiny fluctuations counting as differences. Need to set that tolerance.
# Could do 10% of average distance between uniform points, but you don't know that til the end!
cells[2:(length(x) - 1),"bydist"] <-
ifelse(round(cells[2:(length(x) - 1),1] - cells[1:(length(x) - 2),1], digits = 5)
==
round(cells[3:length(x),1] - cells[2:(length(x) - 1),1], digits = 5),
round(cells[2:(length(x) - 1),1] - cells[1:(length(x) - 2),1], digits = 5),
NA)
# Take an average of those distances, they should all be identical anyway. Apply it to byx & byy.
byx <- mean(cells$bydist, na.rm = TRUE)
byx
View(grid_oct_slackhigh)
hist(x)
x = grid_oct_slackhigh[, 3]
bydist <- rep(NA, length(x))
# and attach it to grids
cells <- data.frame(LONGITUDE = x, bydist = bydist, stringsAsFactors = FALSE)
# fill it: if [next longitude minus current longitude] equals [current longitude minus previous longitude], that's a uniform cell.
# data rounded to prevent tiny fluctuations counting as differences. Need to set that tolerance.
# Could do 10% of average distance between uniform points, but you don't know that til the end!
cells[2:(length(x) - 1),"bydist"] <-
ifelse(round(cells[2:(length(x) - 1),1] - cells[1:(length(x) - 2),1], digits = 5)
==
round(cells[3:length(x),1] - cells[2:(length(x) - 1),1], digits = 5),
round(cells[2:(length(x) - 1),1] - cells[1:(length(x) - 2),1], digits = 5),
NA)
# Take an average of those distances, they should all be identical anyway. Apply it to byx & byy.
byx <- mean(cells$bydist, na.rm = TRUE)
byx
# 0
hist(x)
byy <- byx
byy
byx
x = grid_oct_slackhigh[, 4] # lon, correct, but chucks have long strings of the same value i.e. rows
bydist <- rep(NA, length(x))
# and attach it to grids
cells <- data.frame(LONGITUDE = x, bydist = bydist, stringsAsFactors = FALSE)
# fill it: if [next longitude minus current longitude] equals [current longitude minus previous longitude], that's a uniform cell.
# data rounded to prevent tiny fluctuations counting as differences. Need to set that tolerance.
# Could do 10% of average distance between uniform points, but you don't know that til the end!
cells[2:(length(x) - 1),"bydist"] <-
ifelse(round(cells[2:(length(x) - 1),1] - cells[1:(length(x) - 2),1], digits = 5)
==
round(cells[3:length(x),1] - cells[2:(length(x) - 1),1], digits = 5),
round(cells[2:(length(x) - 1),1] - cells[1:(length(x) - 2),1], digits = 5),
NA)
# Take an average of those distances, they should all be identical anyway. Apply it to byx & byy.
byx <- mean(cells$bydist, na.rm = TRUE)
byx
# if users grids data are organised in COLUMNS rather than rows, they'll have long blocks of the same longitude
# the mean distance will be 0, and make.grid will fail when it calls seq(xlim[1], xlim[2], by = byx) and byx == 0
# in case of this, try latitude instead of longitude
if (byx == 0) {
bydist <- rep(NA, length(y))
cells <- data.frame(LONGITUDE = y, bydist = bydist, stringsAsFactors = FALSE)
cells[2:(length(y) - 1),"bydist"] <-
ifelse(round(cells[2:(length(y) - 1),1] - cells[1:(length(y) - 2),1], digits = 5) ==
round(cells[3:length(y),1] - cells[2:(length(y) - 1),1], digits = 5),
round(cells[2:(length(y) - 1),1] - cells[1:(length(y) - 2),1], digits = 5),
NA)
byx <- mean(cells$bydist, na.rm = TRUE)
}
y = grid_oct_slackhigh[, 3]
# if users grids data are organised in COLUMNS rather than rows, they'll have long blocks of the same longitude
# the mean distance will be 0, and make.grid will fail when it calls seq(xlim[1], xlim[2], by = byx) and byx == 0
# in case of this, try latitude instead of longitude
if (byx == 0) {
bydist <- rep(NA, length(y))
cells <- data.frame(LONGITUDE = y, bydist = bydist, stringsAsFactors = FALSE)
cells[2:(length(y) - 1),"bydist"] <-
ifelse(round(cells[2:(length(y) - 1),1] - cells[1:(length(y) - 2),1], digits = 5) ==
round(cells[3:length(y),1] - cells[2:(length(y) - 1),1], digits = 5),
round(cells[2:(length(y) - 1),1] - cells[1:(length(y) - 2),1], digits = 5),
NA)
byx <- mean(cells$bydist, na.rm = TRUE)
}
byx
byy <- byx
byy
# The grid and samples data are attached, I've been using n_fish as the resvar and everything from ssh through temperature as the expvars.
# Here's the actual gbm.auto code I've been using:
library(devtools)
install_github("SimonDedman/gbm.auto")
library(gbm.auto)
# usethis::use_tidy_description()
# usethis::use_package("shapefiles")
setwd("/home/simon/Documents/Si Work/PostDoc Work/Gbmauto help/Chuck Bangley/2021-12-14_x_must_be_numeric")
SBass_fall <- read.csv("/home/simon/Documents/Si Work/PostDoc Work/Gbmauto help/Chuck Bangley/2021-12-14_x_must_be_numeric/SBass_fall_samples.csv")
grid_oct_slackhigh <- read.csv("/home/simon/Documents/Si Work/PostDoc Work/Gbmauto help/Chuck Bangley/2021-12-14_x_must_be_numeric/Oct_sl_grid.csv")
gbm.auto(
grids = grid_oct_slackhigh,
samples = SBass_fall,
expvar = c(6, 7, 8, 9, 10, 11, 12, 13),
resvar = 14,
lr = c(0.01),
bf = c(0.6),
tc = c(2),
gridslat = 3,
gridslon = 4,
map = TRUE,
# shape = BaseMap,
gaus = FALSE,
varint = TRUE,
simp = FALSE,
max.trees = 10000,
# savedir = "~/Data/FORCE RAP/Modeling/R Code and Outputs/First Iteration/Striped Bass"
savedir = "/home/simon/Documents/Si Work/PostDoc Work/Gbmauto help/Chuck Bangley/2021-12-14_x_must_be_numeric"
)
library(gbm.auto)
setwd("/home/simon/Documents/Si Work/PostDoc Work/Gbmauto help/Chuck Bangley/2021-12-14_x_must_be_numeric")
SBass_fall <- read.csv("/home/simon/Documents/Si Work/PostDoc Work/Gbmauto help/Chuck Bangley/2021-12-14_x_must_be_numeric/SBass_fall_samples.csv")
grid_oct_slackhigh <- read.csv("/home/simon/Documents/Si Work/PostDoc Work/Gbmauto help/Chuck Bangley/2021-12-14_x_must_be_numeric/Oct_sl_grid.csv")
Basemap <- shapefiles::read.shapefile("./CroppedMap/Crop_Map.dbf")
Basemap <- shapefiles::read.shapefile("./CroppedMap/Crop_Map")
library(shapefiles)
Basemap <- shapefiles::read.shapefile("./CroppedMap/Crop_Map")
gbm.auto(
grids = grid_oct_slackhigh,
samples = SBass_fall,
expvar = c(6, 7, 8, 9, 10, 11, 12, 13),
resvar = 14,
lr = c(0.01),
bf = c(0.6),
tc = c(2),
gridslat = 3,
gridslon = 4,
map = TRUE,
shape = BaseMap, # switch off to download. Works fine now.
gaus = FALSE,
varint = TRUE,
simp = FALSE,
max.trees = 10000,
# savedir = "~/Data/FORCE RAP/Modeling/R Code and Outputs/First Iteration/Striped Bass"
savedir = "/home/simon/Documents/Si Work/PostDoc Work/Gbmauto help/Chuck Bangley/2021-12-14_x_must_be_numeric"
)
rm(Basemap)
BaseMap <- shapefiles::read.shapefile("./CroppedMap/Crop_Map")
gbm.auto(
grids = grid_oct_slackhigh,
samples = SBass_fall,
expvar = c(6, 7, 8, 9, 10, 11, 12, 13),
resvar = 14,
lr = c(0.01),
bf = c(0.6),
tc = c(2),
gridslat = 3,
gridslon = 4,
map = TRUE,
shape = BaseMap, # switch off to download. Works fine now.
gaus = FALSE,
varint = TRUE,
simp = FALSE,
max.trees = 10000,
# savedir = "~/Data/FORCE RAP/Modeling/R Code and Outputs/First Iteration/Striped Bass"
savedir = "/home/simon/Documents/Si Work/PostDoc Work/Gbmauto help/Chuck Bangley/2021-12-14_x_must_be_numeric"
)
library(devtools)
document()
library(devtools)
document()
library(devtools)
document()
library(devtools)
document()
library(devtools)
document()
library(devtools)
document()
