varint = F,
simp = F,
gaus = F)
source('~/Dropbox/Galway/Analysis/R/gbm.auto/R/gbm.auto.R')
gbm.auto(expvar = c(8:13),
resvar = 18,
grids = grids,
samples = sharks,
lr = list(c(0.01),0.0005),
gridslat = 4,
gridslon = 3,
shape = MappyMcMapface,
varint = FALSE,
simp = FALSE,
savegbm = F,
BnW = F)
traceback()
source('~/Dropbox/Galway/Analysis/R/gbm.auto/R/gbm.auto.R')
gbm.auto(expvar = c(8:13),
resvar = 18,
grids = grids,
samples = sharks,
lr = list(c(0.01),0.0005),
gridslat = 4,
gridslon = 3,
shape = MappyMcMapface,
varint = FALSE,
simp = FALSE,
savegbm = F,
BnW = F)
source('~/Dropbox/Galway/Analysis/R/gbm.auto/R/gbm.auto.R')
gbm.auto(expvar = c(8:13),
resvar = 18,
grids = grids,
samples = sharks,
lr = list(c(0.01),0.0005),
gridslat = 4,
gridslon = 3,
shape = MappyMcMapface,
varint = FALSE,
simp = FALSE,
savegbm = F,
BnW = F)
source('~/Dropbox/Galway/Analysis/R/gbm.auto/Gbm.auto_extras/gbm.auto_BINONLY.R')
source('~/Dropbox/Galway/Analysis/R/gbm.auto/Gbm.auto_extras/gbm.auto_BINONLY.R')
source('~/Dropbox/Galway/Analysis/R/gbm.auto/Gbm.auto_extras/gbm.auto_BINONLY.R')
source('/home/simon/Dropbox/Galway/Analysis/R/gbm.auto/R/gbm.utils.R')
source('/home/simon/Dropbox/Galway/Analysis/R/gbm.auto/R/gbm.map.R')
source('/home/simon/Dropbox/Galway/Analysis/R/gbm.auto/R/gbm.rsb.R')
#source('/home/simon/Dropbox/Galway/Analysis/R/gbm.auto/R/gbm.auto.R')
source('/home/simon/Dropbox/Galway/Analysis/R/gbm.auto/R/gbm.valuemap.R')
setwd("/home/simon/Dropbox/Galway/Project Sections/4b. Methods Paper BRT/Chuck's gbmauto attempts/")
sharks <- read.csv("PamlicoSoundSharks.csv")
grids <- read.csv("FallGrid.csv")
library("shapefiles")
MappyMcMapface <- read.shapefile("./CroppedMap/SummerMap")
gbm.auto(expvar = c(8:13),
resvar = 18,
grids = grids,
samples = sharks,
lr = list(c(0.01),0.0005),
gridslat = 4,
gridslon = 3,
shape = MappyMcMapface,
varint = FALSE,
simp = FALSE,
savegbm = F,
BnW = F)
source('~/Dropbox/Galway/Analysis/R/gbm.auto/Gbm.auto_extras/gbm.auto_BINONLY.R')
gbm.auto(expvar = c(8:13),
resvar = 18,
grids = grids,
samples = sharks,
lr = 0.01,
gridslat = 4,
gridslon = 3,
shape = MappyMcMapface,
RSB = F,
BnW = F,
map = F,
savegbm = F,
varint = F,
simp = F,
gaus = F)
library("devtools", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.3")
document()
install.packages("rgdal")
document()
install.packages("rgeos")
document()
install.packages("maptools")
document()
document()
document()
document()
document()
document()
source('~/Dropbox/Galway/Analysis/R/gbm.auto/R/gbm.auto.R')
source('~/Dropbox/Galway/Analysis/R/gbm.auto/R/gbm.loop.R')
mygrids <- gbm.auto::grids # load grids
mysamples <- gbm.auto::samples # load samples
setwd("/home/simon/Desktop/gbm temp/variance/")
source('~/Dropbox/Galway/Analysis/R/gbm.auto/R/gbm.utils.R')
library("shapefiles")
Crop_Map <- read.shapefile("/home/simon/Desktop/gbm temp/CroppedMap/Crop_Map")
source('~/Dropbox/Galway/Analysis/R/gbm.auto/R/gbm.loop.R')
gbmlooptest <- gbm.loop(loops = 10, # the number of loops required, integer
savecsv = T, # save the variances in simple & extended format
varmap = T, # create a map of the variance outputs?
grids = mygrids,         # explantory data to predict to. Import with (e.g.)
# read.csv and specify object name.
samples = mysamples,  # explanatory and response variables to predict from.
# Keep col names short, no odd characters, starting numerals or terminal periods
# Spaces may be converted to periods in directory names, underscores won't.
# Can be a subset
expvar = c(4:10),               # list of column numbers of explanatory variables in
# 'samples', expected e.g. c(1,35,67,etc.). No default
resvar = 11,               # column number of response variable (e.g. CPUE) in
# samples. Expected, e.g. 12. No default. Column name should be species name
tc = 2,            # permutations of tree complexity allowed, can be a
# vector with the largest sized number no larger than the number of
# explanatory variables e.g. c(2,7), or a list of 2 single numbers or vectors,
# the first to be passed to the binary BRT, the second to the Gaussian, e.g.
# tc = list(c(2,6), 2) or list(6, c(2,6))
lr = 0.01,   # permutations of learning rate allowed. Can be a
# vector or a list of 2 single numbers or vectors, the first to be passed to
# the binary BRT, the second to the Gaussian, e.g.
# lr = list(c(0.01,0.02),0.0001) or list(0.01,c(0.001, 0.0005))
bf = 0.5,             # permutations of bag fraction allowed, can be single
# number, vector or list, per tc and lr
ZI = "CHECK",         # are data zero-inflated? TRUE/FALSE/"CHECK".
# TRUE: delta BRT, log-normalised Gaus, reverse log-norm and bias corrected.
# FALSE: do Gaussian only, no log-normalisation.
# CHECK: Tests data for you. Default is TRUE.
simp = F,          # try simplfying best BRTs?
gridslat = 2,         # column number for latitude in 'grids'
gridslon = 1,         # column number for longitude in 'grids'
cols = grey.colors(1,1,1), # barplot colour vector. Assignment in order of
# explanatory variables. Default 1*white: white bars black borders. '1*' repeats
linesfiles = F,   # save individual line plots' data as csv's?
savegbm = F,       # save gbm objects and make available in environment after running? Open with load("Bin_Best_Model")
varint = F,        # calculate variable interactions? Default:TRUE, FALSE
# for error "contrasts can be applied only to factors with 2 or more levels"
map = F,           # save abundance map png files?
shape = Crop_Map,      # set coast shapefile, else downloaded and autogenerated
RSB = F,           # run Unrepresentativeness surface builder?
BnW = F,           # repeat maps in black and white e.g. for print journals
alerts = T,        # play sounds to mark progress steps
pngtype = "cairo-png"
) # filetype for png files, alternatively try "quartz"
library("gbm.auto")
gbmlooptest <- gbm.loop(loops = 10, # the number of loops required, integer
savecsv = T, # save the variances in simple & extended format
varmap = T, # create a map of the variance outputs?
grids = mygrids,         # explantory data to predict to. Import with (e.g.)
# read.csv and specify object name.
samples = mysamples,  # explanatory and response variables to predict from.
# Keep col names short, no odd characters, starting numerals or terminal periods
# Spaces may be converted to periods in directory names, underscores won't.
# Can be a subset
expvar = c(4:10),               # list of column numbers of explanatory variables in
# 'samples', expected e.g. c(1,35,67,etc.). No default
resvar = 11,               # column number of response variable (e.g. CPUE) in
# samples. Expected, e.g. 12. No default. Column name should be species name
tc = 2,            # permutations of tree complexity allowed, can be a
# vector with the largest sized number no larger than the number of
# explanatory variables e.g. c(2,7), or a list of 2 single numbers or vectors,
# the first to be passed to the binary BRT, the second to the Gaussian, e.g.
# tc = list(c(2,6), 2) or list(6, c(2,6))
lr = 0.01,   # permutations of learning rate allowed. Can be a
# vector or a list of 2 single numbers or vectors, the first to be passed to
# the binary BRT, the second to the Gaussian, e.g.
# lr = list(c(0.01,0.02),0.0001) or list(0.01,c(0.001, 0.0005))
bf = 0.5,             # permutations of bag fraction allowed, can be single
# number, vector or list, per tc and lr
ZI = "CHECK",         # are data zero-inflated? TRUE/FALSE/"CHECK".
# TRUE: delta BRT, log-normalised Gaus, reverse log-norm and bias corrected.
# FALSE: do Gaussian only, no log-normalisation.
# CHECK: Tests data for you. Default is TRUE.
simp = F,          # try simplfying best BRTs?
gridslat = 2,         # column number for latitude in 'grids'
gridslon = 1,         # column number for longitude in 'grids'
cols = grey.colors(1,1,1), # barplot colour vector. Assignment in order of
# explanatory variables. Default 1*white: white bars black borders. '1*' repeats
linesfiles = F,   # save individual line plots' data as csv's?
savegbm = F,       # save gbm objects and make available in environment after running? Open with load("Bin_Best_Model")
varint = F,        # calculate variable interactions? Default:TRUE, FALSE
# for error "contrasts can be applied only to factors with 2 or more levels"
map = F,           # save abundance map png files?
shape = Crop_Map,      # set coast shapefile, else downloaded and autogenerated
RSB = F,           # run Unrepresentativeness surface builder?
BnW = F,           # repeat maps in black and white e.g. for print journals
alerts = T,        # play sounds to mark progress steps
pngtype = "cairo-png"
) # filetype for png files, alternatively try "quartz"
install.packages(c("openssl", "R.oo", "R.utils"))
library("devtools", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.3")
install_github("SimonDedman/gbm.auto")
setwd("/home/simon/Desktop/gbm temp/variance/")
gbmlooptest <- gbm.loop(loops = 10, # the number of loops required, integer
savecsv = T, # save the variances in simple & extended format
varmap = T, # create a map of the variance outputs?
grids = mygrids,         # explantory data to predict to. Import with (e.g.)
# read.csv and specify object name.
samples = mysamples,  # explanatory and response variables to predict from.
# Keep col names short, no odd characters, starting numerals or terminal periods
# Spaces may be converted to periods in directory names, underscores won't.
# Can be a subset
expvar = c(4:10),               # list of column numbers of explanatory variables in
# 'samples', expected e.g. c(1,35,67,etc.). No default
resvar = 11,               # column number of response variable (e.g. CPUE) in
# samples. Expected, e.g. 12. No default. Column name should be species name
tc = 2,            # permutations of tree complexity allowed, can be a
# vector with the largest sized number no larger than the number of
# explanatory variables e.g. c(2,7), or a list of 2 single numbers or vectors,
# the first to be passed to the binary BRT, the second to the Gaussian, e.g.
# tc = list(c(2,6), 2) or list(6, c(2,6))
lr = 0.01,   # permutations of learning rate allowed. Can be a
# vector or a list of 2 single numbers or vectors, the first to be passed to
# the binary BRT, the second to the Gaussian, e.g.
# lr = list(c(0.01,0.02),0.0001) or list(0.01,c(0.001, 0.0005))
bf = 0.5,             # permutations of bag fraction allowed, can be single
# number, vector or list, per tc and lr
ZI = "CHECK",         # are data zero-inflated? TRUE/FALSE/"CHECK".
# TRUE: delta BRT, log-normalised Gaus, reverse log-norm and bias corrected.
# FALSE: do Gaussian only, no log-normalisation.
# CHECK: Tests data for you. Default is TRUE.
simp = F,          # try simplfying best BRTs?
gridslat = 2,         # column number for latitude in 'grids'
gridslon = 1,         # column number for longitude in 'grids'
cols = grey.colors(1,1,1), # barplot colour vector. Assignment in order of
# explanatory variables. Default 1*white: white bars black borders. '1*' repeats
linesfiles = F,   # save individual line plots' data as csv's?
savegbm = F,       # save gbm objects and make available in environment after running? Open with load("Bin_Best_Model")
varint = F,        # calculate variable interactions? Default:TRUE, FALSE
# for error "contrasts can be applied only to factors with 2 or more levels"
map = F,           # save abundance map png files?
shape = Crop_Map,      # set coast shapefile, else downloaded and autogenerated
RSB = F,           # run Unrepresentativeness surface builder?
BnW = F,           # repeat maps in black and white e.g. for print journals
alerts = T,        # play sounds to mark progress steps
pngtype = "cairo-png"
)
source('~/Dropbox/Galway/Analysis/R/gbm.auto/R/gbm.loop.R')
source('~/Dropbox/Galway/Analysis/R/gbm.auto/R/gbm.loop.R')
getwd()
setwd("./unlinktest")
getwd()
loops = 10
for (i in 1:loops) {
dir.create(paste("./", i, sep = ""))
}
cleanup = TRUE
for (i in 1:loops) {
dir.create(paste("./", i, sep = ""))
if (cleanup) unlink(i, recursive = T)
}
cleanup = FALSE
for (i in 1:loops) {
dir.create(paste("./", i, sep = ""))
if (cleanup) unlink(i, recursive = T)
}
source('~/Dropbox/Galway/Analysis/R/gbm.auto/R/gbm.loop.R')
source('~/Dropbox/Galway/Analysis/R/gbm.auto/R/gbm.loop.R')
install_github("SimonDedman/gbm.auto")
mygrids <- gbm.auto::grids # load grids
mysamples <- gbm.auto::samples # load samples
setwd("/home/simon/Desktop/gbm temp/variance/")
source('~/Dropbox/Galway/Analysis/R/gbm.auto/R/gbm.utils.R')
library("shapefiles")
Crop_Map <- read.shapefile("/home/simon/Desktop/gbm temp/CroppedMap/Crop_Map")
gbmlooptest <- gbm.loop(loops = 10, # the number of loops required, integer
savecsv = T, # save the variances in simple & extended format
varmap = T, # create a map of the variance outputs?
grids = mygrids,         # explantory data to predict to. Import with (e.g.)
# read.csv and specify object name.
samples = mysamples,  # explanatory and response variables to predict from.
# Keep col names short, no odd characters, starting numerals or terminal periods
# Spaces may be converted to periods in directory names, underscores won't.
# Can be a subset
expvar = c(4:10),               # list of column numbers of explanatory variables in
# 'samples', expected e.g. c(1,35,67,etc.). No default
resvar = 11,               # column number of response variable (e.g. CPUE) in
# samples. Expected, e.g. 12. No default. Column name should be species name
tc = 2,            # permutations of tree complexity allowed, can be a
# vector with the largest sized number no larger than the number of
# explanatory variables e.g. c(2,7), or a list of 2 single numbers or vectors,
# the first to be passed to the binary BRT, the second to the Gaussian, e.g.
# tc = list(c(2,6), 2) or list(6, c(2,6))
lr = 0.01,   # permutations of learning rate allowed. Can be a
# vector or a list of 2 single numbers or vectors, the first to be passed to
# the binary BRT, the second to the Gaussian, e.g.
# lr = list(c(0.01,0.02),0.0001) or list(0.01,c(0.001, 0.0005))
bf = 0.5,             # permutations of bag fraction allowed, can be single
# number, vector or list, per tc and lr
ZI = "CHECK",         # are data zero-inflated? TRUE/FALSE/"CHECK".
# TRUE: delta BRT, log-normalised Gaus, reverse log-norm and bias corrected.
# FALSE: do Gaussian only, no log-normalisation.
# CHECK: Tests data for you. Default is TRUE.
simp = F,          # try simplfying best BRTs?
gridslat = 2,         # column number for latitude in 'grids'
gridslon = 1,         # column number for longitude in 'grids'
cols = grey.colors(1,1,1), # barplot colour vector. Assignment in order of
# explanatory variables. Default 1*white: white bars black borders. '1*' repeats
linesfiles = F,   # save individual line plots' data as csv's?
savegbm = F,       # save gbm objects and make available in environment after running? Open with load("Bin_Best_Model")
varint = F,        # calculate variable interactions? Default:TRUE, FALSE
# for error "contrasts can be applied only to factors with 2 or more levels"
map = F,           # save abundance map png files?
shape = Crop_Map,      # set coast shapefile, else downloaded and autogenerated
RSB = F,           # run Unrepresentativeness surface builder?
BnW = F,           # repeat maps in black and white e.g. for print journals
alerts = T,        # play sounds to mark progress steps
pngtype = "cairo-png"
)
getwd()
setwd("/home/simon/Desktop/gbm temp/variance/")
gbmlooptest <- gbm.loop(loops = 10, # the number of loops required, integer
savecsv = T, # save the variances in simple & extended format
varmap = T, # create a map of the variance outputs?
measure = "CPUE", # map legend, variance of what? Default CPUE
cleanup = T, # remove gbm.auto-generated directory each loop?
grids = mygrids,         # explantory data to predict to. Import with (e.g.)
# read.csv and specify object name.
samples = mysamples,  # explanatory and response variables to predict from.
# Keep col names short, no odd characters, starting numerals or terminal periods
# Spaces may be converted to periods in directory names, underscores won't.
# Can be a subset
expvar = c(4:10),               # list of column numbers of explanatory variables in
# 'samples', expected e.g. c(1,35,67,etc.). No default
resvar = 11,               # column number of response variable (e.g. CPUE) in
# samples. Expected, e.g. 12. No default. Column name should be species name
tc = 2,            # permutations of tree complexity allowed, can be a
# vector with the largest sized number no larger than the number of
# explanatory variables e.g. c(2,7), or a list of 2 single numbers or vectors,
# the first to be passed to the binary BRT, the second to the Gaussian, e.g.
# tc = list(c(2,6), 2) or list(6, c(2,6))
lr = 0.01,   # permutations of learning rate allowed. Can be a
# vector or a list of 2 single numbers or vectors, the first to be passed to
# the binary BRT, the second to the Gaussian, e.g.
# lr = list(c(0.01,0.02),0.0001) or list(0.01,c(0.001, 0.0005))
bf = 0.5,             # permutations of bag fraction allowed, can be single
# number, vector or list, per tc and lr
ZI = "CHECK",         # are data zero-inflated? TRUE/FALSE/"CHECK".
# TRUE: delta BRT, log-normalised Gaus, reverse log-norm and bias corrected.
# FALSE: do Gaussian only, no log-normalisation.
# CHECK: Tests data for you. Default is TRUE.
simp = F,          # try simplfying best BRTs?
gridslat = 2,         # column number for latitude in 'grids'
gridslon = 1,         # column number for longitude in 'grids'
cols = grey.colors(1,1,1), # barplot colour vector. Assignment in order of
# explanatory variables. Default 1*white: white bars black borders. '1*' repeats
linesfiles = F,   # save individual line plots' data as csv's?
savegbm = F,       # save gbm objects and make available in environment after running? Open with load("Bin_Best_Model")
varint = F,        # calculate variable interactions? Default:TRUE, FALSE
# for error "contrasts can be applied only to factors with 2 or more levels"
map = F,           # save abundance map png files?
shape = Crop_Map,      # set coast shapefile, else downloaded and autogenerated
RSB = F,           # run Unrepresentativeness surface builder?
BnW = F,           # repeat maps in black and white e.g. for print journals
alerts = T,        # play sounds to mark progress steps
pngtype = "cairo-png"
)
beep(3)
beep(4)
beep(11)
source('~/Dropbox/Galway/Analysis/R/gbm.auto/R/gbm.loop.R')
document()
document()
library("devtools", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.3")
document()
source('~/Dropbox/Galway/Analysis/R/gbm.auto/R/gbm.loop.R')
library("devtools", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.3")
document()
library("gbm.auto")
mygrids <- gbm.auto::grids # load grids
mysamples <- gbm.auto::samples # load samples
setwd("/home/simon/Desktop/gbm temp/variance/")
library("shapefiles")
Crop_Map <- read.shapefile("/home/simon/Desktop/gbm temp/CroppedMap/Crop_Map")
gbmlooptest <- gbm.loop(loops = 10, # the number of loops required, integer
savecsv = T, # save the variances in simple & extended format
varmap = T, # create a map of the variance outputs?
measure = "CPUE", # map legend, variance of what? Default CPUE
cleanup = T, # remove gbm.auto-generated directory each loop?
grids = mygrids,         # explantory data to predict to. Import with (e.g.)
# read.csv and specify object name.
samples = mysamples,  # explanatory and response variables to predict from.
# Keep col names short, no odd characters, starting numerals or terminal periods
# Spaces may be converted to periods in directory names, underscores won't.
# Can be a subset
expvar = c(4:10),               # list of column numbers of explanatory variables in
# 'samples', expected e.g. c(1,35,67,etc.). No default
resvar = 11,               # column number of response variable (e.g. CPUE) in
# samples. Expected, e.g. 12. No default. Column name should be species name
tc = 2,            # permutations of tree complexity allowed, can be a
# vector with the largest sized number no larger than the number of
# explanatory variables e.g. c(2,7), or a list of 2 single numbers or vectors,
# the first to be passed to the binary BRT, the second to the Gaussian, e.g.
# tc = list(c(2,6), 2) or list(6, c(2,6))
lr = 0.01,   # permutations of learning rate allowed. Can be a
# vector or a list of 2 single numbers or vectors, the first to be passed to
# the binary BRT, the second to the Gaussian, e.g.
# lr = list(c(0.01,0.02),0.0001) or list(0.01,c(0.001, 0.0005))
bf = 0.5,             # permutations of bag fraction allowed, can be single
# number, vector or list, per tc and lr
ZI = "CHECK",         # are data zero-inflated? TRUE/FALSE/"CHECK".
# TRUE: delta BRT, log-normalised Gaus, reverse log-norm and bias corrected.
# FALSE: do Gaussian only, no log-normalisation.
# CHECK: Tests data for you. Default is TRUE.
simp = F,          # try simplfying best BRTs?
gridslat = 2,         # column number for latitude in 'grids'
gridslon = 1,         # column number for longitude in 'grids'
cols = grey.colors(1,1,1), # barplot colour vector. Assignment in order of
# explanatory variables. Default 1*white: white bars black borders. '1*' repeats
linesfiles = F,   # save individual line plots' data as csv's?
savegbm = F,       # save gbm objects and make available in environment after running? Open with load("Bin_Best_Model")
varint = F,        # calculate variable interactions? Default:TRUE, FALSE
# for error "contrasts can be applied only to factors with 2 or more levels"
map = F,           # save abundance map png files?
shape = Crop_Map,      # set coast shapefile, else downloaded and autogenerated
RSB = F,           # run Unrepresentativeness surface builder?
BnW = F,           # repeat maps in black and white e.g. for print journals
alerts = T,        # play sounds to mark progress steps
pngtype = "cairo-png"
)
source('~/Dropbox/Galway/Analysis/R/gbm.auto/R/gbm.loop.R')
source('~/Dropbox/Galway/Analysis/R/gbm.auto/R/gbm.loop.R')
source('~/Dropbox/Galway/Analysis/R/gbm.auto/R/gbm.loop.R')
source('~/Dropbox/Galway/Analysis/R/gbm.auto/R/gbm.loop.R')
document()
library("devtools", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.3")
document()
install_github("SimonDedman/gbm.auto")
library("gbm.auto")
mygrids <- gbm.auto::grids # load grids
mysamples <- gbm.auto::samples # load samples
setwd("/home/simon/Desktop/gbm temp/variance/")
# source('~/Dropbox/Galway/Analysis/R/gbm.auto/R/gbm.utils.R')
library("shapefiles")
Crop_Map <- read.shapefile("/home/simon/Desktop/gbm temp/CroppedMap/Crop_Map")
gbmlooptest <- gbm.loop(loops = 10, # the number of loops required, integer
savecsv = F, # save the variances in simple & extended format
varmap = T, # create a map of the variance outputs?
measure = "CPUE", # map legend, variance of what? Default CPUE
cleanup = T, # remove gbm.auto-generated directory each loop?
grids = mygrids,         # explantory data to predict to. Import with (e.g.)
# read.csv and specify object name.
samples = mysamples,  # explanatory and response variables to predict from.
# Keep col names short, no odd characters, starting numerals or terminal periods
# Spaces may be converted to periods in directory names, underscores won't.
# Can be a subset
expvar = c(4:10),               # list of column numbers of explanatory variables in
# 'samples', expected e.g. c(1,35,67,etc.). No default
resvar = 11,               # column number of response variable (e.g. CPUE) in
# samples. Expected, e.g. 12. No default. Column name should be species name
tc = 2,            # permutations of tree complexity allowed, can be a
# vector with the largest sized number no larger than the number of
# explanatory variables e.g. c(2,7), or a list of 2 single numbers or vectors,
# the first to be passed to the binary BRT, the second to the Gaussian, e.g.
# tc = list(c(2,6), 2) or list(6, c(2,6))
lr = 0.01,   # permutations of learning rate allowed. Can be a
# vector or a list of 2 single numbers or vectors, the first to be passed to
# the binary BRT, the second to the Gaussian, e.g.
# lr = list(c(0.01,0.02),0.0001) or list(0.01,c(0.001, 0.0005))
bf = 0.5,             # permutations of bag fraction allowed, can be single
# number, vector or list, per tc and lr
ZI = "CHECK",         # are data zero-inflated? TRUE/FALSE/"CHECK".
# TRUE: delta BRT, log-normalised Gaus, reverse log-norm and bias corrected.
# FALSE: do Gaussian only, no log-normalisation.
# CHECK: Tests data for you. Default is TRUE.
simp = F,          # try simplfying best BRTs?
gridslat = 2,         # column number for latitude in 'grids'
gridslon = 1,         # column number for longitude in 'grids'
cols = grey.colors(1,1,1), # barplot colour vector. Assignment in order of
# explanatory variables. Default 1*white: white bars black borders. '1*' repeats
linesfiles = F,   # save individual line plots' data as csv's?
savegbm = F,       # save gbm objects and make available in environment after running? Open with load("Bin_Best_Model")
varint = F,        # calculate variable interactions? Default:TRUE, FALSE
# for error "contrasts can be applied only to factors with 2 or more levels"
map = F,           # save abundance map png files?
shape = Crop_Map,      # set coast shapefile, else downloaded and autogenerated
RSB = F,           # run Unrepresentativeness surface builder?
BnW = F,           # repeat maps in black and white e.g. for print journals
alerts = T,        # play sounds to mark progress steps
pngtype = "cairo-png"
) # filetype for png files, alternatively try "quartz"
source('~/Dropbox/Galway/Analysis/R/gbm.auto/R/gbm.loop.R')
install.packages("shinydashboard")
library(shiny); runApp('R/gbm.webtool.R')
runApp('R/gbm.webtool.R')
runApp('R/gbm.webtool.R')
runApp('R/gbm.webtool.R')
textInput("Id", "Label")
runApp('R/gbm.webtool.R')
library("devtools", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.3")
document()
document()
library("devtools", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.3")
document()
document()
document()
install.packages("leaflet")
m <- leaflet() %>%
addTiles() %>%  # Add default OpenStreetMap map tiles
addMarkers(lng=174.768, lat=-36.852, popup="The birthplace of R")
m <- leaflet() #%>%
library(leaflet)
m <- leaflet() %>%
addTiles() %>%  # Add default OpenStreetMap map tiles
addMarkers(lng=174.768, lat=-36.852, popup="The birthplace of R")
m  # Print the map
