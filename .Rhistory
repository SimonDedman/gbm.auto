z = rsbdf_gaus[,"Unrepresentativeness"],
mapmain = "Unrepresentativeness: ",
mapback = "white",
species = names(samples[i]),
heatcolours = grey.colors(8, start = 1, end = 0),
landcol = grey.colors(1, start = 0.8, end = 0.8),
legendtitle = "UnRep 0-1",
shape = shape, #either autogenerated or set by user so never blank
breaks = exp01seq)
dev.off()
if (alerts) beep(2) # progress printer, right aligned for visibility
print(paste0("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX    B&W RSB Gaus map done    XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX"))
} # close gaus RSB
if (ZI & gaus) {
png(filename = paste0("./",names(samples[i]),"/RSB_Map_BnW_Both_",names(samples[i]),".png"),
width = 4*1920, height = 4*1920, units = "px", pointsize = 4*48, bg = "white", res = NA, family = "", type = pngtype)
par(mar = c(3.2,3,1.3,0), las = 1, mgp = c(2.1,0.5,0), xpd = FALSE)
gbm.map(x = grids[,gridslon],
y = grids[,gridslat],
z = rsbdf_bin[,"Unrepresentativeness"] + rsbdf_gaus[,"Unrepresentativeness"],
mapmain = "Unrepresentativeness: ",
mapback = "white",
species = names(samples[i]),
heatcolours = grey.colors(8, start = 1, end = 0),
landcol = grey.colors(1, start = 0.8, end = 0.8),
legendtitle = "UnRep 0-2",
shape = shape, #either autogenerated or set by user so never blank
breaks = exp01seq)
dev.off()
if (alerts) beep(2) # progress printer, right aligned for visibility
print(paste0("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX    B&W RSB combo map done   XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX"))
} # close gaus (&combo) B&W RSB
} # close BnW RSBs
} # close RSB mapper
} # close Map Maker
} #close !isnull grids option from above section 19
print(paste0("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX Grids/maps/everything done  XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX"))
} # close for i in resvar response variable loop
gc() # Force R to release memory it is no longer using
options(error = NULL) # reset error options to default
if (alerts) beep(8)  # final user notification, then close the function
}
setwd("/home/simon/Documents/Si Work/PostDoc Work/Gbmauto help/2021-09 Bonnie Ahr waveglider/Wave_Glider_Range_Test_Vr2c_Only_092721/")
## ************************  VR2C Modeling **********************************************************************************
## Load data into R
# dat <-  read.csv("Wave_Glider_Range_Testing_Analyses_092721.csv") # 3542 observations
## Data includes up to 1300 km
dat_vr2c <- read.csv("Wave_Glider_Range_Test_Vr2c_Only_092721.csv") # 1719 observations
## Cut down dataframe to only what we need
keep.vars <- dat_vr2c[, c(
"Detection", "Distancem", "Depth", "Deployment", "Temperature",
"WaveHeight", "WindSpeed", "CurrentSpeed", "VehicleSpeed", "SI", "SPL"
)]
names(keep.vars)
## How many observations have data?
check_1 <- keep.vars[keep.vars$Detection == 1, ] # 425 should be enough for analysis
## Changing deployment number to a factor
keep.vars$Deployment <- as.factor(keep.vars$Deployment)
## Checking what the minimum bag fraction needs to be
gbm.bfcheck(samples = keep.vars, resvar = 1, ZI = TRUE)
## Main model run for VR2C
## For bag fraction (bf) don't want lower than 0.4 or higher than 0.7 (per convo. w/ Chuck Bangley)
## Can look at multiple bfs in one line of code bf = c(0.6, 0.7)
## Note: turn off alerts if multiple small BRTs as it can cause R to crash
## expvar is the covariates in the model (column numbers)
## Make sure any covariates that are missing data have NA instead of NaN
## `grids' can be omitted if the objective is not to predict abundance at new sites
## Note* must indicate where to save outputs using savedir, otherwise it will go in R Temp folder (find using tempdir())
## Note* if doing multiple runs it will write over the last run unless you rename it in the folder
## If want a smoothing line on marginal effects plots then smooth = TRUE (default is F)
rm(StatsObjectsList)
setwd("/home/simon/Documents/Si Work/PostDoc Work/Gbmauto help/2021-09 Bonnie Ahr waveglider/Wave_Glider_Range_Test_Vr2c_Only_092721/")
gbm.auto(
samples = keep.vars,
expvar = c(2:11),
resvar = 1,
alerts = FALSE,
grids = NULL,
lr = c(0.05),
bf = c(0.5),
simp = F,
savedir = "/home/simon/Documents/Si Work/PostDoc Work/Gbmauto help/2021-09 Bonnie Ahr waveglider/Wave_Glider_Range_Test_Vr2c_Only_092721/Outputs/Vr2c Runs/",
savegbm = TRUE,
smooth = F,
gaus = FALSE,
ZI = TRUE,
# grids = NULL,
tc = c(2),
n.trees = 50,
fam1 = "bernoulli",
fam2 = "gaussian",
gridslat = 2,         # column number for latitude in 'grids'
gridslon = 1,         # column number for longitude in 'grids'
multiplot = F,     # create matrix plot of all line files? Default true
cols = grey.colors(1,1,1), # bar-plot colour vector. Assignment in order of
linesfiles = F,    # save individual line plots' data as CSVs?
loadgbm = NULL,       # relative or absolute location of folder containing
varint = F,        # calculate variable interactions? Default:TRUE, FALSE
map = F,           # save abundance map png files?
shape = NULL,         # set coast shapefile, else bounds calculated by gbm.map
RSB = F,           # run Unrepresentativeness surface builder?
BnW = F,           # repeat maps in black and white e.g. for print journals
pngtype = "cairo-png",
MLEvaluate = TRUE,    # do machine learning evaluation metrics & plots? Default TRUE
brv = NULL, # addresses devtools::check's no visible binding for global variable https://cran.r-project.org/web/packages/data.table/vignettes/datatable-importing.html#globals
grv = NULL, # addresses devtools::check's no visible binding for global variable https://cran.r-project.org/web/packages/data.table/vignettes/datatable-importing.html#globals
Bin_Preds = NULL, # addresses devtools::check's no visible binding for global variable https://cran.r-project.org/web/packages/data.table/vignettes/datatable-importing.html#globals
Gaus_Preds = NULL
)
# StatsObjectsList2 <- load("/home/simon/Documents/Si Work/PostDoc Work/Gbmauto help/2021-09 Bonnie Ahr waveglider/Wave_Glider_Range_Test_Vr2c_Only_092721/Outputs/Vr2c Runs/Detection/StatsObjectsList")
# saveRDS(object = StatsObjectsList, file = paste0("./", names(samples[i]), "/StatsObjectsList.Rds"))
StatsObjectsList <- readRDS(file = paste0("./", names(samples[i]), "/StatsObjectsList.Rds"))
StatsObjectsList <- readRDS(file = "/home/simon/Documents/Si Work/PostDoc Work/Gbmauto help/2021-09 Bonnie Ahr waveglider/Wave_Glider_Range_Test_Vr2c_Only_092721/Outputs/Vr2c Runs/Detection/StatsObjectsList.Rds")
# tmp <- unlist(StatsObjectsList)
# names(tmp)
StatsObjectsDf <- data.frame(StatsNames = names(unlist(StatsObjectsList)),
Values = unlist(StatsObjectsList),
row.names = NULL)
View(StatsObjectsDf)
tmp <- stringi::stri_split_fixed(str = StatsObjectsDf$StatsNames,
pattern = "_",
n = 2,
simplify = TRUE)
View(tmp)
tmp <- as.data.frame(stringi::stri_split_fixed(str = StatsObjectsDf$StatsNames,
pattern = "_",
n = 2,
simplify = TRUE))
View(tmp)
tmp <- as.data.frame(stringi::stri_split_fixed(str = StatsObjectsDf$StatsNames,
pattern = "__",
n = 2,
simplify = TRUE))
# tmp <- unlist(StatsObjectsList)
# names(tmp)
StatsObjectsDf <- data.frame(StatsNames = names(unlist(StatsObjectsList)),
Values = unlist(StatsObjectsList),
row.names = NULL)
StatsObjectsDf <- as.data.frame(stringi::stri_split_fixed(str = StatsObjectsDf$StatsNames,
pattern = "__",
n = 2,
simplify = TRUE))
colnames(StatsObjectsDf) <- c("Model", "Test_Statistic")
View(StatsObjectsList)
# tmp <- unlist(StatsObjectsList)
# names(tmp)
StatsObjectsDf <- data.frame(StatsNames = names(unlist(StatsObjectsList)),
Values = unlist(StatsObjectsList),
row.names = NULL)
StatsObjectsNames <- as.data.frame(stringi::stri_split_fixed(str = StatsObjectsDf$StatsNames,
pattern = "__",
n = 2,
simplify = TRUE))
View(StatsObjectsNames)
colnames(StatsObjectsNames) <- c("Model", "Test_Statistic")
tmp <- cbind(StatsObjectsNames, StatsObjectsDf[,"Values"])
View(tmp)
tmp <- data.frame(StatsObjectsNames, Values = StatsObjectsDf[,"Values"])
StatsObjects <- data.frame(StatsObjectsNames, Values = StatsObjectsDf[,"Values"])
View(StatsObjects)
loops = 10
1:loops
getwd()
setwd("/home/simon/Documents/Si Work/PostDoc Work/Gbmauto help/2021-09 Bonnie Ahr waveglider/Wave_Glider_Range_Test_Vr2c_Only_092721/tmp")
getwd()
loops = 10
for (i in 1:loops) { # loop through all gbm.autos
dir.create(paste0("./", i))
setwd(paste0("./", i))
write.csv(x = data.frame(x = 1:10, y = 1:10),
file = "Report.csv",
row.names = FALSE)
setwd("../") # move back up to root folder
}
getwd()
file.exists("./1/Report.csv")
file.exists("./11/Report.csv")
runloops <- data.frame(loop = 1:loops,
run = as.logical(rep(NA, loops)))
View(runloops)
# test for presence of report.csvs
for (i in 1:loops) { # loop through all gbm.autos
runloops[i, "run"] <- file.exists("./", i, "/Report.csv")
}
1:loops
i
runloops[i, "run"]
file.exists("./", i, "/Report.csv")
file.exists(paste0("./", i, "/Report.csv"))
# test for presence of report.csvs
for (i in 1:loops) { # loop through all gbm.autos
runloops[i, "run"] <- file.exists(paste0("./", i, "/Report.csv"))
}
View(runloops)
runloops <- data.frame(loop = 1:loops,
run = as.logical(rep(NA, loops)))
# test for presence of report.csvs
for (i in 1:loops) { # loop through all gbm.autos
runloops[i, "run"] <- file.exists(paste0("./", i, "/Report.csv"))
}
runloops[which(runloops$run == FALSE), "loop"]
runloops <- data.frame(loop = 1:loops,
run = as.logical(rep(NA, loops)))
# test for presence of report.csvs
for (i in 1:loops) { # loop through all gbm.autos
runloops[i, "run"] <- file.exists(paste0("./", i, "/Report.csv"))
}
# only want to keep the false ones
runloops[which(runloops$run == FALSE), "loop"]
1:loops
runloops[which(runloops$run == FALSE), "loop"]
library(devtools)
build()
library(devtools)
document()
build()
setwd("/home/simon/Documents/Si Work/PostDoc Work/Gbmauto help/2021-09 Bonnie Ahr waveglider/Wave_Glider_Range_Test_Vr2c_Only_092721/")
## Load package (install from CRAN if you have not done so)
library(devtools)
install_github("SimonDedman/gbm.auto")
library(gbm.auto)
sessionInfo() # just checks to make sure using the most recent version of gbm.auto
## ************************  VR2C Modeling **********************************************************************************
## Load data into R
# dat <-  read.csv("Wave_Glider_Range_Testing_Analyses_092721.csv") # 3542 observations
## Data includes up to 1300 km
dat_vr2c <- read.csv("Wave_Glider_Range_Test_Vr2c_Only_092721.csv") # 1719 observations
## Cut down dataframe to only what we need
keep.vars <- dat_vr2c[, c(
"Detection", "Distancem", "Depth", "Deployment", "Temperature",
"WaveHeight", "WindSpeed", "CurrentSpeed", "VehicleSpeed", "SI", "SPL"
)]
names(keep.vars)
## How many observations have data?
check_1 <- keep.vars[keep.vars$Detection == 1, ] # 425 should be enough for analysis
## Changing deployment number to a factor
keep.vars$Deployment <- as.factor(keep.vars$Deployment)
## Checking what the minimum bag fraction needs to be
gbm.bfcheck(samples = keep.vars, resvar = 1, ZI = TRUE)
setwd("/home/simon/Documents/Si Work/PostDoc Work/Gbmauto help/2021-09 Bonnie Ahr waveglider/Wave_Glider_Range_Test_Vr2c_Only_092721/")
gbm.auto(
samples = keep.vars,
expvar = c(2:11),
resvar = 1,
alerts = FALSE,
grids = NULL,
lr = c(0.01, 0.005),
bf = c(0.5, 0.7),
simp = TRUE,
savedir = "/home/simon/Documents/Si Work/PostDoc Work/Gbmauto help/2021-09 Bonnie Ahr waveglider/Wave_Glider_Range_Test_Vr2c_Only_092721/Outputs/Vr2c Runs/",
savegbm = TRUE,
smooth = TRUE,
gaus = FALSE,
ZI = TRUE
)
library(devtools)
document()
install.packages(c("ade4", "blob", "broom", "cachem", "car", "caret", "cli", "corrplot", "cpp11", "credentials", "data.table", "deldir", "desc", "diffobj", "digest", "dismo", "gargle", "gbm.auto", "gert", "ggplot2", "ggsignif", "googledrive", "googlesheets4", "haven", "hms", "ipred", "isoband", "jpeg", "knitr", "lava", "lifecycle", "lubridate", "matrixStats", "mime", "misc3d", "multicool", "mvtnorm", "openssl", "pbapply", "pillar", "pkgload", "plotrix", "pROC", "R6", "raster", "rcmdcheck", "RcppArmadillo", "readr", "recipes", "remotes", "reprex", "rgeos", "rmarkdown", "roxygen2", "RPostgreSQL", "RSQLite", "rvest", "s2", "sf", "stringi", "testthat", "tibble", "tidyr", "tinytex", "utf8", "waldo", "xfun"))
library(devtools)
document()
document()
build()
vignette('sdm','dismo')
library(devtools)
document()
traceback()
document()
build()
document()
build()
gbm.plot
source("~/Dropbox/Galway/Analysis/R/gbm.auto/R/gbm.auto.R")
response.matrix <- read.csv("/home/simon/Documents/Si Work/PostDoc Work/Gbmauto help/2021-09 Bonnie Ahr waveglider/Bin_Best_line_Distancem.csv")
j <- 1
predictors[[j]] <- response.matrix[, 1]
n.plots <- 1
predictors <- list(rep(NA, n.plots))
responses <- list(rep(NA, n.plots))
predictors[[j]] <- response.matrix[, 1]
# if (is.factor(data[, gbm.call$gbm.x[k]])) {
#   predictors[[j]] <- factor(predictors[[j]], levels = levels(data[,
#                                                                   gbm.call$gbm.x[k]]))
# }
responses[[j]] <- response.matrix[, 2] - mean(response.matrix[, 2])
if (j == 1) {
ymin = min(responses[[j]])
ymax = max(responses[[j]])
}
if (j == 1) {
ymin = min(responses[[j]])
ymax = max(responses[[j]])
} else {
ymin = min(ymin, min(responses[[j]]))
ymax = max(ymax, max(responses[[j]]))
}
op <- graphics::par(no.readonly = TRUE)
graphics::par(mfrow = plot.layout)
plot.layout = c(3, 4)
max.plots <- plot.layout[1] * plot.layout[2]
graphics::par(mfrow = plot.layout)
plot.count
plot.count <- 0
plot.count <- plot.count + 1
n.plots == 1
k <- match(pred.names[variable.no], gbm.object$contributions$var)
common.scale = TRUE
plot(predictors[[j]], responses[[j]], ylim = c(ymin, ymax), type = "l")
common.scale = FALSE
y.label = ""
x.label = NULL
show.contrib = TRUE
plot.layout = c(1, 1)
op <- graphics::par(no.readonly = TRUE)
graphics::par(mfrow = plot.layout)
plot(predictors[[j]], responses[[j]], ylim = c(ymin, ymax), type = "l")
plot(predictors[[j]], responses[[j]], type = "l")
seq(from = -2, to = 3.5, by = 0.5)
tmp <- seq(from = -2, to = 3.5, by = 0.5)
tmp <- tmp - mean(tmp)
tmp <- 1 / (1 + exp(-tmp))
tmp <- scale(tmp, scale = FALSE)
tmp
class(tmp)
tmp[,1]
round(tmp[,1], 2)
tmp <- seq(from = -1.9, to = 3.6, by = 0.1)
tmp <- tmp - mean(tmp)
tmp <- 1 / (1 + exp(-tmp))
tmp <- scale(tmp, scale = FALSE)
round(tmp[,1], 2)
exp(1:10)
exp(0:10)
exp(-1:10)
-1:10
exp(-1:10)
1 / (1 + exp(-1:10))
tmp <- seq(from = -2, to = 8, by = 1)
tmp
tmpx = 1:10
tmpy <- seq(from = -2, to = 8, by = 1)
tmpx = 1:11
tmpy <- tmpy  - mean(tmpy)
tmpy <- seq(from = -2, to = 8, by = 1)
tmpz <- tmpy  - mean(tmpy)
tmpy <- seq(from = -2, to = 8, by = 1)
tmpz <- tmpy  - mean(tmpy)
tmpa <- 1 / (1 + exp(tmpz))
tmpb <- scale(tmpa, center = TRUE, scale = FALSE)
plot(tmpx, tmpy)
plot(tmpx, tmpz)
tmpz
plot(tmpx, tmpa)
plot(tmpx, tmpb)
tmpb
# completely changes the scale and shape of the data!
centrelog <- function(x) {
x <- x  - mean(x)
x <- 1 / (1 + exp(x))
x <- scale(x, center = TRUE, scale = FALSE)
}
tmpx = 1:11
tmpy <- seq(from = -2, to = 8, by = 1)
tmpb <- centrelog(tmpy)
plot(tmpx, tmpy) # scale -2:8 linear
plot(tmpx, tmpb) # scale -0.4933071:0.4933071, falling S logistic
plot(tmpx, tmpy) # scale -2:8 linear
tmpy <- seq(from = 3.5, to = -2, by = -0.5)
tmpy
tmpb <- centrelog(tmpy)
plot(tmpx, tmpy) # scale -2:8 linear
tmpx = 1:(length(tmpy))
plot(tmpx, tmpy) # scale -2:8 linear
plot(tmpx, tmpb) # scale -0.4933071:0.4933071, falling S logistic
mean(tmpa)
plot(predictors[[j]], responses[[j]], type = "l")
temp.lo <- loess(responses[[j]] ~ predictors[[j]],
span = 0.3)
lines(predictors[[j]], fitted(temp.lo), lty = 2,
col = 2)
build()
document()
styler:::style_active_file()
library(devtools)
document()
build()
library(devtools)
document()
build()
library(devtools)
document()
build()
library(devtools)
document()
build()
library(devtools)
document()
build()
library(devtools)
document()
build()
library(devtools)
document()
build()
document()
build()
gbm.plot
library(dismo)
gbm.plot
styler:::style_active_file()
# The grid and samples data are attached, I've been using n_fish as the resvar and everything from ssh through temperature as the expvars.
# Here's the actual gbm.auto code I've been using:
SBass_fall <- read.csv("/home/simon/Documents/Si Work/PostDoc Work/Gbmauto help/Chuck Bangley/2021-12-14_x_must_be_numeric/SBass_fall_samples.csv")
grid_oct_slackhigh <- read.csv("/home/simon/Documents/Si Work/PostDoc Work/Gbmauto help/Chuck Bangley/2021-12-14_x_must_be_numeric/Oct_sl_grid.csv")
# The grid and samples data are attached, I've been using n_fish as the resvar and everything from ssh through temperature as the expvars.
# Here's the actual gbm.auto code I've been using:
library(gbm.auto)
gbm.auto(
grids = grid_oct_slackhigh,
samples = SBass_fall,
expvar = c(6, 7, 8, 9, 10, 11, 12, 13),
resvar = 14,
lr = c(0.01),
bf = c(0.6),
tc = c(2),
gridslat = 3,
gridslon = 4,
map = TRUE,
shape = BaseMap,
gaus = FALSE,
varint = TRUE,
simp = FALSE,
max.trees = 10000,
# savedir = "~/Data/FORCE RAP/Modeling/R Code and Outputs/First Iteration/Striped Bass"
savedir = "/home/simon/Documents/Si Work/PostDoc Work/Gbmauto help/Chuck Bangley/2021-12-14_x_must_be_numeric"
)
gbm.auto(
grids = grid_oct_slackhigh,
samples = SBass_fall,
expvar = c(6, 7, 8, 9, 10, 11, 12, 13),
resvar = 14,
lr = c(0.01),
bf = c(0.6),
tc = c(2),
gridslat = 3,
gridslon = 4,
map = TRUE,
# shape = BaseMap,
gaus = FALSE,
varint = TRUE,
simp = FALSE,
max.trees = 10000,
# savedir = "~/Data/FORCE RAP/Modeling/R Code and Outputs/First Iteration/Striped Bass"
savedir = "/home/simon/Documents/Si Work/PostDoc Work/Gbmauto help/Chuck Bangley/2021-12-14_x_must_be_numeric"
)
setwd("/home/simon/Documents/Si Work/PostDoc Work/Gbmauto help/Chuck Bangley/2021-12-14_x_must_be_numeric")
getwd()
setwd("/home/simon/Documents/Si Work/PostDoc Work/Gbmauto help/Chuck Bangley/2021-12-14_x_must_be_numeric")
gbm.auto(
grids = grid_oct_slackhigh,
samples = SBass_fall,
expvar = c(6, 7, 8, 9, 10, 11, 12, 13),
resvar = 14,
lr = c(0.01),
bf = c(0.6),
tc = c(2),
gridslat = 3,
gridslon = 4,
map = TRUE,
# shape = BaseMap,
gaus = FALSE,
varint = TRUE,
simp = FALSE,
max.trees = 10000,
# savedir = "~/Data/FORCE RAP/Modeling/R Code and Outputs/First Iteration/Striped Bass"
savedir = "/home/simon/Documents/Si Work/PostDoc Work/Gbmauto help/Chuck Bangley/2021-12-14_x_must_be_numeric"
)
# The grid and samples data are attached, I've been using n_fish as the resvar and everything from ssh through temperature as the expvars.
# Here's the actual gbm.auto code I've been using:
library(devtools)
install.github("SimonDedman/gbm.auto")
install_github("SimonDedman/gbm.auto")
library(gbm.auto)
setwd("/home/simon/Documents/Si Work/PostDoc Work/Gbmauto help/Chuck Bangley/2021-12-14_x_must_be_numeric")
SBass_fall <- read.csv("/home/simon/Documents/Si Work/PostDoc Work/Gbmauto help/Chuck Bangley/2021-12-14_x_must_be_numeric/SBass_fall_samples.csv")
grid_oct_slackhigh <- read.csv("/home/simon/Documents/Si Work/PostDoc Work/Gbmauto help/Chuck Bangley/2021-12-14_x_must_be_numeric/Oct_sl_grid.csv")
gbm.auto(
grids = grid_oct_slackhigh,
samples = SBass_fall,
expvar = c(6, 7, 8, 9, 10, 11, 12, 13),
resvar = 14,
lr = c(0.01),
bf = c(0.6),
tc = c(2),
gridslat = 3,
gridslon = 4,
map = TRUE,
# shape = BaseMap,
gaus = FALSE,
varint = TRUE,
simp = FALSE,
max.trees = 10000,
# savedir = "~/Data/FORCE RAP/Modeling/R Code and Outputs/First Iteration/Striped Bass"
savedir = "/home/simon/Documents/Si Work/PostDoc Work/Gbmauto help/Chuck Bangley/2021-12-14_x_must_be_numeric"
)
usethis::use_tidy_description()
getwd()
usethis::use_tidy_description()
usethis::use_package("shapefiles")
source("~/Dropbox/Galway/Analysis/R/gbm.auto/R/gbm.basemap.R")
library(devtools)
document()
build()
