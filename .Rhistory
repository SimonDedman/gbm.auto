if (RSB) { # if RSB called, plot that surface separately
linear01seq <- seq(from = 0, to = 1, length.out = 9) #linear sequence from 0:1, 9 bins
exp01seq <- expm1(4*linear01seq)/expm1(4) # exponentiate to change shape then scale back to 1
if (fam1 == "bernoulli" & (gaus == FALSE | (gaus == TRUE & ZI == TRUE))) {
png(filename = paste0("./",names(samples[i]),"/RSB_Map_Bin_",names(samples[i]),".png"),
width = 4*1920, height = 4*1920, units = "px", pointsize = 4*48, bg = "white", res = NA, family = "", type = pngtype)
par(mar = c(3.2,3,1.3,0), las = 1, mgp = c(2.1,0.5,0),xpd = FALSE)
gbm.map(x = grids[,gridslon],
y = grids[,gridslat],
z = rsbdf_bin[,"Unrepresentativeness"],
mapmain = "Unrepresentativeness: ",
species = names(samples[i]),
legendtitle = "UnRep 0-1",
shape = shape, #either autogenerated or set by user so never blank
# breaks = expm1(breaks.grid(log(2000), ncol = 8, zero = TRUE))/2000) #old failing breaks
breaks = exp01seq)
dev.off() #high value log breaks mean first ~5 values cluster near 0 for high
# res there, but high values captures in the last few bins.
if (alerts) beep(2) # progress printer, right aligned for visibility
print(paste0("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX  Colour RSB bin map done    XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX"))
} # close if zi bin
if (gaus) {
png(filename = paste0("./",names(samples[i]),"/RSB_Map_Gaus_",names(samples[i]),".png"),
width = 4*1920, height = 4*1920, units = "px", pointsize = 4*48, bg = "white", res = NA, family = "", type = pngtype)
par(mar = c(3.2,3,1.3,0), las = 1, mgp = c(2.1,0.5,0),xpd = FALSE)
gbm.map(x = grids[,gridslon],
y = grids[,gridslat],
z = rsbdf_gaus[,"Unrepresentativeness"],
mapmain = "Unrepresentativeness: ",
species = names(samples[i]),
legendtitle = "UnRep 0-1",
shape = shape, #either autogenerated or set by user so never blank
breaks = exp01seq)
dev.off()
if (alerts) beep(2) # progress printer, right aligned for visibility
print(paste0("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX Colour RSB Gaus map done    XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX"))
} # close gaus map
if (ZI & gaus) {
png(filename = paste0("./",names(samples[i]),"/RSB_Map_Both_",names(samples[i]),".png"),
width = 4*1920, height = 4*1920, units = "px", pointsize = 4*48, bg = "white", res = NA, family = "", type = pngtype)
par(mar = c(3.2,3,1.3,0), las = 1, mgp = c(2.1,0.5,0),xpd = FALSE)
gbm.map(x = grids[,gridslon],
y = grids[,gridslat],
z = rsbdf_bin[,"Unrepresentativeness"] + rsbdf_gaus[,"Unrepresentativeness"],
mapmain = "Unrepresentativeness: ",
species = names(samples[i]),
legendtitle = "UnRep 0-2",
shape = shape, #either autogenerated or set by user so never blank
breaks = exp01seq)
dev.off()
if (alerts) beep(2) # progress printer, right aligned for visibility
print(paste0("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX Colour RSB combo map done   XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX"))
} # close both map
if (BnW) {     # if BnW=TRUE, do again for b&w
if (fam1 == "bernoulli" & (gaus == FALSE | (gaus == TRUE & ZI == TRUE))) {
png(filename = paste0("./",names(samples[i]),"/RSB_Map_BnW_Bin_",names(samples[i]),".png"),
width = 4*1920, height = 4*1920, units = "px", pointsize = 4*48, bg = "white", res = NA, family = "", type = pngtype)
par(mar = c(3.2,3,1.3,0), las = 1, mgp = c(2.1,0.5,0),xpd = FALSE)
gbm.map(x = grids[,gridslon],
y = grids[,gridslat],
z = rsbdf_bin[,"Unrepresentativeness"],
mapmain = "Unrepresentativeness: ",
mapback = "white",
species = names(samples[i]),
heatcolours = grey.colors(8, start = 1, end = 0), #default 8 greys
####BUG:setting heatcolours & colournumber overrides this####
landcol = grey.colors(1, start = 0.8, end = 0.8), #light grey. 0=black 1=white
legendtitle = "UnRep 0-1",
shape = shape, #either autogenerated or set by user so never blank
breaks = exp01seq)
dev.off()
if (alerts) beep(2) # progress printer, right aligned for visibility
print(paste0("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX     B&W RSB bin map done    XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX"))
} # close bin RSB
if (gaus) {
png(filename = paste0("./",names(samples[i]),"/RSB_Map_BnW_Gaus_",names(samples[i]),".png"),
width = 4*1920, height = 4*1920, units = "px", pointsize = 4*48, bg = "white", res = NA, family = "", type = pngtype)
par(mar = c(3.2,3,1.3,0), las = 1, mgp = c(2.1,0.5,0),xpd = FALSE)
gbm.map(x = grids[,gridslon],
y = grids[,gridslat],
z = rsbdf_gaus[,"Unrepresentativeness"],
mapmain = "Unrepresentativeness: ",
mapback = "white",
species = names(samples[i]),
heatcolours = grey.colors(8, start = 1, end = 0),
landcol = grey.colors(1, start = 0.8, end = 0.8),
legendtitle = "UnRep 0-1",
shape = shape, #either autogenerated or set by user so never blank
breaks = exp01seq)
dev.off()
if (alerts) beep(2) # progress printer, right aligned for visibility
print(paste0("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX    B&W RSB Gaus map done    XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX"))
} # close gaus RSB
if (ZI & gaus) {
png(filename = paste0("./",names(samples[i]),"/RSB_Map_BnW_Both_",names(samples[i]),".png"),
width = 4*1920, height = 4*1920, units = "px", pointsize = 4*48, bg = "white", res = NA, family = "", type = pngtype)
par(mar = c(3.2,3,1.3,0), las = 1, mgp = c(2.1,0.5,0),xpd = FALSE)
gbm.map(x = grids[,gridslon],
y = grids[,gridslat],
z = rsbdf_bin[,"Unrepresentativeness"] + rsbdf_gaus[,"Unrepresentativeness"],
mapmain = "Unrepresentativeness: ",
mapback = "white",
species = names(samples[i]),
heatcolours = grey.colors(8, start = 1, end = 0),
landcol = grey.colors(1, start = 0.8, end = 0.8),
legendtitle = "UnRep 0-2",
shape = shape, #either autogenerated or set by user so never blank
breaks = exp01seq)
dev.off()
if (alerts) beep(2) # progress printer, right aligned for visibility
print(paste0("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX    B&W RSB combo map done   XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX"))
} # close gaus (&combo) B&W RSB
} # close BnW RSBs
} # close RSB mapper
} # close Map Maker
} #close !isnull grids option from above section 19
print(paste0("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX Grids/maps/everything done  XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX"))
} # close for i in resvar response variable loop
gc() # Force R to release memory it is no longer using
options(error = NULL) # reset error options to default
if (alerts) beep(8)  # final user notification, then close the function
}
gbm.auto(grids = grids, samples = samples, expvar = c(4:8, 10), resvar = 11,
tc = c(2,7), lr = c(0.005, 0.001), ZI = TRUE, savegbm = FALSE)
source('~/Dropbox/Galway/Analysis/R/gbm.auto/R/gbm.map.R')
source('~/Dropbox/Galway/Analysis/R/gbm.auto/R/gbm.rsb.R')
source('~/Dropbox/Galway/Analysis/R/gbm.auto/R/gbm.utils.R')
source('~/Dropbox/Galway/Analysis/R/gbm.auto/R/gbm.basemap.R')
gbm.auto(grids = grids, samples = samples, expvar = c(4:8, 10), resvar = 11,
tc = c(2,7), lr = c(0.005, 0.001), ZI = TRUE, savegbm = FALSE)
traceback()
options(error = browser())
gbm.auto(grids = grids, samples = samples, expvar = c(4:8, 10), resvar = 11,
tc = c(2,7), lr = c(0.005, 0.001), ZI = TRUE, savegbm = FALSE)
gbm.auto(grids = grids, samples = samples, expvar = c(4:8, 10), resvar = 11,
tc = c(2,7), lr = c(0.005, 0.001), ZI = TRUE, savegbm = FALSE)
library(gbm.auto)
data(grids)
data(samples)
setwd("/home/simon/Desktop")
dir.create("gbmauto")
setwd("gbmauto")
gbm.auto(grids = grids, samples = samples, expvar = c(4:8, 10), resvar = 11,
tc = c(2,7), lr = c(0.005, 0.001), ZI = TRUE, savegbm = FALSE)
library(devtools)
install_github("SimonDedman/gbm.auto")
library(gbm.auto)
setwd("/home/simon/Desktop/gbmauto")
data(grids)
data(samples)
gbm.auto(grids = grids,
samples = samples,
expvar = c(4:8, 10),
resvar = 11,
tc = c(7),
lr = c(0.005),
ZI = TRUE,
savegbm = FALSE)
Gaus_Preds
View(grids)
gbm.predict.grids(get(Gaus_Best_Model), grids,
want.grids = F, sp.name = "Gaus_Preds")
rm(Gaus_Preds)
gbm.predict.grids(get(Gaus_Best_Model), grids,
want.grids = F, sp.name = "Gaus_Preds")
source('~/Dropbox/Galway/Analysis/R/gbm.auto/R/gbm.utils.R')
gbm.predict.grids(model = get(Gaus_Best_Model),new.dat = grids,want.grids = F,sp.name = "Gaus_Preds")
get(Gaus_Best_Model)
debugSource('~/Dropbox/Galway/Analysis/R/gbm.auto/R/gbm.auto.R')
source('~/Dropbox/Galway/Analysis/R/gbm.auto/R/gbm.utils.R')
install_github("SimonDedman/gbm.auto")
library(gbm.auto)
data(grids)
data(samples)
setwd("/home/simon/Desktop/gbmauto/")
gbm.auto(grids = grids,
samples = samples,
expvar = c(4:8, 10),
resvar = 11,
tc = c(7),
lr = c(0.005),
ZI = TRUE,
savegbm = FALSE)
Gaus_Preds
gbm.predict.grids(get(Gaus_Best_Model), grids, want.grids = F, sp.name = "Gaus_Preds")
View(plotgrid)
debugSource('~/Dropbox/Galway/Analysis/R/gbm.auto/R/gbm.auto.R')
install_github("SimonDedman/gbm.auto")
library(gbm.auto)
data(grids)
data(samples)
setwd("/home/simon/Desktop/gbmauto/")
gbm.auto(grids = grids,
samples = samples,
expvar = c(4:8, 10),
resvar = 11,
tc = c(7),
lr = c(0.005),
ZI = TRUE,
savegbm = FALSE)
debugSource('~/Dropbox/Galway/Analysis/R/gbm.auto/R/gbm.auto.R')
library(gbm.auto)
data(grids)
data(samples)
setwd("/home/simon/Desktop/gbmauto/")
install_github("SimonDedman/gbm.auto")
library(devtools)
install_github("SimonDedman/gbm.auto")
library(gbm.auto)
data(grids)
data(samples)
setwd("/home/simon/Desktop/gbmauto/")
gbm.auto
library(shapefiles)
coast <- read.shapefile("/home/simon/Desktop/gbmauto/CroppedMap/Crop_Map")
gbm.auto(grids = grids,
samples = samples,
expvar = c(4:8, 10),
resvar = 11,
tc = c(7),
lr = c(0.005),
ZI = TRUE,
savegbm = FALSE,
multiplot = F,
linesfiles = F,
varint = F,
shape = coast)
gbm.predict.grids(get(Gaus_Best_Model), grids,
want.grids = F, sp.name = "Gaus_Preds")
tmp <- 1
getwd()
gbm.auto(grids = grids,
samples = samples,
expvar = c(4:8, 10),
resvar = 11,
tc = c(7),
lr = c(0.005),
ZI = TRUE,
savegbm = FALSE,
multiplot = F,
linesfiles = F,
varint = F,
shape = coast)
tmp<-1
gbm.predict.grids(get(Gaus_Best_Model), grids,
want.grids = F, sp.name = "Gaus_Preds")
gbm.predict.grids <- function(model, new.dat, want.grids = F, preds2R = T, sp.name = "preds", pred.vec = NULL, filepath = NULL,
num.col = NULL, num.row = NULL, xll = NULL, yll = NULL, cell.size = NULL, no.data = NULL, plot = F,
full.grid = T, part.number = NULL, part.row = NULL, header = T)
{
# J.Elith / J.Leathwick, March 07
# to make predictions to sites or grids. If to sites, the predictions are written to the R workspace. If to grid,
# the grids are written to a nominated directory and optionally also plotted in R
#
# new data (new.dat) must be a data frame with column names identical to names for all variables in the model used for prediction.
# pred.vec is a vector of -9999's, the length of the scanned full grid (i.e. without nodata values excluded).
# filepath must specify the whole path as a character vector,but without the final file name - eg "c:/gbm/"
temp <- predict.gbm(model, new.dat, n.trees = model$gbm.call$best.trees, type = "response")
if (want.grids) {
newname <- paste0(filepath, sp.name,".asc")
full.pred <- pred.vec
full.pred[as.numeric(row.names(new.dat))] <- temp
if (header) {
write(paste0("ncols          ",num.col),newname)
write(paste0("nrows          ",num.row),newname,append = T)
write(paste0("xllcorner      ",xll),newname,append = T)
write(paste0("yllcorner      ",yll),newname,append = T)
write(paste0("cellsize       ",cell.size),newname,append = T)
write(paste0("NODATA_value ",no.data),newname,append = T)
}
if (full.grid) {
full.pred.mat <- matrix(full.pred, nrow = num.row, ncol = num.col, byrow = T)
if (plot) {image(z = t(full.pred.mat)[, nrow(full.pred.mat):1], zlim =  c(0,1), col = rev(topo.colors(12)))}
write.table(full.pred.mat, newname, sep = " ", append = T, row.names = F, col.names = F)
#also write to R directory, if required:
if (preds2R) {assign(sp.name, temp, pos = 1)}
} else {
full.pred.mat <- matrix(full.pred, nrow = part.row, ncol = num.col, byrow = T)
write.table(full.pred.mat, newname, sep = " ", append = T, row.names = F, col.names = F)
if (preds2R) {assign(paste0(sp.name, part.number), temp, pos = 1)}
}
} else {
assign(sp.name, temp, pos = 1)
}
gbm.predict.grids(get(Gaus_Best_Model), grids,
want.grids = F, sp.name = "Gaus_Preds")
Gaus_Preds <- gbm.predict.grids(model = get(Gaus_Best_Model),
new.dat = grids,
want.grids = F,
sp.name = "Gaus_Preds")
Gaus_Preds
grids$Gaus_Preds <- Gaus_Preds
exp(Gaus_Preds + 1/2 * sd(get(Gaus_Best_Model)$residuals, na.rm = FALSE) ^ 2)
grids$Gaus_Preds_Unlog <- exp(Gaus_Preds + 1/2 * sd(get(Gaus_Best_Model)$residuals, na.rm = FALSE) ^ 2)
grids$PredAbund <- grids$Gaus_Preds_Unlog * grids$Bin_Preds
Bin_Preds
source('~/Dropbox/Galway/Analysis/R/gbm.auto/R/gbm.auto.R')
library(devtools)
install_github("SimonDedman/gbm.auto")
library(gbm.auto)
data(grids)
data(samples)
setwd("/home/simon/Desktop/gbmauto/")
library(shapefiles)
coast <- read.shapefile("/home/simon/Desktop/gbmauto/CroppedMap/Crop_Map")
gbm.auto(grids = grids,
samples = samples,
expvar = c(4:8, 10),
resvar = 11,
tc = c(7),
lr = c(0.005),
ZI = TRUE,
savegbm = FALSE,
multiplot = F,
linesfiles = F,
varint = F,
shape = coast)
gbm.auto(grids = grids,
samples = samples,
expvar = c(4:8, 10),
resvar = 11,
tc = c(7),
lr = c(0.005),
ZI = TRUE,
savegbm = FALSE,
multiplot = F,
linesfiles = F,
varint = F,
shape = coast)
library(devtools)
install_github("SimonDedman/gbm.auto")
library(gbm.auto)
gbm.auto
install_github("SimonDedman/gbm.auto", force = T)
library(gbm.auto)
gbm.auto
library(gbm.auto)
gbm.auto
data(grids)
data(samples)
setwd("/home/simon/Desktop/gbmauto/")
library(shapefiles)
coast <- read.shapefile("/home/simon/Desktop/gbmauto/CroppedMap/Crop_Map")
gbm.auto(grids = grids,
samples = samples,
expvar = c(4:8, 10),
resvar = 11,
tc = c(7),
lr = c(0.005),
ZI = TRUE,
savegbm = FALSE,
multiplot = F,
linesfiles = F,
varint = F,
shape = coast)
source('~/Dropbox/Galway/Analysis/R/gbm.auto/R/gbm.auto.R')
library(devtools)
install_github("SimonDedman/gbm.auto", force = T)
library(gbm.auto)
data(grids)
data(samples)
setwd("/home/simon/Desktop/gbmauto/")
library(shapefiles)
coast <- read.shapefile("/home/simon/Desktop/gbmauto/CroppedMap/Crop_Map")
gbm.auto(grids = grids,
samples = samples,
expvar = c(4:8, 10),
resvar = 11,
tc = c(7),
lr = c(0.005),
ZI = TRUE,
savegbm = FALSE,
multiplot = F,
linesfiles = F,
varint = F,
shape = coast)
source('~/Dropbox/Galway/Analysis/R/gbm.auto/R/gbm.auto.R')
check()
library(devtools)
check()
library(gbm.auto)
library(devtools)
check()
library(devtools)
check()
as.numeric(TRUE)
as.numeric(FALSE)
citatio(dismo)
citation(dismo)
citation("dismo")
citation("gbm")
source('~/Dropbox/Galway/Analysis/R/gbm.auto/R/gbm.basemap.R')
data(grids)
data(samples)
expvar = c(4:8, 10)
resvar = 11
tc = c(2,7)
lr = c(0.005, 0.001)
ZI = TRUE
savegbm = FALSE
shape = NULL
bounds = c(range(grids[,gridslon]),range(grids[,gridslat]))
gridslat = 2
gridslon = 1
bounds = c(range(grids[,gridslon]),range(grids[,gridslat]))
#create standard bounds from data, and extra bounds for map aesthetic
xmid <- mean(bounds[1:2])
ymid <- mean(bounds[3:4])
xextramax <- ((bounds[2] - xmid) * 1.6) + xmid
xextramin <- xmid - ((xmid - bounds[1]) * 1.6)
yextramax <- ((bounds[4] - ymid) * 1.6) + ymid
yextramin <- ymid - ((ymid - bounds[3]) * 1.6)
extrabounds <- c(xextramin, xextramax, yextramin, yextramax)
bounds = extrabounds
getwd()
setwd("/home/simon/Desktop/gbmauto/")
#   require(rgeos) # subfunctions for rgdal & others
# if (!require(raster)) install.packages("raster")
#   require(raster) # for crop
# if (!require(maptools)) install.packages("maptools")
#   require(maptools) # for WriteSpatialShape
# if (!require(shapefiles)) install.packages("shapefiles")
#   require(shapefiles) # for read.shapefile
# if (!require(sf)) install.packages("sf")
#   require(sf) # for everything after sf/st update, can remove the rest?
###improve these: check if installed, install if not else library####
startdir <- getwd() # record original directory
is.null(bounds)
xmin = bounds[1] #for sf/st upgrade
xmax = bounds[2]
ymin = bounds[3]
ymax = bounds[4]
res
res = "CALC"
zipvers = "2.3.7"
savename = "Crop_Map.shp"
if (res == 1) res <- "c" # If res provided as number convert to letter
if (res == 2) res <- "l"
if (res == 3) res <- "i"
if (res == 4) res <- "h"
if (res == 5) res <- "f"
if (res == "CALC") { # Calculate res based on size of bounds
scope <- max((bounds[2] - bounds[1]), (bounds[4] - bounds[3])) # distance of largest dimension, x or y
if (scope >= 160) res <- "c" # bigger diff = larger map = lower res
if (160 > scope & scope >= 70) res <- "l"
if (70 > scope & scope >= 29) res <- "i"
if (29 > scope & scope >= 9) res <- "h"
if (9 > scope) res <- "f"}
getzip
getzip = TRUE
ifelse(getzip == TRUE, {# download & unzip GSHGG if getzip = TRUE
download.file(paste0("https://www.ngdc.noaa.gov/mgg/shorelines/data/gshhg/latest/gshhg-shp-", zipvers, ".zip"), "GSHHG.zip")
unzip("GSHHG.zip")
setwd("./GSHHS_shp")}
, setwd(getzip)) # else just setwd to there
setwd(paste("./", res, sep = "")) #setwd to res subfolder
if (extrabounds) { # grow bounds extents if requested
#bounds = c(range(grids[,gridslon]),range(grids[,gridslat]))
xmid <- mean(bounds[1:2])
ymid <- mean(bounds[3:4])
xmax <- ((bounds[2] - xmid) * 1.6) + xmid #updated for sf/st
xmin <- xmid - ((xmid - bounds[1]) * 1.6)
ymax <- ((bounds[4] - ymid) * 1.6) + ymid
ymin <- ymid - ((ymid - bounds[3]) * 1.6)
#bounds <- c(xmin, xmax, ymin, ymax)
}
extrabounds
source('~/Dropbox/Galway/Analysis/R/gbm.auto/R/gbm.basemap.R')
source('~/Dropbox/Galway/Analysis/R/gbm.auto/R/gbm.auto.R')
extrabounds = TRUE
if (extrabounds) { # grow bounds extents if requested
xmid <- mean(bounds[1:2])
ymid <- mean(bounds[3:4])
xmax <- ((bounds[2] - xmid) * 1.6) + xmid #updated for sf/st
xmin <- xmid - ((xmid - bounds[1]) * 1.6)
ymax <- ((bounds[4] - ymid) * 1.6) + ymid
ymin <- ymid - ((ymid - bounds[3]) * 1.6)
}
world1 <- read_sf(dsn = paste0("GSHHS_", res, "_L1.shp"), layer = paste0("GSHHS_", res, "_L1")) # read in worldmap
world2 <- st_read(dsn = paste0("GSHHS_", res, "_L1.shp"), layer = paste0("GSHHS_", res, "_L1"), quiet = TRUE) # read in worldmap
library(sf::st_read())
library(sf::st_read
)
library(sf)
world2 <- st_read(dsn = paste0("GSHHS_", res, "_L1.shp"), layer = paste0("GSHHS_", res, "_L1"), quiet = TRUE) # read in worldmap
class(world1)
class(world2)
source('~/Dropbox/Galway/Analysis/R/gbm.auto/R/gbm.basemap.R')
library(devtools)
install_github("SimonDedman/gbm.auto", force = T)
check()
source('~/Dropbox/Galway/Analysis/R/gbm.auto/R/gbm.auto.R')
library(gbm.auto)
data(samples)
gbm.bfcheck(samples = samples, resvar = "Cuckoo", ZI = F)
gbm.bfcheck(samples = samples, resvar = "Cuckoo")
data(grids)
png(...)
gbm.map(x = grids[,"Longitude"], y = grids[,"Latitude"], z = grids[,"Effort"])
library(gbm.auto)
setwd("/home/simon/Desktop/gbmauto/")
4*1920
4*48
png(filename = "tmp.png", width = 7680, height = 7680, units = "px",
pointsize = 192, bg = "white", res = NA, family = "", type = "cairo-png")
par(mar = c(3.2,3,1.3,0), las = 1, mgp = c(2.1,0.5,0), xpd = FALSE)
gbm.map(x = grids[,"Longitude"], y = grids[,"Latitude"], z = grids[,"Effort"], species = "Effort")
source('~/Dropbox/Galway/Analysis/R/gbm.auto/R/gbm.basemap.R')
source('~/Dropbox/Galway/Analysis/R/gbm.auto/R/gbm.map.R')
install_github("SimonDedman/gbm.auto")
source('~/Dropbox/Galway/Analysis/R/gbm.auto/R/gbm.map.R')
source('~/Dropbox/Galway/Analysis/R/gbm.auto/R/gbm.rsb.R')
