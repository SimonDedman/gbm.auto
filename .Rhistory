"SubGrainMM",
"DST_km",
"SalSurf",
"SalBot",
#"TempSurf", #redundant
#"TempBot",
"USurf",
"UBot",
"VSurf",
"VBot",
"WSurf",
"WBot",
"SSH")
"POSdatetimeZ",
setwd("SpatialData")
gridswinter <- read.csv("gridswinter2.csv") #read in grids files
gridsspring <- read.csv("gridsspring2.csv")
gridssummer <- read.csv("gridssummer2.csv")
gridsautumn <- read.csv("gridsautumn2.csv")
#gmbauto runs####
# expvars %in% colnames(gridswinter) #precheck expvars in grids
# remember which resvars & gbm run types I'm doing
#singlesex, bin+gaus else bin, 4 seasons.
resvars <- colnames(sharks)[17:62]
library("shapefiles")
mobilebay <- read.shapefile("../Gbm_auto_runs/PredictRuns/autumn/CroppedMap/Crop_Map")
setwd("/home/simon/tmp")
gbm.auto(expvar = expvars,
resvar = "M.smoothhound.sharks", #n=24
samples = sharks,
grids = gridswinter,
shape = mobilebay,
lr = 0.001,
bf = 0.5,
gaus = T,
savegbm = FALSE,
BnW = FALSE,
simp = F)
getwd)()
getwd()
dev.off()
dev.off()
gbm.auto(expvar = expvars,
resvar = "M.smoothhound.sharks", #n=24
samples = sharks,
grids = gridswinter,
shape = mobilebay,
lr = 0.001,
bf = 0.5,
gaus = T,
savegbm = FALSE,
BnW = FALSE,
simp = F)
dev.cur()
dev.list()
dev.list()
graphic.off()
graphics.off()
dev.list()
dev.cur()
install_github("SimonDedman/gbm.auto") # update gbm.auto to latest
library(gbm.auto)
setwd("/home/simon/tmp")
gbm.auto(expvar = expvars,
resvar = "M.smoothhound.sharks", #n=24
samples = sharks,
grids = gridswinter,
shape = mobilebay,
lr = 0.001,
bf = 0.5,
gaus = T,
savegbm = FALSE,
BnW = FALSE,
simp = F)
dev.cur()
dev.list()
getwd()
library(devtools)
install_github("SimonDedman/gbm.auto") # update gbm.auto to latest
library(gbm.auto)
setwd("/home/simon/Dropbox/PostDoc Work/Drymon Froeschke transect BRT")
sharks <- read.csv("SharksIncExtra&HYCOM&QGis.csv")
expvars <- c("Daylength", #need to calculate for grids DONE
"Surface.Temperature", #use these or NOAA ones? These. Histograms are similar and better to use the real data.
"Bottom.Temperature",
# hist(sharks$Surface.Temperature)
# hist(sharks$TempSurf)
"Bottom.DO",
"Longitude",
"Start.Set.Depth",
"SubGrainMM",
"DST_km",
"SalSurf",
"SalBot",
#"TempSurf", #redundant
#"TempBot",
"USurf",
"UBot",
"VSurf",
"VBot",
"WSurf",
"WBot",
"SSH")
"POSdatetimeZ",
setwd("SpatialData")
gridswinter <- read.csv("gridswinter2.csv") #read in grids files
gridsspring <- read.csv("gridsspring2.csv")
gridssummer <- read.csv("gridssummer2.csv")
gridsautumn <- read.csv("gridsautumn2.csv")
#gmbauto runs####
# expvars %in% colnames(gridswinter) #precheck expvars in grids
# remember which resvars & gbm run types I'm doing
#singlesex, bin+gaus else bin, 4 seasons.
resvars <- colnames(sharks)[17:62]
library("shapefiles")
mobilebay <- read.shapefile("../Gbm_auto_runs/PredictRuns/autumn/CroppedMap/Crop_Map")
setwd("/home/simon/tmp")
gbm.auto
gbm.auto(expvar = expvars,
resvar = "M.smoothhound.sharks", #n=24
samples = sharks,
grids = gridswinter,
shape = mobilebay,
lr = 0.001,
bf = 0.5,
gaus = T,
savegbm = FALSE,
BnW = FALSE,
simp = F)
getwd()
dev.cur()
dev.list()
setwd("/home/simon/Dropbox/PostDoc Work/Bimini BRUVs/Outputs/Crustaceans/")
load("Bin_Best_Model")
Bin_Best_Model <- load("Bin_Best_Model")
Bin_Best_Model <- load("Bin_Best_Model")
load("Bin_Best_Model")
Bin_Best_Model <- Bin_Best_Model_Object
get(Bin_Best_Model)
load("Bin_Best_Model")
Bin_Best_Model <- "Bin_Best_Model_Object"
Bin_Best_Model_Object
get(Bin_Best_Model)
setwd("/home")
load("/home/simon/Dropbox/PostDoc Work/Bimini BRUVs/Outputs/Crustaceans/Bin_Best_Model")
load(paste0("/home/simon/Dropbox/PostDoc Work/Bimini BRUVs/Outputs/Crustaceans/","Bin_Best_Model"))
setwd("/home/simon/Dropbox/PostDoc Work/Bimini BRUVs/Outputs/Crustaceans/")
getwd()
setwd("/.")
getwd()
setwd("/home/simon/Dropbox/PostDoc Work/Bimini BRUVs/Outputs/Crustaceans/")
getwd()
setwd("./")
getwd()
loadgbm <- "./"
load(paste0(loadgbm,"Bin_Best_Model"))
install.packages("moveHMM")
install.packages(c("dplyr", "evaluate", "flexmix", "forcats", "haven", "modelr", "R.utils", "R6", "readxl", "rgdal", "sys", "xfun"))
library(moveHMM)
machine <- "C:/Users"# windows laptop
landings <- read.csv(paste0(machine, '/simon/Dropbox/Farallon Institute/Paper Writing/Anchovy Spatial Management Paper/CDFW landings by blocks/AllSpecies.csv'),na.strings = "")
# annual landings by species
# anchovy
# filter by anchovy
anchovy <- landings[landings$SpeciesName == "Northern Anchovy",]
# sardine
sardine <- landings[landings$SpeciesName == "Pacific Sardine",]
# market squid
squid <- landings[landings$SpeciesName == "Market Squid",]
# make list for loops
species<- c(anchovy, sardine, squid)
anchovy2 <- filter(landings, SpeciesName == "Northern Anchovy")
anchovy2 <- filter(landings, landings$SpeciesName == "Northern Anchovy")
library(dbplyr)
library(reshape2)
machine <- "C:/Users"# windows laptop
landings <- read.csv(paste0(machine, '/simon/Dropbox/Farallon Institute/Paper Writing/Anchovy Spatial Management Paper/CDFW landings by blocks/AllSpecies.csv'),na.strings = "")
machine <- "C:/Users"# windows laptop
landings <- read.csv(paste0(machine, '/simon/Dropbox/Farallon Institute/Paper Writing/Anchovy Spatial Management Paper/CDFW landings by blocks/AllSpecies.csv'),na.strings = "")
summarised <- group_by(landings, SpeciesName, Year)
library(dplyr)
summarised <- group_by(landings, SpeciesName, Year)
View(landings)
View(summarised)
landings2 <- as.tbl(landings)
summarised2 <- group_by(landings2, SpeciesName, Year)
View(summarised2)
basic_summ <- summarise(summarised2,
Annual_Total_Mt = sum(Mt))
View(basic_summ)
landings <- tbl(paste0(machine, '/simon/Dropbox/Farallon Institute/Paper Writing/Anchovy Spatial Management Paper/CDFW landings by blocks/AllSpecies.csv'),na.strings = "")
landings <- tbl(src = paste0(machine, '/simon/Dropbox/Farallon Institute/Paper Writing/Anchovy Spatial Management Paper/CDFW landings by blocks/AllSpecies.csv'),na.strings = "")
class(landings)
class(landings2)
landings <- tbl(src = paste0(machine, '/simon/Dropbox/Farallon Institute/Paper Writing/Anchovy Spatial Management Paper/CDFW landings by blocks/AllSpecies.csv'),na.strings = "")
machine <- "C:/Users"# windows laptop
library(dplyr)
landings <- read.csv(paste0(machine, '/simon/Dropbox/Farallon Institute/Paper Writing/Anchovy Spatial Management Paper/CDFW landings by blocks/AllSpecies.csv'),na.strings = "")
landings <- as.tbl(landings)
# annual landings by species####
landing_summ <- group_by(landings, SpeciesName, Year)
l_summ_rept <- summarise(landing_summ,
Annual_Total_Mt = sum(Mt))
View(l_summ_rept)
View(l_summ_rept)
annual_anchovy <- l_summ_rept[l_summ_rept$SpeciesName == "Northern ANchovy",]
annual_anchovy <- l_summ_rept[l_summ_rept$SpeciesName == "Northern Anchovy",]
View(annual_anchovy)
View(annual_anchovy)
plot(annual_anchovy$Year, annual_anchovy$Annual_Total_Mt)
plot(annual_anchovy$Year, annual_anchovy$Annual_Total_Mt,type = "b")
annual_sardine <- l_summ_rept[l_summ_rept$SpeciesName == "Pacific Sardine",]
annual_squid <- l_summ_rept[l_summ_rept$SpeciesName == "Market Squid",]
plot(annual_sardine$Year, annual_sardine$Annual_Total_Mt,type = "b")
plot(annual_squid$Year, annual_squid$Annual_Total_Mt,type = "b")
plot(annual_squid$Year, annual_squid$Annual_Total_Mt,type = "b")
# monthly landings by species####
landing_summ_mo <- group_by(landings, SpeciesName, Month)
l_summ_rept_mo <- summarise(landing_summ_mo,
Monthly_Total_Mt = sum(Mt))
monthly_anchovy <- l_summ_rept_mo[l_summ_rept_mo$SpeciesName == "Northern Anchovy",]
monthly_sardine <- l_summ_rept_mo[l_summ_rept_mo$SpeciesName == "Pacific Sardine",]
monthly_squid <- l_summ_rept_mo[l_summ_rept_mo$SpeciesName == "Market Squid",]
plot(monthly_anchovy$Year, monthly_anchovy$Annual_Total_Mt,type = "b")
View(monthly_anchovy)
View(monthly_sardine)
View(monthly_squid)
plot(monthly_anchovy$Year, monthly_anchovy$Monthly_Total_Mt,type = "b")
plot(monthly_anchovy$Month, monthly_anchovy$Monthly_Total_Mt,type = "b")
plot(monthly_sardine$Month, monthly_sardine$Monthly_Total_Mt,type = "b")
plot(monthly_squid$Month, monthly_squid$Monthly_Total_Mt,type = "b")
View(landing_summ)
View(l_summ_rept)
# pivot etc in R
# spatial join for maps: pivot to blockID then attach column to caltrawl.dbf or copy thereof
#
blockid <- read.csv(paste0(machine, '/simon/Dropbox/Farallon Institute/Paper Writing/Anchovy Spatial Management Paper/CDFW landings by blocks/BlockIDcompare.csv'),na.strings = "")
blockid$CDFWBlockID %in% blockid$BLOCK10_ID
which(blockid$CDFWBlockID %in% blockid$BLOCK10_ID)
which(!blockid$CDFWBlockID %in% blockid$BLOCK10_ID)
!blockid$CDFWBlockID %in% blockid$BLOCK10_ID
# which from list1 are NOT in list 2?
# element in parenthesis lists true false, reversed to false true
# which then gives numerical index position of trues (ie absent)
Landed_in_missing_block <- which(!blockid$CDFWBlockID %in% blockid$BLOCK10_ID)
blockid[,1]
blockid[Landed_in_missing_block,1]
blockid[Landed_in_missing_block,2]
Missing_blocks <- blockid[Landed_in_missing_block,2]
Missing_blocks <- na.omit(Missing_blocks)
Missing_blocks
Missing_blocks
Missing_blocks
Missing_blocks <- blockid[Landed_in_missing_block,2]
Missing_blocks
Missing_blocks <- na.omit(Missing_blocks)
Missing_blocks
Missing_blocks[1]
Missing_blocks[[1]]
Missing_blocks <- blockid[Landed_in_missing_block,2]
Missing_blocks[!is.na(Missing_blocks)]
Missing_blocks <- Missing_blocks[!is.na(Missing_blocks)]
# could count entries for each block & make a bar plot
badblocks <- landings[landings$CDFWBlockID = Missing_blocks,]
# could count entries for each block & make a bar plot
badblocks <- landings[landings$CDFWBlockID == Missing_blocks,]
# could count entries for each block & make a bar plot
badblocks <- landings[landings$CDFWBlockID == 500,]
View(badblocks)
# could count entries for each block & make a bar plot
badblocks <- landings[landings$CDFWBlockID == c(500, 501),]
View(badblocks)
c(500, 501)
Missing_blocks
# could count entries for each block & make a bar plot
badblocks <- landings[landings$CDFWBlockID == Missing_blocks,]
View(l_summ_rept)
# Annual totals per species per block: to do. (3)
landing_summ_blk <- group_by(landings, CDWFBlockID, SpeciesName)
# Annual totals per species per block: to do. (3)
landing_summ_blk <- group_by(landings, CDFWBlockID, SpeciesName)
l_summ_blk_rept <- summarise(landing_summ_blk,
Annual_Total_Mt = sum(Mt))
View(l_summ_blk_rept)
# Totals per species per block, april may june july only: to do. (3)
spring <- landings[landings$Month == 4:7,]
# Totals per species per block, april may june july only: to do. (3)
spring <- landings[landings$Month == c(4,5,6,7),]
# Totals per species per block, april may june july only: to do. (3)
spring <- landings[landings$Month = c(4,5,6,7),]
# Totals per species per block, april may june july only: to do. (3)
spring <- subset(landings, Month > 4 & Month < 7)
View(badblocks)
badblocks2 <- landings[CDFWBlockID %inrange% Missing_blocks]
install.packages("data.table")
library(data.table)
badblocks2 <- landings[CDFWBlockID %inrange% Missing_blocks]
spring_summ_blk <- group_by(spring, CDFWBlockID, SpeciesName)
spr_summ_blk_rept <- summarise(spring_summ_blk,
Annual_Total_Mt = sum(Mt))
View(l_summ_blk_rept)
# Totals per species per block, jan-may only, sard & anch only: to do. (2)
bpel <- subset(landings, Month > 1 & Month < 5)
bpel_summ_blk <- group_by(bpel, CDFWBlockID, SpeciesName)
bpel_summ_blk_rept <- summarise(bpel_summ_blk,
Annual_Total_Mt = sum(Mt))
View(blockid)
# need to append l_summ_blk_rept$Annual_Total_Mt as columns to caltrawl.dbf by species, named
# need to match block indices
blockid$BLOCK10_ID
View(l_summ_blk_rept)
caltrawl <- merge(blockid, l_summ_blk_rept,
by.x = BLOCK10_ID, by.y = CDFWBlockID,
all = F, sort = F)
caltrawl <- merge(blockid, l_summ_blk_rept,
by.x = "BLOCK10_ID", by.y = "CDFWBlockID",
all = F, sort = F)
View(caltrawl)
# need to append l_summ_blk_rept$Annual_Total_Mt as columns to caltrawl.dbf by species, named
# need to match block indices
l_summ_blk_rept_a <- subset(l_summ_blk_rept, SpeciesName == "Northern Anchovy")
View(l_summ_blk_rept_a)
l_summ_blk_rept_s <- subset(l_summ_blk_rept, SpeciesName == "Pacific Sardine")
l_summ_blk_rept_m <- subset(l_summ_blk_rept, SpeciesName == "Market Squid")
spr_summ_blk_rept_a <- subset(spr_summ_blk_rept, SpeciesName == "Northern Anchovy")
spr_summ_blk_rept_s <- subset(spr_summ_blk_rept, SpeciesName == "Pacific Sardine")
spr_summ_blk_rept_m <- subset(spr_summ_blk_rept, SpeciesName == "Market Squid")
bpel_summ_blk_rept_a <- subset(bpel_summ_blk_rept, SpeciesName == "Northern Anchovy")
bpel_summ_blk_rept_s <- subset(bpel_summ_blk_rept, SpeciesName == "Pacific Sardine")
caltrawl <- merge(blockid,
l_summ_blk_rept_a,
by.x = "BLOCK10_ID",
by.y = "CDFWBlockID",
all = F, sort = F)
View(caltrawl)
View(l_summ_blk_rept_a)
caltrawl <- merge(blockid[,1],
l_summ_blk_rept_a,
by.x = "BLOCK10_ID",
by.y = "CDFWBlockID",
all = F, sort = F)
View(caltrawl)
View(blockid)
caltrawl <- blockid[,1]
caltrawl <- within(blockid, rm(CDFWBlockID))
View(caltrawl)
caltrawl2 <- merge(blockid,
l_summ_blk_rept_a,
by.x = "BLOCK10_ID",
by.y = "CDFWBlockID",
all = F, sort = F)
View(caltrawl2)
View(caltrawl)
View(caltrawl2)
blockid <- within(blockid, rm(CDFWBlockID)) # remove a column. Can have multiple items in rm separated by commas
caltrawl <- merge(blockid,
l_summ_blk_rept_a,
by.x = "BLOCK10_ID",
by.y = "CDFWBlockID",
all = F, sort = F)
View(caltrawl)
# Find which elements of one list are missing from another
blockid <- read.csv(paste0(machine, '/simon/Dropbox/Farallon Institute/Paper Writing/Anchovy Spatial Management Paper/CDFW landings by blocks/BlockIDcompare.csv'),na.strings = "")
View(blockid)
caltrawl <- merge(blockid,
l_summ_blk_rept_a,
by.x = "BLOCK10_ID",
by.y = "CDFWBlockID",
all = F, sort = F)
View(caltrawl)
caltrawl <- merge(blockid,
l_summ_blk_rept_a,
by.x = "BLOCK10_ID",
by.y = "CDFWBlockID",
all = T, sort = F)
View(caltrawl)
View(blockid)
View(l_summ_blk_rept_a)
caltrawl2 <- merge(blockid[, "BLOCK10_ID"],
l_summ_blk_rept_a[, "Annual_Total_mt"],
by.x = "BLOCK10_ID",
by.y = "CDFWBlockID",
all = T, sort = F)
caltrawl2 <- merge(blockid[, "BLOCK10_ID"],
l_summ_blk_rept_a[, "Annual_Total_Mt"],
by.x = "BLOCK10_ID",
by.y = "CDFWBlockID",
all = T, sort = F)
caltrawl3 = merge(blockid[, "BLOCK10_ID"],
l_summ_blk_rept_a[, "Annual_Total_Mt"])
View(caltrawl3)
caltrawl3 = merge(blockid[, "BLOCK10_ID"],
l_summ_blk_rept_a[, "Annual_Total_Mt"],
all = T, sort = F)
blockid2 <- within(blockid, rm(CDFWBlockID)) # remove a column. Can have multiple items in rm separated by commas
View(blockid2)
colnames(blockid2)
colnames(blockid2) <- "CDFWBlockID"
colnames(blockid2)
caltrawl3 = merge(blockid2[, "CDFWBlockID"],
l_summ_blk_rept_a[,c("CDFWBlockID", "Annual_Total_Mt")])
caltrawl3 = merge(blockid2[, "CDFWBlockID"],
l_summ_blk_rept_a[,c("CDFWBlockID", "Annual_Total_Mt")],
all = T, sort = F)
caltrawl3 = merge(blockid2[, "CDFWBlockID"],
l_summ_blk_rept_a[,c("CDFWBlockID", "Annual_Total_Mt")],
by = "CDFWBlockID",
all = T, sort = F)
caltrawl3 = merge(blockid2[, "CDFWBlockID"],
l_summ_blk_rept_a[,c("CDFWBlockID", "Annual_Total_Mt")],
by = "CDFWBlockID",
all.x = T, sort = F)
caltrawl2 <- merge(blockid[, "BLOCK10_ID"],
l_summ_blk_rept_a[, "Annual_Total_Mt"],
by.x = "BLOCK10_ID",
by.y = "CDFWBlockID",
all.x = T, sort = F)
caltrawl3 = merge(blockid2[, "CDFWBlockID"],
l_summ_blk_rept_a[,c("CDFWBlockID", "Annual_Total_Mt")],
by.x = "CDFWBlockID",
by.y = "CDFWBlockID",
all.x = T, sort = F)
caltrawl3 = merge(blockid2,
l_summ_blk_rept_a,
by = "CDFWBlockID")
caltrawl3 = merge(blockid2,
l_summ_blk_rept_a,
by = "CDFWBlockID",
all.x = T)
View(caltrawl3)
caltrawl = merge(blockid2,
l_summ_blk_rept_a,
by = "CDFWBlockID",
all.x = T)
caltrawl2 <- within(caltrawl, rm(SpeciesName))
View(caltrawl2)
colnames(caltrawl)[2]
caltrawl <- within(caltrawl, rm(SpeciesName))
colnames(caltrawl)[2]
colnames(caltrawl)[2] <- "Anchovy"
View(caltrawl)
colnames(caltrawl)
colnames(caltrawl)["Anchovy"] <- "Anchovy2"
colnames(caltrawl)[which(colnames(caltrawl) == "Anchovy")] <- "Anchovy2"
View(caltrawl)
colnames(caltrawl)[which(colnames(caltrawl) == "Anchovy2")] <- "Anchovy"
# SHOULD DO THIS IN A LOOP BUT I'M IN A RUSH
caltrawl = merge(caltrawl,
l_summ_blk_rept_s,
by = "CDFWBlockID",
all.x = T)
View(caltrawl)
caltrawl <- within(caltrawl, rm(SpeciesName))
View(caltrawl)
colnames(caltrawl)[which(colnames(caltrawl) == "Annual_Total_Mt")] <- "Sardine"
View(caltrawl)
caltrawl = merge(caltrawl,
l_summ_blk_rept_m,
by = "CDFWBlockID",
all.x = T)
caltrawl <- within(caltrawl, rm(SpeciesName))
colnames(caltrawl)[which(colnames(caltrawl) == "Annual_Total_Mt")] <- "Squid"
caltrawl = merge(caltrawl,
spr_summ_blk_rept_a,
by = "CDFWBlockID",
all.x = T)
caltrawl <- within(caltrawl, rm(SpeciesName))
colnames(caltrawl)[which(colnames(caltrawl) == "Annual_Total_Mt")] <- "Anchovy_Spring"
caltrawl = merge(caltrawl,
spr_summ_blk_rept_s,
by = "CDFWBlockID",
all.x = T)
caltrawl <- within(caltrawl, rm(SpeciesName))
colnames(caltrawl)[which(colnames(caltrawl) == "Annual_Total_Mt")] <- "Sardine_Spring"
caltrawl = merge(caltrawl,
spr_summ_blk_rept_m,
by = "CDFWBlockID",
all.x = T)
caltrawl <- within(caltrawl, rm(SpeciesName))
colnames(caltrawl)[which(colnames(caltrawl) == "Annual_Total_Mt")] <- "Squid_Spring"
caltrawl = merge(caltrawl,
bpel_summ_blk_rept_a,
by = "CDFWBlockID",
all.x = T)
caltrawl <- within(caltrawl, rm(SpeciesName))
colnames(caltrawl)[which(colnames(caltrawl) == "Annual_Total_Mt")] <- "Anchovy_BPel"
caltrawl = merge(caltrawl,
bpel_summ_blk_rept_s,
by = "CDFWBlockID",
all.x = T)
caltrawl <- within(caltrawl, rm(SpeciesName))
colnames(caltrawl)[which(colnames(caltrawl) == "Annual_Total_Mt")] <- "Sardine_BPel"
View(caltrawl)
write.csv(x = caltrawl,file = paste0(machine, '/simon/Dropbox/Farallon Institute/Paper Writing/Anchovy Spatial Management Paper/CDFW landings by blocks/caltrawl_landings_dbf.csv'),na.strings = "")
write.csv(x = caltrawl,file = paste0(machine, '/simon/Dropbox/Farallon Institute/Paper Writing/Anchovy Spatial Management Paper/CDFW landings by blocks/caltrawl_landings_dbf.csv'))
library(devtools)
document()
check()
load("/home/simon/Dropbox/Galway/Analysis/R/gbm.auto/Data/Adult_Females.RData")
install.packages(c("dbplyr", "digest", "e1071", "evaluate", "knitr", "openssl", "pillar", "plotdap", "rmarkdown", "stringdist", "tibble", "zoo"))
document()
library(devtools)
document()
check_failures()
load('Data/Adult_Females.RData')
build()
check_built()
check_built("gbm.auto")
check()
usethis::create_package()
usethis::create_package(".")
usethis::create_package("gbm.auto")
