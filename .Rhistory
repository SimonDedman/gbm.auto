"Correlation coefficient",
e@cor[[1]])
MLEval[6,] <- c("cor",
"p-value for correlation coefficient",
e@pcor)
# Steph Brodie's TSS which produces the same result as Allouche
# -1 just makes the output range is 0:1 instead of 1:2 I think.
# If so this means Sensitivity is e@TPR[which.max(e@TPR + e@TNR)], which doesn't include
# (e@TPR + e@FNR) but it's a vector of 1s so is redundant. Same for Specificity
MLEval[7,] <- c("TSS",
"True Skill Statistic",
max(e@TPR + e@TNR - 1))
# sensitivity: TP/(TP+FN)
MLEval[8,] <- c("Sensitivity",
"Sensitivity",
e@TPR[which.max(e@TPR + e@TNR)])
# specificity: TN/(FP+TN)
Specificity <- e@TNR[which.max(e@TPR + e@TNR)]
MLEval[9,] <- c("Specificity",
"Specificity",
Specificity)
# Accuracy: TP+TN / TP+TN+FP+FN true false positive negative.
# TP+TN is just TSS + 1, TP+TN+FP+FN #Sums to 2, redundant
MLEval[10,] <- c("Accuracy",
"Accuracy",
(e@TPR[which.max(e@TPR + e@TNR)] + e@TNR[which.max(e@TPR + e@TNR)]) / 2)
# Precision: TP/TP+FP. Ignores true negatives. “X% of the predictions are right”
Precision <- e@TPR[which.max(e@TPR + e@TNR)] / (e@TPR[which.max(e@TPR + e@TNR)] + e@FPR[which.max(e@TPR + e@TNR)])
MLEval[11,] <- c("Precision",
"X% of the predictions are right",
Precision)
# Recall: TP/TP+FN: “Y% of actually existing things are captured”.
Recall <- e@TPR[which.max(e@TPR + e@TNR)] / (e@TPR[which.max(e@TPR + e@TNR)] + e@FNR[which.max(e@TPR + e@TNR)])
MLEval[12,] <- c("Recall",
"Y% of actually existing things are captured",
Recall)
# https://www.corvil.com/kb/what-is-a-false-positive-rate
# Allouche et al 2006:
# overall accuracy: (TP+TN)/n
# this seems like a weird metric since the numerator is 0:2 or 1:2 and the divisor could be tiny or huge
MLEval[13,] <- c("OverallAccuracy",
"Overall Accuracy",
(e@TPR[which.max(e@TPR + e@TNR)] + e@TNR[which.max(e@TPR + e@TNR)])/nrow(samples))
# Balanced Accuracy, (Recall + Specificity) / 2
MLEval[14,] <- c("BalancedAccuracy",
"Balanced Accuracy",
(Recall + Specificity) / 2)
# Number of samples. Useful to include in the list
MLEval[15,] <- c("nSamples",
"Number of samples",
nrow(samples))
# Balance: precision vs recall curve. Workhorses.
# PxR/P+R = F score (P+R = harmonic mean).
# F1 score: P & R are equally rated. This is the most common one. F1 score importance depends on the project.
MLEval[16,] <- c("F1score",
"P & R equally rated, score importance depends on project",
2 * ((Precision * Recall) / (Precision + Recall)))
# F2 score: weighted average of Precision & Recall
MLEval[17,] <- c("F2score",
"weighted average of P & R",
5 * ((Precision * Recall) / (4 * Precision + Recall)))
# Threshold which produces the best combo of TPR & TNR
# t: vector of thresholds used to compute confusion matrices
MLEval[18,] <- c("Threshold",
"Threshold which produced best combo of TPR & TNR",
e@t[which.max(e@TPR + e@TNR)])
# e@prevalence: Prevalence
MLEval[19,] <- c("Prevalence",
"Prevalence",
e@prevalence[which.max(e@TPR + e@TNR)])
# e@ODP: Overall diagnostic power
MLEval[20,] <- c("ODP",
"Overall diagnostic power",
e@ODP[which.max(e@TPR + e@TNR)])
# e@CCR: Correct classification rate
MLEval[21,] <- c("CCR",
"Correct classification rate",
e@CCR[which.max(e@TPR + e@TNR)])
# e@TPR: True positive rate
MLEval[22,] <- c("TPR",
"True positive rate",
e@TPR[which.max(e@TPR + e@TNR)])
# e@TNR: True negative rate
MLEval[23,] <- c("TNR",
"True negative rate",
e@TNR[which.max(e@TPR + e@TNR)])
# e@FPR: False positive rate
MLEval[24,] <- c("FPR",
"False positive rate",
e@FPR[which.max(e@TPR + e@TNR)])
# e@FNR: False negative rate
MLEval[25,] <- c("FNR",
"False negative rate",
e@FNR[which.max(e@TPR + e@TNR)])
# e@PPP: Positive predictive power
MLEval[26,] <- c("PPP",
"Positive predictive power",
e@PPP[which.max(e@TPR + e@TNR)])
# e@NPP: Negative predictive power
MLEval[27,] <- c("NPP",
"Negative predictive power",
e@NPP[which.max(e@TPR + e@TNR)])
# e@MCR: Misclassification rate
MLEval[28,] <- c("MCR",
"Misclassification rate",
e@MCR[which.max(e@TPR + e@TNR)])
# e@OR: Odds-ratio
MLEval[29,] <- c("OR",
"Odds-ratio",
e@OR[which.max(e@TPR + e@TNR)])
# e@kappa: Cohen's kappa
MLEval[30,] <- c("kappa",
"Cohen's kappa",
e@kappa[which.max(e@TPR + e@TNR)])
# dev from calc.deviance from dismo
MLEval[31,] <- c("dev",
"deviance from 2 vecs, obs & pred vals",
dev)
View(MLEval)
plot(e, 'ROC')
plot(e, 'kappa')
plot(e, 'FPR')
plot(e, 'prevalence')
View(e)
library(dismo)
plot(e, 'ROC')
plot(e, 'kappa')
plot(e, 'FPR')
plot(e, 'prevalence')
getwd()
png(filename = paste0("./",names(samples[i]),"/Eval_ROC.png"),
width = 4*480, height = 4*480, units = "px", pointsize = 4*12,
bg = "white", res = NA, family = "", type = pngtype)
paste0("./",names(samples[i]),"/Eval_ROC.png")
setwd("/home/simon/Documents/Si Work/PostDoc Work/Kroetz & Dedman Sawfish BRT/")
png(filename = paste0("./",names(samples[i]),"/Eval_ROC.png"),
width = 4*480, height = 4*480, units = "px", pointsize = 4*12,
bg = "white", res = NA, family = "", type = pngtype)
par(mar = c(2.5,0.3,0,0.5), fig = c(0,1,0,1), cex.lab = 0.5, mgp = c(1.5,0.5,0), cex = 1.3, lwd = 6)
plot(e, 'ROC')
dev.off()
png(filename = paste0("./",names(samples[i]),"/Eval_ROC.png"))
plot(e, 'ROC')
dev.off()
png(filename = paste0("./",names(samples[i]),"/Eval_kappa.png"))
plot(e, 'kappa')
dev.off()
png(filename = paste0("./",names(samples[i]),"/Eval_FPR.png"))
plot(e, 'FPR')
dev.off()
png(filename = paste0("./",names(samples[i]),"/Eval_prevalence.png"))
plot(e, 'prevalence')
dev.off()
plot(e, 't')
plot(e, 'ODP')
plot(e, 'CCR')
plot(e, 'TPR')
plot(e, 'TNR')
plot(e, 'FNR')
plot(e, 'PPP')
plot(e, 'NPP')
plot(e, 'MCR')
plot(e, 'OR')
evalmetrics <- c("ROC", "kappa", "prevalence", "TPR", "TNR", "FPR", "FNR", "CCR", "PPP", "NPP", "MCR", "OR")
for (s in evalmetrics) {
png(filename = paste0("./",names(samples[i]),"/Eval_", s, ".png"))
plot(e, s)
dev.off()
}
library(devtools)
install_github("SimonDedman/gbm.auto", force = F) # update gbm.auto to latest
library(gbm.auto)
setwd("/media/Seagate/Work/PostDoc Work/Kroetz & Dedman Sawfish BRT/")
setwd("/home/simon/Documents/Si Work/PostDoc Work/Kroetz & Dedman Sawfish BRT/")
samples <- read.csv("AndreaData2019.07.27.csv")
samples$Against.Shoreline <- as.factor(samples$Against.Shoreline)
samples$Shell <- as.factor(samples$Shell)
samples$Oyster <- as.factor(samples$Oyster)
samples$Seagrass <- as.factor(samples$Seagrass)
samples$Mesh.Inch <- as.factor(samples$Mesh.Inch)
samples$Net.Length.Ft <- as.factor(samples$Net.Length.Ft)
expvars5 <- c("Superregion", "Tidal.State", "Water.Temp.C", "Salinity",
"Depth.M", "DO.MgL", "Grain.Size.MM.Log",
"Month","Year")
#Run 5 no mangrove####
library(gbm.auto)
#RUN 5: CPUE, NO GEAR, YEAR MONTH, LOG GRAIN, NO BENTHOS, NO MANGROVE
gbm.auto(grids = NULL,
samples = samples,
expvar = expvars5,
resvar = "P.Pectinata.CPUE",
tc = length(expvars5),
lr = 0.01,
bf = 0.5,
n.trees = 50,
ZI = "CHECK",
fam1 = "bernoulli",
fam2 = "gaussian",
simp = TRUE,
gridslat = 5,
gridslon = 4,
multiplot = TRUE,
cols = grey.colors(1, 1, 1),
linesfiles = TRUE,
smooth = TRUE, #changed
savegbm = TRUE,
varint = TRUE,
map = TRUE,
shape = NULL,
RSB = TRUE,
BnW = TRUE,
alerts = TRUE,
pngtype = "cairo-png",
gaus = TRUE)
round(0.1224535663, 3)
document()
library(devtools)
document()
library(devtools)
document()
library(devtools)
install_github("SimonDedman/gbm.auto", force = F) # update gbm.auto to latest
library(gbm.auto)
setwd("/media/Seagate/Work/PostDoc Work/Kroetz & Dedman Sawfish BRT/")
setwd("/home/simon/Documents/Si Work/PostDoc Work/Kroetz & Dedman Sawfish BRT/")
setwd("X:/PostDoc Work/Kroetz & Dedman Sawfish BRT")
samples <- read.csv("AndreaData2019.07.27.csv")
samples$Against.Shoreline <- as.factor(samples$Against.Shoreline)
samples$Shell <- as.factor(samples$Shell)
samples$Oyster <- as.factor(samples$Oyster)
samples$Seagrass <- as.factor(samples$Seagrass)
samples$Mesh.Inch <- as.factor(samples$Mesh.Inch)
samples$Net.Length.Ft <- as.factor(samples$Net.Length.Ft)
expvars5 <- c("Superregion", "Tidal.State", "Water.Temp.C", "Salinity",
"Depth.M", "DO.MgL", "Grain.Size.MM.Log",
"Month","Year")
#RUN 5: CPUE, NO GEAR, YEAR MONTH, LOG GRAIN, NO BENTHOS, NO MANGROVE
gbm.auto(grids = NULL,
samples = samples,
expvar = expvars5,
resvar = "P.Pectinata.CPUE",
tc = length(expvars5),
lr = 0.01,
bf = 0.5,
n.trees = 50,
ZI = "CHECK",
fam1 = "bernoulli",
fam2 = "gaussian",
simp = TRUE,
gridslat = 5,
gridslon = 4,
multiplot = TRUE,
cols = grey.colors(1, 1, 1),
linesfiles = TRUE,
smooth = TRUE, #changed
savegbm = TRUE,
varint = TRUE,
map = TRUE,
shape = NULL,
RSB = TRUE,
BnW = TRUE,
alerts = TRUE,
pngtype = "cairo-png",
gaus = TRUE)
round(0.0003, 3)
round(0.90909, 3)
library(devtools)
install_github("SimonDedman/gbm.auto", force = F) # update gbm.auto to latest
library(gbm.auto)
setwd("/media/Seagate/Work/PostDoc Work/Kroetz & Dedman Sawfish BRT/")
setwd("/home/simon/Documents/Si Work/PostDoc Work/Kroetz & Dedman Sawfish BRT/")
setwd("X:/PostDoc Work/Kroetz & Dedman Sawfish BRT")
samples <- read.csv("AndreaData2019.07.27.csv")
samples$Against.Shoreline <- as.factor(samples$Against.Shoreline)
samples$Shell <- as.factor(samples$Shell)
samples$Oyster <- as.factor(samples$Oyster)
samples$Seagrass <- as.factor(samples$Seagrass)
samples$Mesh.Inch <- as.factor(samples$Mesh.Inch)
samples$Net.Length.Ft <- as.factor(samples$Net.Length.Ft)
expvars5 <- c("Superregion", "Tidal.State", "Water.Temp.C", "Salinity",
"Depth.M", "DO.MgL", "Grain.Size.MM.Log",
"Month","Year")
#RUN 5: CPUE, NO GEAR, YEAR MONTH, LOG GRAIN, NO BENTHOS, NO MANGROVE
gbm.auto(grids = NULL,
samples = samples,
expvar = expvars5,
resvar = "P.Pectinata.CPUE",
tc = length(expvars5),
lr = 0.01,
bf = 0.5,
n.trees = 50,
ZI = "CHECK",
fam1 = "bernoulli",
fam2 = "gaussian",
simp = TRUE,
gridslat = 5,
gridslon = 4,
multiplot = TRUE,
cols = grey.colors(1, 1, 1),
linesfiles = TRUE,
smooth = TRUE, #changed
savegbm = TRUE,
varint = TRUE,
map = TRUE,
shape = NULL,
RSB = TRUE,
BnW = TRUE,
alerts = TRUE,
pngtype = "cairo-png",
gaus = TRUE)
#RUN 5: CPUE, NO GEAR, YEAR MONTH, LOG GRAIN, NO BENTHOS, NO MANGROVE
gbm.auto(grids = NULL,
samples = samples,
expvar = expvars5,
resvar = "P.Pectinata.CPUE",
tc = length(expvars5),
lr = 0.01,
bf = 0.5,
n.trees = 50,
ZI = "CHECK",
fam1 = "bernoulli",
fam2 = "gaussian",
simp = TRUE,
gridslat = 5,
gridslon = 4,
multiplot = TRUE,
cols = grey.colors(1, 1, 1),
linesfiles = TRUE,
smooth = TRUE, #changed
savegbm = TRUE,
varint = TRUE,
map = TRUE,
shape = NULL,
RSB = TRUE,
BnW = TRUE,
alerts = TRUE,
pngtype = "cairo-png",
gaus = TRUE)
#RUN 5: CPUE, NO GEAR, YEAR MONTH, LOG GRAIN, NO BENTHOS, NO MANGROVE
gbm.auto(grids = NULL,
samples = samples,
expvar = expvars5,
resvar = "P.Pectinata.CPUE",
tc = length(expvars5),
lr = 0.01,
bf = 0.5,
n.trees = 50,
ZI = "CHECK",
fam1 = "bernoulli",
fam2 = "gaussian",
simp = TRUE,
gridslat = 5,
gridslon = 4,
multiplot = TRUE,
cols = grey.colors(1, 1, 1),
linesfiles = TRUE,
smooth = TRUE, #changed
savegbm = TRUE,
varint = TRUE,
map = TRUE,
shape = NULL,
RSB = TRUE,
BnW = TRUE,
alerts = TRUE,
pngtype = "cairo-png",
gaus = TRUE)
library(devtools)
install_github("SimonDedman/gbm.auto", force = F) # update gbm.auto to latest
library(gbm.auto)
setwd("/media/Seagate/Work/PostDoc Work/Kroetz & Dedman Sawfish BRT/")
setwd("/home/simon/Documents/Si Work/PostDoc Work/Kroetz & Dedman Sawfish BRT/")
setwd("X:/PostDoc Work/Kroetz & Dedman Sawfish BRT")
samples <- read.csv("AndreaData2019.07.27.csv")
samples$Against.Shoreline <- as.factor(samples$Against.Shoreline)
samples$Shell <- as.factor(samples$Shell)
samples$Oyster <- as.factor(samples$Oyster)
samples$Seagrass <- as.factor(samples$Seagrass)
samples$Mesh.Inch <- as.factor(samples$Mesh.Inch)
samples$Net.Length.Ft <- as.factor(samples$Net.Length.Ft)
expvars5 <- c("Superregion", "Tidal.State", "Water.Temp.C", "Salinity",
"Depth.M", "DO.MgL", "Grain.Size.MM.Log",
"Month","Year")
#RUN 5: CPUE, NO GEAR, YEAR MONTH, LOG GRAIN, NO BENTHOS, NO MANGROVE
gbm.auto(grids = NULL,
samples = samples,
expvar = expvars5,
resvar = "P.Pectinata.CPUE",
tc = length(expvars5),
lr = list(0.01, 0.001),
bf = 0.5,
n.trees = 50,
ZI = "CHECK",
fam1 = "bernoulli",
fam2 = "gaussian",
simp = TRUE,
gridslat = 5,
gridslon = 4,
multiplot = TRUE,
cols = grey.colors(1, 1, 1),
linesfiles = TRUE,
smooth = TRUE, #changed
savegbm = TRUE,
varint = TRUE,
map = TRUE,
shape = NULL,
RSB = TRUE,
BnW = TRUE,
alerts = TRUE,
pngtype = "cairo-png",
gaus = TRUE)
gbm.auto
install_github("SimonDedman/gbm.auto", force = T) # update gbm.auto to latest
library(gbm.auto)
setwd("/media/Seagate/Work/PostDoc Work/Kroetz & Dedman Sawfish BRT/")
setwd("/home/simon/Documents/Si Work/PostDoc Work/Kroetz & Dedman Sawfish BRT/")
setwd("X:/PostDoc Work/Kroetz & Dedman Sawfish BRT")
samples <- read.csv("AndreaData2019.07.27.csv")
samples$Against.Shoreline <- as.factor(samples$Against.Shoreline)
samples$Shell <- as.factor(samples$Shell)
samples$Oyster <- as.factor(samples$Oyster)
samples$Seagrass <- as.factor(samples$Seagrass)
samples$Mesh.Inch <- as.factor(samples$Mesh.Inch)
samples$Net.Length.Ft <- as.factor(samples$Net.Length.Ft)
expvars5 <- c("Superregion", "Tidal.State", "Water.Temp.C", "Salinity",
"Depth.M", "DO.MgL", "Grain.Size.MM.Log",
"Month","Year")
#RUN 5: CPUE, NO GEAR, YEAR MONTH, LOG GRAIN, NO BENTHOS, NO MANGROVE
gbm.auto(grids = NULL,
samples = samples,
expvar = expvars5,
resvar = "P.Pectinata.CPUE",
tc = length(expvars5),
lr = list(0.01, 0.001),
bf = 0.5,
n.trees = 50,
ZI = "CHECK",
fam1 = "bernoulli",
fam2 = "gaussian",
simp = TRUE,
gridslat = 5,
gridslon = 4,
multiplot = TRUE,
cols = grey.colors(1, 1, 1),
linesfiles = TRUE,
smooth = TRUE, #changed
savegbm = TRUE,
varint = TRUE,
map = TRUE,
shape = NULL,
RSB = TRUE,
BnW = TRUE,
alerts = TRUE,
pngtype = "cairo-png",
gaus = TRUE)
gbm.auto
library(devtools)
document()
library(devtools)
install_github("SimonDedman/gbm.auto", force = T) # update gbm.auto to latest
library(gbm.auto)
gbm.auto
setwd("/media/Seagate/Work/PostDoc Work/Kroetz & Dedman Sawfish BRT/")
setwd("/home/simon/Documents/Si Work/PostDoc Work/Kroetz & Dedman Sawfish BRT/")
setwd("X:/PostDoc Work/Kroetz & Dedman Sawfish BRT")
samples <- read.csv("AndreaData2019.07.27.csv")
samples$Against.Shoreline <- as.factor(samples$Against.Shoreline)
samples$Shell <- as.factor(samples$Shell)
samples$Oyster <- as.factor(samples$Oyster)
samples$Seagrass <- as.factor(samples$Seagrass)
samples$Mesh.Inch <- as.factor(samples$Mesh.Inch)
samples$Net.Length.Ft <- as.factor(samples$Net.Length.Ft)
expvars5 <- c("Superregion", "Tidal.State", "Water.Temp.C", "Salinity",
"Depth.M", "DO.MgL", "Grain.Size.MM.Log",
"Month","Year")
#RUN 5: CPUE, NO GEAR, YEAR MONTH, LOG GRAIN, NO BENTHOS, NO MANGROVE
gbm.auto(grids = NULL,
samples = samples,
expvar = expvars5,
resvar = "P.Pectinata.CPUE",
tc = length(expvars5),
lr = list(0.01, 0.001),
bf = 0.5,
n.trees = 50,
ZI = "CHECK",
fam1 = "bernoulli",
fam2 = "gaussian",
simp = TRUE,
gridslat = 5,
gridslon = 4,
multiplot = TRUE,
cols = grey.colors(1, 1, 1),
linesfiles = TRUE,
smooth = TRUE, #changed
savegbm = TRUE,
varint = TRUE,
map = TRUE,
shape = NULL,
RSB = TRUE,
BnW = TRUE,
alerts = TRUE,
pngtype = "cairo-png",
gaus = TRUE)
library(dismo)
gmb.step
gbm.step
(1.386-0.718)/1.386
((1.386-0.718)/1.386)*100
round(((1.386-0.718)/1.386)*100, 2)
round(((1.386-0.718)/1.386)*100, 3)
library(devtools)
library(devtools)
document()
