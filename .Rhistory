setwd("Outputs")
setwd("With LatLon")
setwd("TSnP_Sep") # create output & tidal state & phase directories & go there
setwd("../")
setwd("../")
getwd()
setwd("../")
getwd()
dir.create("Outputs")
setwd("Outputs")
####1. With Lat & Lon####
dir.create("With LatLon")
setwd("With LatLon")
####1.1 tidal state & phase separate####
dir.create("TSnP_Sep")
setwd("TSnP_Sep") # create output & tidal state & phase directories & go there
gbm.auto(grids = NULL,
samples = mysamples,
expvar = expvar1,
resvar = resvar,
tc = c(2),
lr = c(0.0000001),
bf = 0.5,
ZI = "CHECK",
simp = TRUE,
gridslat = 2, # need to set if not predicting? Set anyway
gridslon = 3, # need to set if not predicting? Set anyway
cols = grey.colors(1, 1, 1),
linesfiles = TRUE,
savegbm = FALSE,
varint = TRUE,
map = TRUE, # need to change if not predicting? Hopefully can ignore.
shape = NULL,
RSB = TRUE, # need to change if not predicting? Hopefully can ignore.
BnW = TRUE, # need to change if not predicting? Hopefully can ignore.
alerts = TRUE,
pngtype = "cairo-png",
gaus = TRUE)
####1.2 tidal state & phase joined####
setwd("../")
dir.create("TSnP_Join")
setwd("TSnP_Join")
gbm.auto(grids = NULL,
samples = mysamples,
expvar = expvar2,
resvar = resvar,
tc = c(2),
lr = c(0.0000001),
bf = 0.5,
ZI = "CHECK",
simp = TRUE,
gridslat = 2, # need to set if not predicting? Set anyway
gridslon = 3, # need to set if not predicting? Set anyway
cols = grey.colors(1, 1, 1),
linesfiles = TRUE,
savegbm = FALSE,
varint = TRUE,
map = TRUE, # need to change if not predicting? Hopefully can ignore.
shape = NULL,
RSB = TRUE, # need to change if not predicting? Hopefully can ignore.
BnW = TRUE, # need to change if not predicting? Hopefully can ignore.
alerts = TRUE,
pngtype = "cairo-png",
gaus = TRUE)
setwd("../")
setwd("../")
####2. Without Lat & Lon####
dir.create("Without LatLon")
setwd("Without LatLon")
####2.1 tidal state & phase separate####
dir.create("TSnP_Sep")
setwd("TSnP_Sep") # create output & tidal state & phase directories & go there
gbm.auto(grids = NULL,
samples = mysamples,
expvar = expvar3,
resvar = resvar,
tc = c(2),
lr = c(0.0000001),
bf = 0.5,
ZI = "CHECK",
simp = TRUE,
gridslat = 2, # need to set if not predicting? Set anyway
gridslon = 3, # need to set if not predicting? Set anyway
cols = grey.colors(1, 1, 1),
linesfiles = TRUE,
savegbm = FALSE,
varint = TRUE,
map = TRUE, # need to change if not predicting? Hopefully can ignore.
shape = NULL,
RSB = TRUE, # need to change if not predicting? Hopefully can ignore.
BnW = TRUE, # need to change if not predicting? Hopefully can ignore.
alerts = TRUE,
pngtype = "cairo-png",
gaus = TRUE)
####1.2 tidal state & phase joined####
setwd("../")
dir.create("TSnP_Join")
setwd("TSnP_Join")
gbm.auto(grids = NULL,
samples = mysamples,
expvar = expvar4,
resvar = resvar,
tc = c(2),
lr = c(0.0000001),
bf = 0.5,
ZI = "CHECK",
simp = TRUE,
gridslat = 2, # need to set if not predicting? Set anyway
gridslon = 3, # need to set if not predicting? Set anyway
cols = grey.colors(1, 1, 1),
linesfiles = TRUE,
savegbm = FALSE,
varint = TRUE,
map = TRUE, # need to change if not predicting? Hopefully can ignore.
shape = NULL,
RSB = TRUE, # need to change if not predicting? Hopefully can ignore.
BnW = TRUE, # need to change if not predicting? Hopefully can ignore.
alerts = TRUE,
pngtype = "cairo-png",
gaus = TRUE)
setwd("../")
library("devtools", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.3")
document()
setwd("/home/simon/Dropbox/Galway/Analysis/R/Kai Thorson MultiMap Plots/")
library('raster')
library('rgeos')
library('maptools')
library('fields') # aded by SD called later
data <- read.csv("Report.csv")
resolution = 3
xmin <- floor(min(data[,"celllon"])/resolution)*resolution - resolution
xmax <- floor(max(data[,"celllon"])/resolution)*resolution + resolution
ymin <- floor(min(data[,"celllat"])/resolution)*resolution
ymax <- floor(max(data[,"celllat"])/resolution)*resolution + resolution
xlim1 = c(xmin,xmax)
ylim1 = c(ymin,ymax)
npac <- getRgshhsMap(fn = "./gshhs2.2/gshhs_l.b", shift = F, xlim = xlim1, ylim = ylim1)
rast <- raster(nrows = (ymax - ymin)/resolution, ncols = (xmax - xmin)/resolution, xmn = xmin, xmx = xmax, ymn = ymin, ymx = ymax)
dat <- data.frame(x = data[,"celllon"], y = data[,"celllat"], z = data[,"CPUE"])
cpue.p <- rasterize(x = cbind(dat$x, dat$y), field = dat$z, y = rast, fun = function(x, ...) mean(x))
par(las = 1, mar = c(3,3,3,1), mfrow = c(1,1), cex.axis = 1.0, cex.lab = 1.0, cex.main = 1.0)
plot(npac, xlim = xlim1, ylim = ylim1, axes = T, col = "dark green", las = 1, cex.axis = 1.0, font.axis = 1.0, add = F)
plot(cpue.p, xlim = xlim1, ylim = ylim1, las = 1, col = fields::tim.colors(), add = T, horizontal = T, zlim = range(c(dat$z)), smallplot = c(0.1,0.3,0.94,0.97))
plot(npac, xlim = xlim1, ylim = ylim1, axes = T, col = "dark green", las = 1, cex.axis = 1.0, font.axis = 1.0, add = T)
title(main = "Predicted CPUE")
par(las = 1, mar = c(3,3,3,1), mfrow = c(1,1), cex.axis = 1.0, cex.lab = 1.0, cex.main = 1.0)
plot(npac, xlim = xlim1, ylim = ylim1, axes = T, col = "dark green", las = 1, cex.axis = 1.0, font.axis = 1.0, add = F)
plot(cpue.p, xlim = xlim1, ylim = ylim1, las = 1, col = fields::tim.colors(), add = T, horizontal = T, zlim = range(c(dat$z)), smallplot = c(0.1,0.3,0.94,0.97))
plot(npac, xlim = xlim1, ylim = ylim1, axes = T, col = "dark green", las = 1, cex.axis = 1.0, font.axis = 1.0, add = T)
title(main = "Predicted CPUE")
source('~/Dropbox/Galway/Analysis/R/gbm.auto/R/gbm.auto.R')
getwd()
setwd("/home/simon/Dropbox/PostDoc Work/Bimini BRUVs/") # set your own directory
library("devtools")
install_github("SimonDedman/gbm.auto") # update gbm.auto to latest
library("gbm.auto")
setwd("/home/simon/Dropbox/PostDoc Work/Bimini BRUVs/") # set your own directory
mysamples <- read.csv("BRUVS_Env&Bio_Data_HG_RB_SD_V090117.csv", header = TRUE, row.names = NULL)
decimateTime = function(time) {
time = as.numeric(unlist(strsplit(time, ":")))
time = time[1] * 60 + time[2] + time[3] / 60
return(time)}
times <- as.character(mysamples$Time_Midpoint)
mysamples$Time_Midpoint <- sapply(times,decimateTime)
expvar1 <- c(2,3,5,7,10,11,12,17:25)  # colnames(mysamples)[expvar1]
# explanatory variables, tidal state & phase joined
expvar2 <- c(2,3,5,7,10,13, 17:25)
# expvar1&2 without latlon
expvar3 <- c(5,7,10,11,12,17:25)
expvar4 <- c(5,7,10,13, 17:25)
# response variable columns, cycles through them. # should do but isn't, will fix
resvar <- 54:56
source('~/Dropbox/Galway/Analysis/R/gbm.auto/R/gbm.auto.R')
gbm.auto(grids = NULL,
samples = mysamples,
expvar = expvar1,
resvar = resvar[1],
tc = c(2),
lr = c(0.0000001), # very low rate
bf = 0.5, # could/should use bfcheck to optimise this
ZI = "CHECK",
simp = TRUE,
gridslat = 2, # don't need to set if not predicting. Set anyway
gridslon = 3, # don't need to set if not predicting. Set anyway
cols = grey.colors(1, 1, 1),
linesfiles = TRUE,
savegbm = FALSE,
varint = TRUE,
map = TRUE,
shape = NULL,
RSB = TRUE,
BnW = TRUE,
alerts = TRUE,
pngtype = "cairo-png",
gaus = TRUE)
source('~/Dropbox/Galway/Analysis/R/gbm.auto/R/gbm.utils.R')
gbm.auto(grids = NULL,
samples = mysamples,
expvar = expvar1,
resvar = resvar[1],
tc = c(2),
lr = c(0.0000001), # very low rate
bf = 0.5, # could/should use bfcheck to optimise this
ZI = "CHECK",
simp = TRUE,
gridslat = 2, # don't need to set if not predicting. Set anyway
gridslon = 3, # don't need to set if not predicting. Set anyway
cols = grey.colors(1, 1, 1),
linesfiles = TRUE,
savegbm = FALSE,
varint = TRUE,
map = TRUE,
shape = NULL,
RSB = TRUE,
BnW = TRUE,
alerts = TRUE,
pngtype = "cairo-png",
gaus = TRUE)
source('~/Dropbox/Galway/Analysis/R/gbm.auto/R/gbm.auto.R')
gbm.auto(grids = NULL,
samples = mysamples,
expvar = expvar1,
resvar = resvar[1],
tc = c(2),
lr = c(0.0000001), # very low rate
bf = 0.5, # could/should use bfcheck to optimise this
ZI = "CHECK",
simp = TRUE,
gridslat = 2, # don't need to set if not predicting. Set anyway
gridslon = 3, # don't need to set if not predicting. Set anyway
cols = grey.colors(1, 1, 1),
linesfiles = TRUE,
savegbm = FALSE,
varint = TRUE,
map = TRUE,
shape = NULL,
RSB = TRUE,
BnW = TRUE,
alerts = TRUE,
pngtype = "cairo-png",
gaus = TRUE)
source('~/Dropbox/Galway/Analysis/R/gbm.auto/R/gbm.auto.R')
gbm.auto(grids = NULL,
samples = mysamples,
expvar = expvar1,
resvar = resvar[1],
tc = c(2),
lr = c(0.0000001), # very low rate
bf = 0.5, # could/should use bfcheck to optimise this
ZI = "CHECK",
simp = TRUE,
gridslat = 2, # don't need to set if not predicting. Set anyway
gridslon = 3, # don't need to set if not predicting. Set anyway
cols = grey.colors(1, 1, 1),
linesfiles = TRUE,
savegbm = FALSE,
varint = TRUE,
map = TRUE,
shape = NULL,
RSB = TRUE,
BnW = TRUE,
alerts = TRUE,
pngtype = "cairo-png",
gaus = TRUE)
par()
source('~/Dropbox/Galway/Analysis/R/gbm.auto/R/gbm.auto.R')
gbm.auto(grids = NULL,
samples = mysamples,
expvar = expvar1,
resvar = resvar[1],
tc = c(2),
lr = c(0.0000001), # very low rate
bf = 0.5, # could/should use bfcheck to optimise this
ZI = "CHECK",
simp = TRUE,
gridslat = 2, # don't need to set if not predicting. Set anyway
gridslon = 3, # don't need to set if not predicting. Set anyway
cols = grey.colors(1, 1, 1),
linesfiles = TRUE,
savegbm = FALSE,
varint = TRUE,
map = TRUE,
shape = NULL,
RSB = TRUE,
BnW = TRUE,
alerts = TRUE,
pngtype = "cairo-png",
gaus = TRUE)
source('~/Dropbox/Galway/Analysis/R/gbm.auto/R/gbm.auto.R')
source('~/Dropbox/Galway/Analysis/R/gbm.auto/R/gbm.auto.R')
gbm.auto(grids = NULL,
samples = mysamples,
expvar = expvar1,
resvar = resvar[1],
tc = c(2),
lr = c(0.0000001), # very low rate
bf = 0.5, # could/should use bfcheck to optimise this
ZI = "CHECK",
simp = TRUE,
gridslat = 2, # don't need to set if not predicting. Set anyway
gridslon = 3, # don't need to set if not predicting. Set anyway
cols = grey.colors(1, 1, 1),
linesfiles = TRUE,
savegbm = FALSE,
varint = TRUE,
map = TRUE,
shape = NULL,
RSB = TRUE,
BnW = TRUE,
alerts = TRUE,
pngtype = "cairo-png",
gaus = TRUE)
source('~/Dropbox/Galway/Analysis/R/gbm.auto/R/gbm.auto.R')
gbm.auto(grids = NULL,
samples = mysamples,
expvar = expvar1,
resvar = resvar[1],
tc = c(2),
lr = c(0.0000001), # very low rate
bf = 0.5, # could/should use bfcheck to optimise this
ZI = "CHECK",
simp = TRUE,
gridslat = 2, # don't need to set if not predicting. Set anyway
gridslon = 3, # don't need to set if not predicting. Set anyway
cols = grey.colors(1, 1, 1),
linesfiles = TRUE,
savegbm = FALSE,
varint = TRUE,
map = TRUE,
shape = NULL,
RSB = TRUE,
BnW = TRUE,
alerts = TRUE,
pngtype = "cairo-png",
gaus = TRUE)
source('~/Dropbox/Galway/Analysis/R/gbm.auto/R/gbm.auto.R')
gbm.auto(grids = NULL,
samples = mysamples,
expvar = expvar1,
resvar = resvar[1],
tc = c(2),
lr = c(0.0000001), # very low rate
bf = 0.5, # could/should use bfcheck to optimise this
ZI = "CHECK",
simp = TRUE,
gridslat = 2, # don't need to set if not predicting. Set anyway
gridslon = 3, # don't need to set if not predicting. Set anyway
cols = grey.colors(1, 1, 1),
linesfiles = TRUE,
savegbm = FALSE,
varint = TRUE,
map = TRUE,
shape = NULL,
RSB = TRUE,
BnW = TRUE,
alerts = TRUE,
pngtype = "cairo-png",
gaus = TRUE)
source('~/Dropbox/Galway/Analysis/R/gbm.auto/R/gbm.auto.R')
gbm.auto(grids = NULL,
samples = mysamples,
expvar = expvar1,
resvar = resvar[1],
tc = c(2),
lr = c(0.0000001), # very low rate
bf = 0.5, # could/should use bfcheck to optimise this
ZI = "CHECK",
simp = TRUE,
gridslat = 2, # don't need to set if not predicting. Set anyway
gridslon = 3, # don't need to set if not predicting. Set anyway
cols = grey.colors(1, 1, 1),
linesfiles = TRUE,
savegbm = FALSE,
varint = TRUE,
map = TRUE,
shape = NULL,
RSB = TRUE,
BnW = TRUE,
alerts = TRUE,
pngtype = "cairo-png",
gaus = TRUE)
source('~/Dropbox/Galway/Analysis/R/gbm.auto/R/gbm.auto.R')
gbm.auto(grids = NULL,
samples = mysamples,
expvar = expvar1,
resvar = resvar[1],
tc = c(2),
lr = c(0.0000001), # very low rate
bf = 0.5, # could/should use bfcheck to optimise this
ZI = "CHECK",
simp = TRUE,
gridslat = 2, # don't need to set if not predicting. Set anyway
gridslon = 3, # don't need to set if not predicting. Set anyway
cols = grey.colors(1, 1, 1),
linesfiles = TRUE,
savegbm = FALSE,
varint = TRUE,
map = TRUE,
shape = NULL,
RSB = TRUE,
BnW = TRUE,
alerts = TRUE,
pngtype = "cairo-png",
gaus = TRUE)
source('~/Dropbox/Galway/Analysis/R/gbm.auto/R/gbm.auto.R')
source('~/Dropbox/Galway/Analysis/R/gbm.auto/R/gbm.auto.R')
gbm.auto(grids = NULL,
samples = mysamples,
expvar = expvar1,
resvar = resvar[1],
tc = c(2),
lr = c(0.0000001), # very low rate
bf = 0.5, # could/should use bfcheck to optimise this
ZI = "CHECK",
simp = TRUE,
gridslat = 2, # don't need to set if not predicting. Set anyway
gridslon = 3, # don't need to set if not predicting. Set anyway
cols = grey.colors(1, 1, 1),
linesfiles = TRUE,
savegbm = FALSE,
varint = TRUE,
map = TRUE,
shape = NULL,
RSB = TRUE,
BnW = TRUE,
alerts = TRUE,
pngtype = "cairo-png",
gaus = TRUE)
library("devtools")
install_github("SimonDedman/gbm.auto") # update gbm.auto to latest
installed.packages(priority = "base")
panel.cor <- function(x, y, digits = 2, prefix = "", cex.cor, ...)
{
usr <- par("usr"); on.exit(par(usr))
par(usr = c(0, 1, 0, 1))
r <- abs(cor(x, y))
txt <- format(c(r, 0.123456789), digits = digits)[1]
txt <- paste0(prefix, txt)
if(missing(cex.cor)) cex.cor <- 0.8/strwidth(txt)
text(0.5, 0.5, txt, cex = cex.cor * r)
}
panel.hist <- function(x, ...)
{
usr <- par("usr"); on.exit(par(usr))
par(usr = c(usr[1:2], 0, 1.5) )
h <- hist(x, plot = FALSE)
breaks <- h$breaks; nB <- length(breaks)
y <- h$counts; y <- y/max(y)
rect(breaks[-nB], 0, breaks[-1], y, col="cyan", ...)
}
data(iris)
head(iris)
library(corrgram)
install.packages("corrgram")
library(corrgram)
install.packages("asbio")
library(asbio)
pairs(~ Sepal.Length + Sepal.Width + Petal.Length,
data = iris,
lower.panel = panel.lm,
upper.panel = panel.cor,
diag.panel = panel.hist,
main = "pair plots of variables")
source('~/Dropbox/Galway/Analysis/R/gbm.auto/R/gbm.auto.R')
library("devtools", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.3")
document()
devtools::create()
create_description()
update.package_deps()
document()
install.packages(c("commonmark", "curl", "jsonlite", "maptools", "matrixStats", "Rcpp", "readr", "rgdal", "rgeos", "rmarkdown", "shiny", "sourcetools", "stringi", "tibble", "viridis"))
document()
library("devtools", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.3")
document()
install_github("SimonDedman/gbm.auto") # update gbm.auto to latest
setwd("/home/simon/Dropbox/PostDoc Work/Bimini BRUVs/") # set your own directory
mysamples <- read.csv("BRUVS_Env&Bio_Data_HG_RB_SD_V070417.csv", header = TRUE, row.names = NULL)
decimateTime = function(time) {
time = as.numeric(unlist(strsplit(time, ":")))
time = time[1] * 60 + time[2] + time[3] / 60
return(time)}
times <- as.character(mysamples$Time_Midpoint)
mysamples$Time_Midpoint <- sapply(times,decimateTime)
View(mysamples)
mysamples <- read.csv("BRUVS_Env&Bio_Data_HG_RB_SD_V070417.csv", header = TRUE, row.names = NULL)
View(mysamples)
mysamples <- read.csv("BRUVS_Env&Bio_Data_HG_RB_SD_V070417.csv", header = TRUE, row.names = NULL)
decimateTime = function(time) {
time = as.numeric(unlist(strsplit(time, ":")))
time = time[1] * 60 + time[2] + time[3] / 60
return(time)}
times <- as.character(mysamples$Time_Midpoint)
mysamples$Time_Midpoint <- sapply(times,decimateTime)
colnames(mysamples)
expvar5 <- c(5,13,18:25)
setwd("Outputs")
setwd("TSnP_Join")
setwd("Without LatLon")
setwd("TSnP_Join")
library("gbm.auto")
gbm.auto(samples = mysamples,
#expvar = expvar4,
expvar = expvar5,
resvar = resvar,
lr = c(0.0000001))
gbm.auto(samples = mysamples,
#expvar = expvar4,
expvar = expvar5,
#resvar = resvar,
resvar = 54, #only teleost until HG/RB decision, most defencible
lr = c(0.0000001))
document()
