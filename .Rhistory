as.character(getOption("error"))  # (function() {.rs.recordTraceback(TRUE, 5, .rs.enqueueError)})()
getOption("error")
switch(menu(c("List letters", "List LETTERS")) + 1,
cat("Nothing done\n"),
letters,
LETTERS)
switch(menu(c("List letters", "List LETTERS")) + 1,
cat("Nothing done\n"),
letters,
LETTERS)
switch(menu(c("List letters", "List LETTERS")) + 1,
cat("Nothing done\n"),
letters,
LETTERS)
menu(c("List letters", "List LETTERS"))
menu(c("List letters",
"List LETTERS")) + 1
menu(c("List letters",
"List LETTERS")) + 1
letters
LETTERS
switch(menu(c("List letters",
"List LETTERS")),
cat("Nothing done\n"),
letters,
LETTERS)
switch(menu(c("List letters",
"List LETTERS")),
cat("Nothing done\n"),
letters,
LETTERS)
switch(menu(c("List letters",
"List LETTERS")),
cat("Nothing done\n"),
letters,
LETTERS)3
switch(menu(c("List letters",
"List LETTERS")),
cat("Nothing done\n"),
letters,
LETTERS)
switch(menu(c("List letters",
"List LETTERS")),
cat("Nothing done\n"),
letters,
LETTERS)
switch(menu(c("List letters", # answer 1, + 1, = 2
"List LETTERS")) + 1, # answer 2, + 1, = 3
cat("Nothing done\n"), # switch1 = answer 0 + 1 = 1
letters, # switch2 = answer 2
LETTERS) # switch3 = answer2
switch(choices = menu(c("List letters", # answer 1, + 1, = 2
"List LETTERS")) + 1, # answer 2, + 1, = 3
cat("Nothing done\n"), # switch1 = answer 0 + 1 = 1
letters, # switch2 = answer 2
LETTERS) # switch3 = answer2
switch(menu(choices = c("List letters", # answer 1, + 1, = 2
"List LETTERS")) + 1, # answer 2, + 1, = 3
cat("Nothing done\n"), # switch1 = answer 0 + 1 = 1
letters, # switch2 = answer 2
LETTERS) # switch3 = answer2
samples <- list()
samples <- "cuckoo"
switch(menu(choices = c("YES", # answer 1, + 1, = 2
"NO"),
title = "Save resulting csv report, map & plot image files, and model objects (if so requested), to user's local filesystem?"
) + 1, # answer 2, + 1, = 3
cat("Nothing done\n"), # switch1 = answer 0 + 1 = 1
print(paste0("Files will be saved to a subfolder called ", samples, " in the current folder ", getwd())), # switch2 = answer 2
LETTERS) # switch3 = answer2
switch(menu(choices = c("YES", # answer 1, + 1, = 2
"NO"),
title = "Save resulting csv report, map & plot image files, and model objects (if so requested), to user's local filesystem?"
) + 1, # answer 2, + 1, = 3
cat("Nothing done\n"), # switch1 = answer 0 + 1 = 1
print(paste0("Files will be saved to a subfolder called ", samples, " in the current folder ", getwd())), # switch2 = answer 2
setwd(tempdir())) # switch3 = answer2
switch(menu(choices = c("YES", # answer 1, + 1, = 2
"NO"),
title = "Save resulting csv report, map & plot image files, and model objects (if so requested), to user's local filesystem?"
) + 1, # answer 2, + 1, = 3
cat("Nothing done\n"), # switch1 = answer 0 + 1 = 1
print(paste0("Files will be saved to a subfolder called ", samples, " in the current folder ", getwd())), # switch2 = answer 2
setwd(tempdir())) # switch3 = answer2
getwd()
switch(menu(choices = c("YES, as a subfolder within my current working directory", # answer 1, + 1, = 2
"Yes, but to a temporary folder",
"NO"),
title = "Save resulting csv report, map & plot image files, and model objects (if so requested), to user's local filesystem?") + 1, # answer 2, + 1, = 3
cat("Nothing done\n"), # switch1 = answer 0 + 1 = 1
print(paste0("Files will be saved to a subfolder called ", samples, " in the current folder ", getwd())), # switch2 = answer 2
setwd(tempdir()); print(paste0("Files will be saved to a temporary folder ", getwd()))) # switch3 = answer2
switch(menu(choices = c("YES, as a subfolder within my current working directory", # answer 1, + 1, = 2
"Yes, but to a temporary folder",
"NO"),
title = "Save resulting csv report, map & plot image files, and model objects (if so requested), to user's local filesystem?") + 1, # answer 2, + 1, = 3
cat("Nothing done\n"), # switch1 = answer 0 + 1 = 1
print(paste0("Files will be saved to a subfolder called ", samples, " in the current folder ", getwd())), # switch2 = answer 2
{setwd(tempdir())
print(paste0("Files will be saved to a temporary folder ", getwd()))}
) # switch3 = answer2
switch(menu(choices = c("YES, as a subfolder within my current working directory", # answer 1, + 1, = 2
"Yes, but to a temporary folder",
"NO"),
title = "Save resulting csv report, map & plot image files, and model objects (if so requested), to user's local filesystem?") + 1, # answer 2, + 1, = 3
cat("Nothing done\n"), # switch1 = answer 0 + 1 = 1
print(paste0("Files will be saved to a subfolder called ", samples, " in the current folder ", getwd())), # switch2 = answer 2
{setwd(tempdir())
print(paste0("Files will be saved to a temporary folder ", getwd()))}
) # switch3 = answer2
switch(menu(choices = c("YES, as a subfolder within my current working directory", # answer 1, + 1, = 2
"Yes, but to a temporary folder",
"NO"),
title = "Save resulting csv report, map & plot image files, and model objects (if so requested), to user's local filesystem?") + 1, # answer 2, + 1, = 3
cat("Nothing done\n"), # switch1 = answer 0 + 1 = 1
print(paste0("Files will be saved to a subfolder called ", samples, " in the current folder ", getwd())), # switch2 = answer 2
{setwd(tempdir())
print(paste0("Files will be saved to a temporary folder ", getwd()))}
) # switch3 = answer2
switch(menu(choices = c("YES, as a subfolder within my current working directory", # answer 1, + 1, = 2
"Yes, but to a temporary folder",
"NO"),
title = "Save resulting csv report, map & plot image files, and model objects (if so requested), to user's local filesystem?") + 1, # answer 2, + 1, = 3
cat("Nothing done\n"), # switch1 = answer 0 + 1 = 1
print(paste0("Files will be saved to a subfolder called ", samples, " in the current folder ", getwd())), # switch2 = answer 2
{setwd(tempdir())
print(paste0("Files will be saved to a temporary folder ", getwd()))}
) # switch3 = answer2
switch(menu(choices = c("YES, as a subfolder within my current working directory", # answer 1, + 1, = 2
"Yes, but to a temporary folder",
"NO"),
title = "Save resulting csv report, map & plot image files, and model objects (if so requested), to user's local filesystem?") + 1, # answer 2, + 1, = 3
cat("Nothing done\n"), # switch1 = answer 0 + 1 = 1
print(paste0("Files will be saved to a subfolder called ", samples, " in the current folder ", getwd())), # switch2 = answer 2
{setwd(tempdir())
print(paste0("Files will be saved to a temporary folder"))}
) # switch3 = answer2
switch(menu(choices = c("YES, as a subfolder within my current working directory", # answer 1, + 1, = 2
"Yes, but to a temporary folder",
"NO"),
title = "Save resulting csv report, map & plot image files, and model objects (if so requested), to user's local filesystem?") + 1, # answer 2, + 1, = 3
cat("Nothing done\n"), # switch1 = answer 0 + 1 = 1
print(paste0("Files will be saved to a subfolder called ", samples, " in the current folder ", getwd())), # switch2 = answer 2
{setwd(tempdir())
print(paste0("Files will be saved to a temporary folder"))}
) # switch3 = answer2
switch(menu(choices = c("YES, as a subfolder within my current working directory", # answer 1, + 1, = 2
"Yes, but to a temporary folder",
"NO"),
title = "Save resulting csv report, map & plot image files, and model objects (if so requested), to user's local filesystem?") + 1, # answer 2, + 1, = 3
cat("Nothing done\n"), # switch1 = answer 0 + 1 = 1
print(paste0("Files will be saved to a subfolder called ", names(samples[i]), " in the current folder ", getwd())), # switch2 = answer 2
{setwd(tempdir()) # switch3 = answer2
print("Files will be saved to a temporary folder")},
print("Nothing will be saved") # switch4 = answer 3, NO
)
switch(menu(choices = c("YES, as a subfolder within my current working directory", # answer 1, + 1, = 2
"Yes, but to a temporary folder",
"NO"),
title = "Save resulting csv report, map & plot image files, and model objects (if so requested), to user's local filesystem?") + 1, # answer 2, + 1, = 3
cat("Nothing done\n"), # switch1 = answer 0 + 1 = 1
print(paste0("Files will be saved to a subfolder called ", names(samples[i]), " in the current folder ", getwd())), # switch2 = answer 2
{setwd(tempdir()) # switch3 = answer2
print("Files will be saved to a temporary folder")},
print("Nothing will be saved") # switch4 = answer 3, NO
)
switch(menu(choices = c("YES, as a subfolder within my current working directory", # answer 1, + 1, = 2
"Yes, but to a temporary folder",
"NO"),
title = "Save resulting csv report, map & plot image files, and model objects (if so requested), to user's local filesystem?") + 1, # answer 2, + 1, = 3
cat("Nothing done\n"), # switch1 = answer 0 + 1 = 1
print(paste0("Files will be saved to a subfolder called ", names(samples[i]), " in the current folder ", getwd())), # switch2 = answer 2
{setwd(tempdir()) # switch3 = answer2
print("Files will be saved to a temporary folder")},
print("Nothing will be saved") # switch4 = answer 3, NO
)
switch(menu(choices = c("YES, as a subfolder within my current working directory", # answer 1, + 1, = 2
"Yes, but to a temporary folder",
"NO"),
title = "Save resulting csv report, map & plot image files, and model objects (if so requested), to user's local filesystem?") + 1, # answer 2, + 1, = 3
cat("Nothing done\n"), # switch1 = answer 0 + 1 = 1
print(paste0("Files will be saved to a subfolder called ", names(samples[i]), " in the current folder ", getwd())), # switch2 = answer 2
{setwd(tempdir()) # switch3 = answer2
print("Files will be saved to a temporary folder")},
print("Nothing will be saved") # switch4 = answer 3, NO
)
switch(menu(title = "Save resulting csv report, map & plot image files, and model objects (if so requested), to user's local filesystem?",
choices = c("YES, as a subfolder within my current working directory", # answer1, + 1, = 2
"Yes, but to a temporary folder", # answer2, + 1, = 3
"NO")) + 1,  # answer3, + 1, = 4
cat("Nothing done\n"), # switch1 = answer0 + 1 = 1
print(paste0("Files will be saved to a subfolder named per your response variable(s), in the current folder ", getwd())), # switch2 = answer1
{setwd(tempdir()) # switch3 = answer2
print("Files will be saved to a temporary folder")},
print("Nothing will be saved") # switch4 = answer3
)
switch(menu(title = "Save resulting csv report, map & plot image files, and model objects (if so requested), to user's local filesystem?",
choices = c("YES, as a subfolder within my current working directory", # answer1, + 1, = 2
"Yes, but to a temporary folder", # answer2, + 1, = 3
"NO")) + 1,  # answer3, + 1, = 4
cat("Nothing done\n"), # switch1 = answer0 + 1 = 1
print(paste0("Files will be saved to a subfolder named per your response variable(s), in the current folder ", getwd())), # switch2 = answer1
{setwd(tempdir()) # switch3 = answer2
print("Files will be saved to a temporary folder")},
print("Nothing will be saved") # switch4 = answer3
)
switch(menu(title = "Save resulting csv report, map & plot image files, and model objects (if so requested), to user's local filesystem?",
choices = c("YES, as a subfolder within my current working directory", # answer1, + 1, = 2
"Yes, but to a temporary folder", # answer2, + 1, = 3
"NO")) + 1,  # answer3, + 1, = 4
cat("Nothing done\n"), # switch1 = answer0 + 1 = 1
print(paste0("Files will be saved to a subfolder named per your response variable(s), in the current folder ", getwd())), # switch2 = answer1
{setwd(tempdir()) # switch3 = answer2
print("Files will be saved to a temporary folder")},
print("Nothing will be saved") # switch4 = answer3
)
switch(menu(title = "Save resulting csv report, map & plot image files, and model objects (if so requested), to user's local filesystem?",
choices = c("YES, as a subfolder within my current working directory", # answer1, + 1, = 2
"Yes, but to a temporary folder", # answer2, + 1, = 3
"NO")) + 1,  # answer3, + 1, = 4
cat("Nothing done\n"), # switch1 = answer0 + 1 = 1
print(paste0("Files will be saved to a subfolder named per your response variable(s), in the current folder ", getwd())), # switch2 = answer1
{setwd(tempdir()) # switch3 = answer2
print("Files will be saved to a temporary folder")},
print("Nothing will be saved") # switch4 = answer3
)
library(*devtools)
library(devtools)
document()
install.packages("dismo")
install.packages("gbm")
document()
build()
getwd()
savedir = tempdir()
setwd(savedir)
getwd()
document()
library(devtools)
document()
build()
check()
document()
build()
check()
document()
build()
release()
check_rhub()
check_win_devel()
release()
setwd("/home/simon/Documents/Si Work/PostDoc Work/Kroetz & Dedman Sawfish BRT/Mapping/gbm.basemap_coastline/")
source('~/Dropbox/Galway/Analysis/R/gbm.auto/R/gbm.basemap.R')
gbm.basemap(bounds = c(-81.7638756850148098, # region to crop to: c(xmin,xmax,ymin,ymax)
-80.3334710825244116, # from andrea shapefiles properties in qgis
24.7600058598826394,
25.9785528161596062),
# grids = NULL, # if bounds unspecified, name your grids database here
# gridslat = NULL, # if bounds unspecified, specify which column in grids is latitude
# gridslon = NULL, # if bounds unspecified, specify which column in grids is longitude
getzip = TRUE, # download & unpack GSHHS data to WD? "TRUE" else absolute/relative reference to GSHHS_shp folder, including that folder
zipvers = "2.3.7", # GSHHS version, in case it updates. Please email developer if this is incorrect
savedir = getwd(), # save outputs to a temporary directory (default) else
# change to current directory with getwd() or elsewhere e.g. "/home/me/folder"
savename = "Crop_Map", #shapefile save-name without the .shp
res = "f", # resolution, 1:5 (low:high) OR c,l,i,h,f (coarse, low, intermediate, high, full) or "CALC" to calculate based on bounds
extrabounds = FALSE)
library(st_read)
library(sf)
gbm.basemap(bounds = c(-81.7638756850148098, # region to crop to: c(xmin,xmax,ymin,ymax)
-80.3334710825244116, # from andrea shapefiles properties in qgis
24.7600058598826394,
25.9785528161596062),
# grids = NULL, # if bounds unspecified, name your grids database here
# gridslat = NULL, # if bounds unspecified, specify which column in grids is latitude
# gridslon = NULL, # if bounds unspecified, specify which column in grids is longitude
getzip = TRUE, # download & unpack GSHHS data to WD? "TRUE" else absolute/relative reference to GSHHS_shp folder, including that folder
zipvers = "2.3.7", # GSHHS version, in case it updates. Please email developer if this is incorrect
savedir = getwd(), # save outputs to a temporary directory (default) else
# change to current directory with getwd() or elsewhere e.g. "/home/me/folder"
savename = "Crop_Map", #shapefile save-name without the .shp
res = "f", # resolution, 1:5 (low:high) OR c,l,i,h,f (coarse, low, intermediate, high, full) or "CALC" to calculate based on bounds
extrabounds = FALSE)
setwd("/home/simon/Documents/Si Work/PostDoc Work/Kroetz & Dedman Sawfish BRT/Mapping/gbm.basemap_coastline/")
library(gbm.auto)
library(devtools)
install_github("SimonDedman/gbm.auto")
library(gbm.auto)
# source('~/Dropbox/Galway/Analysis/R/gbm.auto/R/gbm.basemap.R')
gbm.basemap(bounds = c(-81.7638756850148098, # region to crop to: c(xmin,xmax,ymin,ymax)
-80.3334710825244116, # from andrea shapefiles properties in qgis
24.7600058598826394,
25.9785528161596062),
# grids = NULL, # if bounds unspecified, name your grids database here
# gridslat = NULL, # if bounds unspecified, specify which column in grids is latitude
# gridslon = NULL, # if bounds unspecified, specify which column in grids is longitude
getzip = TRUE, # download & unpack GSHHS data to WD? "TRUE" else absolute/relative reference to GSHHS_shp folder, including that folder
zipvers = "2.3.7", # GSHHS version, in case it updates. Please email developer if this is incorrect
savedir = getwd(), # save outputs to a temporary directory (default) else
# change to current directory with getwd() or elsewhere e.g. "/home/me/folder"
savename = "Crop_Map", #shapefile save-name without the .shp
res = "f", # resolution, 1:5 (low:high) OR c,l,i,h,f (coarse, low, intermediate, high, full) or "CALC" to calculate based on bounds
extrabounds = FALSE)
library(shapefiles)
# source('~/Dropbox/Galway/Analysis/R/gbm.auto/R/gbm.basemap.R')
gbm.basemap(bounds = c(-81.7638756850148098, # region to crop to: c(xmin,xmax,ymin,ymax)
-80.3334710825244116, # from andrea shapefiles properties in qgis
24.7600058598826394,
25.9785528161596062),
# grids = NULL, # if bounds unspecified, name your grids database here
# gridslat = NULL, # if bounds unspecified, specify which column in grids is latitude
# gridslon = NULL, # if bounds unspecified, specify which column in grids is longitude
getzip = TRUE, # download & unpack GSHHS data to WD? "TRUE" else absolute/relative reference to GSHHS_shp folder, including that folder
zipvers = "2.3.7", # GSHHS version, in case it updates. Please email developer if this is incorrect
savedir = getwd(), # save outputs to a temporary directory (default) else
# change to current directory with getwd() or elsewhere e.g. "/home/me/folder"
savename = "Crop_Map", #shapefile save-name without the .shp
res = "f", # resolution, 1:5 (low:high) OR c,l,i,h,f (coarse, low, intermediate, high, full) or "CALC" to calculate based on bounds
extrabounds = FALSE)
getwd()
source('~/Dropbox/Galway/Analysis/R/gbm.auto/R/gbm.basemap.R')
library(devtools)
document()
build()
setwd("/home/simon/Documents/Si Work/PostDoc Work/Kroetz & Dedman Sawfish BRT/Mapping/gbm.basemap_coastline/")
library(devtools)
install_github("SimonDedman/gbm.auto")
library(gbm.auto)
gbm.basemap
# library(shapefiles) # fix issue in gbm.auto
# source('~/Dropbox/Galway/Analysis/R/gbm.auto/R/gbm.basemap.R')
gbm.basemap(bounds = c(-81.7638756850148098, # region to crop to: c(xmin,xmax,ymin,ymax)
-80.3334710825244116, # from andrea shapefiles properties in qgis
24.7600058598826394,
25.9785528161596062),
# grids = NULL, # if bounds unspecified, name your grids database here
# gridslat = NULL, # if bounds unspecified, specify which column in grids is latitude
# gridslon = NULL, # if bounds unspecified, specify which column in grids is longitude
getzip = TRUE, # download & unpack GSHHS data to WD? "TRUE" else absolute/relative reference to GSHHS_shp folder, including that folder
zipvers = "2.3.7", # GSHHS version, in case it updates. Please email developer if this is incorrect
savedir = getwd(), # save outputs to a temporary directory (default) else
# change to current directory with getwd() or elsewhere e.g. "/home/me/folder"
savename = "Crop_Map", #shapefile save-name without the .shp
res = "f", # resolution, 1:5 (low:high) OR c,l,i,h,f (coarse, low, intermediate, high, full) or "CALC" to calculate based on bounds
extrabounds = FALSE)
getwd()
# library(shapefiles) # fix issue in gbm.auto
# source('~/Dropbox/Galway/Analysis/R/gbm.auto/R/gbm.basemap.R')
gbm.basemap(bounds = c(-81.7638756850148098, # region to crop to: c(xmin,xmax,ymin,ymax)
-80.3334710825244116, # from andrea shapefiles properties in qgis
24.7600058598826394,
25.9785528161596062),
# grids = NULL, # if bounds unspecified, name your grids database here
# gridslat = NULL, # if bounds unspecified, specify which column in grids is latitude
# gridslon = NULL, # if bounds unspecified, specify which column in grids is longitude
getzip = TRUE, # download & unpack GSHHS data to WD? "TRUE" else absolute/relative reference to GSHHS_shp folder, including that folder
zipvers = "2.3.7", # GSHHS version, in case it updates. Please email developer if this is incorrect
savedir = "/home/simon/Documents/Si Work/PostDoc Work/Kroetz & Dedman Sawfish BRT/Mapping/gbm.basemap_coastline", # save outputs to a temporary directory (default) else
# change to current directory with getwd() or elsewhere e.g. "/home/me/folder"
savename = "Crop_Map", #shapefile save-name without the .shp
res = "f", # resolution, 1:5 (low:high) OR c,l,i,h,f (coarse, low, intermediate, high, full) or "CALC" to calculate based on bounds
extrabounds = FALSE)
getwd()
library(gbm.auto)
# library(shapefiles) # fix issue in gbm.auto
# source('~/Dropbox/Galway/Analysis/R/gbm.auto/R/gbm.basemap.R')
gbm.basemap(bounds = c(-81.7638756850148098, # region to crop to: c(xmin,xmax,ymin,ymax)
-80.3334710825244116, # from andrea shapefiles properties in qgis
24.7600058598826394,
25.9785528161596062),
# grids = NULL, # if bounds unspecified, name your grids database here
# gridslat = NULL, # if bounds unspecified, specify which column in grids is latitude
# gridslon = NULL, # if bounds unspecified, specify which column in grids is longitude
getzip = TRUE, # download & unpack GSHHS data to WD? "TRUE" else absolute/relative reference to GSHHS_shp folder, including that folder
zipvers = "2.3.7", # GSHHS version, in case it updates. Please email developer if this is incorrect
savedir = "/home/simon/Documents/Si Work/PostDoc Work/Kroetz & Dedman Sawfish BRT/Mapping/gbm.basemap_coastline", # save outputs to a temporary directory (default) else
# change to current directory with getwd() or elsewhere e.g. "/home/me/folder"
savename = "Crop_Map", #shapefile save-name without the .shp
res = "f", # resolution, 1:5 (low:high) OR c,l,i,h,f (coarse, low, intermediate, high, full) or "CALC" to calculate based on bounds
extrabounds = FALSE)
# library(shapefiles) # fix issue in gbm.auto
# source('~/Dropbox/Galway/Analysis/R/gbm.auto/R/gbm.basemap.R')
gbm.basemap(bounds = c(-81.7638756850148098, # region to crop to: c(xmin,xmax,ymin,ymax)
-80.3334710825244116, # from andrea shapefiles properties in qgis
24.7600058598826394,
25.9785528161596062),
# grids = NULL, # if bounds unspecified, name your grids database here
# gridslat = NULL, # if bounds unspecified, specify which column in grids is latitude
# gridslon = NULL, # if bounds unspecified, specify which column in grids is longitude
getzip = "GSHHS_shp", # download & unpack GSHHS data to WD? "TRUE" else absolute/relative reference to GSHHS_shp folder, including that folder
zipvers = "2.3.7", # GSHHS version, in case it updates. Please email developer if this is incorrect
savedir = "/home/simon/Documents/Si Work/PostDoc Work/Kroetz & Dedman Sawfish BRT/Mapping/gbm.basemap_coastline", # save outputs to a temporary directory (default) else
# change to current directory with getwd() or elsewhere e.g. "/home/me/folder"
savename = "Crop_Map", #shapefile save-name without the .shp
res = "f", # resolution, 1:5 (low:high) OR c,l,i,h,f (coarse, low, intermediate, high, full) or "CALC" to calculate based on bounds
extrabounds = FALSE)
source('~/Dropbox/Galway/Analysis/R/gbm.auto/R/gbm.basemap.R')
library(devtools)
document()
build()
setwd("/home/simon/Documents/Si Work/PostDoc Work/Kroetz & Dedman Sawfish BRT/Mapping/gbm.basemap_coastline/")
library(devtools)
install_github("SimonDedman/gbm.auto")
library(gbm.auto)
# library(shapefiles) # fix issue in gbm.auto
# source('~/Dropbox/Galway/Analysis/R/gbm.auto/R/gbm.basemap.R')
gbm.basemap(bounds = c(-81.7638756850148098, # region to crop to: c(xmin,xmax,ymin,ymax)
-80.3334710825244116, # from andrea shapefiles properties in qgis
24.7600058598826394,
25.9785528161596062),
# grids = NULL, # if bounds unspecified, name your grids database here
# gridslat = NULL, # if bounds unspecified, specify which column in grids is latitude
# gridslon = NULL, # if bounds unspecified, specify which column in grids is longitude
getzip = "GSHHS_shp", # download & unpack GSHHS data to WD? "TRUE" else absolute/relative reference to GSHHS_shp folder, including that folder
zipvers = "2.3.7", # GSHHS version, in case it updates. Please email developer if this is incorrect
savedir = "/home/simon/Documents/Si Work/PostDoc Work/Kroetz & Dedman Sawfish BRT/Mapping/gbm.basemap_coastline", # save outputs to a temporary directory (default) else
# change to current directory with getwd() or elsewhere e.g. "/home/me/folder"
savename = "Crop_Map", #shapefile save-name without the .shp
res = "f", # resolution, 1:5 (low:high) OR c,l,i,h,f (coarse, low, intermediate, high, full) or "CALC" to calculate based on bounds
extrabounds = FALSE)
source('~/Dropbox/Galway/Analysis/R/gbm.auto/R/gbm.basemap.R')
build()
library(devtools)
build()
document()
build()
setwd("/home/simon/Documents/Si Work/PostDoc Work/Kroetz & Dedman Sawfish BRT/Mapping/gbm.basemap_coastline/")
library(devtools)
install_github("SimonDedman/gbm.auto")
gbm.basemap
setwd("/home/simon/Documents/Si Work/PostDoc Work/Kroetz & Dedman Sawfish BRT/Mapping/gbm.basemap_coastline/")
library(gbm.auto)
# library(shapefiles) # fix issue in gbm.auto
# source('~/Dropbox/Galway/Analysis/R/gbm.auto/R/gbm.basemap.R')
gbm.basemap(bounds = c(-81.7638756850148098, # region to crop to: c(xmin,xmax,ymin,ymax)
-80.3334710825244116, # from andrea shapefiles properties in qgis
24.7600058598826394,
25.9785528161596062),
# grids = NULL, # if bounds unspecified, name your grids database here
# gridslat = NULL, # if bounds unspecified, specify which column in grids is latitude
# gridslon = NULL, # if bounds unspecified, specify which column in grids is longitude
getzip = "GSHHS_shp", # download & unpack GSHHS data to WD? "TRUE" else absolute/relative reference to GSHHS_shp folder, including that folder
zipvers = "2.3.7", # GSHHS version, in case it updates. Please email developer if this is incorrect
savedir = "/home/simon/Documents/Si Work/PostDoc Work/Kroetz & Dedman Sawfish BRT/Mapping/gbm.basemap_coastline", # save outputs to a temporary directory (default) else
# change to current directory with getwd() or elsewhere e.g. "/home/me/folder"
savename = "Crop_Map", #shapefile save-name without the .shp
res = "f", # resolution, 1:5 (low:high) OR c,l,i,h,f (coarse, low, intermediate, high, full) or "CALC" to calculate based on bounds
extrabounds = FALSE)
source('~/Dropbox/Galway/Analysis/R/gbm.auto/R/gbm.basemap.R')
document()
library(devtools)
document()
build()
release()
if(TRUE && !print(1) ) {print(2)} else {print(3)}
if(TRUE && print(1) ) {print(2)} else {print(3)}
if(print(1) )
if(print(1) ) print(2)
print(1)
!print(1)
isTRUE(print(1))
isTRUE(!print(1))
if (!print(1) & print(2)) print(3)
isTRUE(!print(1) & print(2))
isTRUE(!print(1) && print(2))
if(TRUE && print(1) ) {print(2)} else {print(3)}
if(TRUE && !print(1) ) {print(2)} else {print(3)}
if(TRUE) print("yay") else "nay"
if(FALSE) print("yay") else "nay"
if(c(TRUE, FALSE)) print("yay") else "nay"
if(c(TRUE & FALSE)) print("yay") else "nay"
if(TRUE & FALSE) print("yay") else "nay"
if(c(TRUE, TRUE) & c(TRUE, TRUE)) print("yay") else "nay"
scope
c(TRUE, TRUE) & c(TRUE, TRUE)
c(TRUE, TRUE) & c(TRUE, FALSE)
if(c(TRUE, TRUE) & c(TRUE, FALSE)) print("yay") else "nay"
if(c(TRUE, TRUE) && c(TRUE, FALSE)) print("yay") else "nay"
if(TRUE & FALSE) print("yay") else "nay"
if(c(TRUE) & c(FALSE)) print("yay") else "nay"
gaus <- TRUE
if(gaus) print("yay") else print("nay")
if(gaus == TRUE) print("yay") else print("nay")
if(gaus == FALSE) print("yay") else print("nay")
if(!gaus) print("yay") else print("nay")
tmp <- data.frame(columna = runif(100), columnb = runif(100), mike = runif(100), meg = runif(100), simon = runif(100))
tmp$column
tmp$columna
tmp$mik
tmp$mi
tmp$m
tmp$me
tmp$meg
tmp$s
source('~/Dropbox/Galway/Analysis/R/gbm.auto/R/gbm.basemap.R')
library(devtools)
document()
build()
release()
library(devtools)
document()
build()
release()
library(gbm.auto)
detach("package:gbm.auto", unload = TRUE)
install.packages(c("broom", "cachem", "cli", "cpp11", "crayon", "crul", "dbplyr", "dplyr", "gert", "lifecycle", "matrixStats", "mime", "pixmap", "promises", "rappdirs", "RcppArmadillo", "rgl", "testthat", "tibble", "usethis", "waldo", "xfun"))
library(gbm.auto)
data(samples)
samples <- data(samples)
data(samples)
force(samples)
View(samples)
