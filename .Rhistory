c(4:11,15,20,24,28,32,39),
4:10,
4:10,
4:10,
4:10),
tcs = list(c(2,14),
c(2,14),
13,
c(2,14),
c(2,6),
c(2,6),
6,
c(2,6)),
lrs = list(c(0.01,0.005),
c(0.01,0.005),
0.005,
c(0.01,0.005),
0.005,
0.005,
0.001,
0.005),
ZIs = rep(TRUE,8),
savegbms = rep(FALSE, 8),
varints = rep(FALSE, 8),
RSBs = rep(FALSE, 8),
BnWs = rep(FALSE, 8),
shape = shape,
zeroes = rep(FALSE,8))
setwd("/home/simon/Dropbox/Galway/Project Sections/2. Spatial subsets inc fishery data/Data/Maps/Testbench/Adult_Females/")
gbm.auto(grids = mygrids,
samples = Adult_Females,
resvar = 11,
expvar = 4:10,
tc = c(2,6),
lr = 0.005,
savegbm = FALSE,
varint = FALSE,
RSB = FALSE,
BnW = FALSE,
shape = shape)
gbm.auto(grids = mygrids,
samples = Adult_Females,
resvar = 11,
expvar = 4:10,
tc = c(6),
lr = 0.001,
savegbm = FALSE,
varint = FALSE,
RSB = FALSE,
BnW = FALSE,
shape = shape)
gbm.auto(grids = mygrids,
samples = Adult_Females,
resvar = 12,
expvar = 4:10,
tc = c(2,6),
lr = 0.001,
savegbm = FALSE,
varint = FALSE,
RSB = FALSE,
BnW = FALSE,
shape = shape)
gbm.auto(grids = mygrids,
samples = Adult_Females,
resvar = 13,
expvar = 4:10,
tc = c(2,6),
lr = 0.001,
savegbm = FALSE,
varint = FALSE,
RSB = FALSE,
BnW = FALSE,
shape = shape)
gbm.auto(grids = mygrids,
samples = Adult_Females,
resvar = 13,
expvar = 4:10,
tc = c(6),
lr = 0.001,
savegbm = FALSE,
varint = FALSE,
RSB = FALSE,
BnW = FALSE,
shape = shape)
gbm.auto(grids = mygrids,
samples = Adult_Females,
resvar = 13,
expvar = 4:10,
tc = c(6),
lr = 0.0005,
savegbm = FALSE,
varint = FALSE,
RSB = FALSE,
BnW = FALSE,
shape = shape)
gbm.auto(grids = mygrids,
samples = Adult_Females,
resvar = 13,
expvar = 4:10,
tc = c(6),
lr = 0.0001,
savegbm = FALSE,
varint = FALSE,
RSB = FALSE,
BnW = FALSE,
shape = shape)
gbm.auto(grids = mygrids,
samples = Adult_Females,
resvar = 13,
expvar = 4:10,
tc = c(6),
lr = 0.00001,
savegbm = FALSE,
varint = FALSE,
RSB = FALSE,
BnW = FALSE,
shape = shape)
gbm.auto(grids = mygrids,
samples = Adult_Females,
resvar = 14,
expvar = 4:10,
tc = c(6),
lr = 0.005,
savegbm = FALSE,
varint = FALSE,
RSB = FALSE,
BnW = FALSE,
shape = shape)
gbm.auto(grids = mygrids,
samples = Adult_Females,
resvar = 14,
expvar = 4:10,
tc = c(6),
lr = 0.0001,
savegbm = FALSE,
varint = FALSE,
RSB = FALSE,
BnW = FALSE,
shape = shape)
library("gbm.auto")
mygrids <- gbm.auto::grids
setwd("/home/simon/Dropbox/Galway/Project Sections/2. Spatial subsets inc fishery data/Data/Maps/Testbench")
library(mapplots)
data(coast)
shape <- coast
mygrids <- read.csv("/home/simon/Dropbox/Galway/Analysis/R/gbm.auto data csvs/All Sheets/Grain/grids.csv")
Juveniles <- read.csv("/home/simon/Dropbox/Galway/Analysis/R/gbm.auto data csvs/All Sheets/Grain/Juveniles.csv")
Adult_Females <- read.csv("/home/simon/Dropbox/Galway/Analysis/R/gbm.auto data csvs/All Sheets/Grain/Adult_Females.csv") # single or vector of samples data csv files corresponding to subsets
setwd("/home/simon/Dropbox/Galway/Project Sections/2. Spatial subsets inc fishery data/Data/Maps/Testbench")
setwd("/home/simon/Dropbox/Galway/Project Sections/2. Spatial subsets inc fishery data/Data/Maps/Testbench/Adult_Females/")
View(Adult_Females)
gbm.auto(grids = mygrids,
samples = Adult_Females,
resvar = 14,
expvar = 4:10,
tc = c(6),
lr = 0.00001,
savegbm = FALSE,
varint = FALSE,
RSB = FALSE,
BnW = FALSE,
shape = shape)
gbm.auto(grids = mygrids,
samples = Adult_Females,
resvar = 14,
expvar = 4:10,
tc = c(6),
lr = list(0.0005,0.000001),
savegbm = FALSE,
varint = FALSE,
RSB = FALSE,
BnW = FALSE,
shape = shape)
gbm.auto(grids = mygrids,
samples = Adult_Females,
resvar = 14,
expvar = 4:10,
tc = c(6),
lr = list(0.001,0.00000001),
savegbm = FALSE,
varint = FALSE,
RSB = FALSE,
BnW = FALSE,
shape = shape)
gbm.auto(grids = mygrids,
samples = Adult_Females,
resvar = 14,
expvar = 4:10,
tc = c(6),
lr = list(0.001,0.000000001),
savegbm = FALSE,
varint = FALSE,
RSB = FALSE,
BnW = FALSE,
shape = shape)
gbm.auto(grids = mygrids,
samples = Adult_Females,
resvar = 14,
expvar = 4:10,
tc = c(6),
lr = list(0.001,0.000000001),
savegbm = FALSE,
varint = FALSE,
RSB = FALSE,
BnW = FALSE,
simp = F,
shape = shape)
gbm.auto(grids = mygrids,
samples = Adult_Females,
resvar = 13,
expvar = 4:10,
tc = c(6),
lr = list(0.001,0.000001),
savegbm = FALSE,
varint = FALSE,
RSB = FALSE,
BnW = FALSE,
simp = T,
shape = shape)
gbm.auto(grids = mygrids,
samples = Adult_Females,
resvar = 13,
expvar = 4:10,
tc = c(6),
lr = list(0.001,0.0000001),
savegbm = FALSE,
varint = FALSE,
RSB = FALSE,
BnW = FALSE,
simp = T,
shape = shape)
gbm.auto(grids = mygrids,
samples = Adult_Females,
resvar = 13,
expvar = 4:10,
tc = c(6),
lr = list(0.001,0.0000001),
savegbm = FALSE,
varint = FALSE,
RSB = FALSE,
BnW = FALSE,
simp = T,
shape = shape,
n.trees = 10)
gbm.auto(grids = mygrids,
samples = Adult_Females,
resvar = 13,
expvar = 4:10,
tc = c(6),
lr = list(0.001,0.0000001),
savegbm = FALSE,
varint = FALSE,
RSB = FALSE,
BnW = FALSE,
simp = T,
shape = shape,
n.trees = 5)
gbm.auto(grids = mygrids,
samples = Adult_Females,
resvar = 14,
expvar = 4:10,
tc = c(6),
lr = 0.0001,
savegbm = FALSE,
varint = FALSE,
RSB = FALSE,
BnW = FALSE,
simp = T,
shape = shape,
gaus = F)
gbm.auto(grids = mygrids,
samples = Adult_Females,
resvar = 14,
expvar = 4:10,
tc = c(6),
lr = 0.0005,
savegbm = FALSE,
varint = FALSE,
RSB = FALSE,
BnW = FALSE,
simp = T,
shape = shape,
gaus = F)
traceback()
gbm.auto(grids = mygrids,
samples = Adult_Females,
resvar = 14,
expvar = 4:10,
tc = c(6),
lr = 0.0005,
savegbm = FALSE,
varint = FALSE,
RSB = FALSE,
BnW = FALSE,
simp = F,
shape = shape,
gaus = F)
gbm.auto(grids = mygrids,
samples = Adult_Females,
resvar = 13, # blonde
expvar = 4:10,
tc = c(6),
lr = list(0.005,0.00001),
savegbm = FALSE,
varint = FALSE,
RSB = FALSE,
BnW = FALSE,
simp = F,
shape = shape,
gaus = T)
gbm.auto(grids = mygrids,
samples = Adult_Females,
resvar = 13, # blonde
expvar = 4:10,
tc = c(6),
lr = list(0.0001,0.00001),
savegbm = FALSE,
varint = FALSE,
RSB = FALSE,
BnW = FALSE,
simp = F,
shape = shape,
gaus = T)
gbm.auto(grids = mygrids,
samples = Adult_Females,
resvar = 13, # blonde
expvar = 4:10,
tc = c(6),
lr = 0.0001,
savegbm = FALSE,
varint = FALSE,
RSB = FALSE,
BnW = FALSE,
simp = F,
shape = shape,
gaus = F)
getwd()
setwd("/home/simon/Dropbox/Galway/Project Sections/2. Spatial subsets inc fishery data/Data/Maps/Testbench")
gbm.cons(mygrids = mygrids,
subsets = c("Juveniles","Adult_Females"), # Subset names
gbmautos = FALSE, resvars = c(44:47,11:14))
traceback()
source('~/Dropbox/Galway/Analysis/R/gbm.auto/R/gbm.cons.R')
setwd("/home/simon/Dropbox/Galway/Project Sections/2. Spatial subsets inc fishery data/Data/Maps/Testbench")
gbm.cons(mygrids = mygrids,
subsets = c("Juveniles","Adult_Females"), # Subset names
gbmautos = FALSE, resvars = c(44:47,11:14))
library("gbm.auto")
library(mapplots)
data(coast)
shape <- coast
mygrids <- read.csv("/home/simon/Dropbox/Galway/Analysis/R/gbm.auto data csvs/All Sheets/Grain/grids.csv")
gbm.cons(mygrids = mygrids,
subsets = c("Juveniles","Adult_Females"), # Subset names
gbmautos = FALSE, resvars = c(44:47,11:14), shape = shape)
Juveniles <- read.csv("/home/simon/Dropbox/Galway/Analysis/R/gbm.auto data csvs/All Sheets/Grain/Juveniles.csv")
Adult_Females <- read.csv("/home/simon/Dropbox/Galway/Analysis/R/gbm.auto data csvs/All Sheets/Grain/Adult_Females.csv") # single or vector of samples data csv files corresponding to subsets
setwd("/home/simon/Dropbox/Galway/Project Sections/2. Spatial subsets inc fishery data/Data/Maps/Testbench")
gbm.cons(mygrids = mygrids,
subsets = c("Juveniles","Adult_Females"), # Subset names
gbmautos = FALSE, resvars = c(44:47,11:14), shape = shape)
library("gbm.auto", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.4")
detach("package:gbm.auto", unload=TRUE)
library("devtools", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.4")
document()
setwd("/home/simon/Dropbox/Galway/Project Sections/5. Intro & Conclusion/Extra graphics/CofV/")
library("gbm.auto")
mygrids <- gbm.auto::grids # load grids
mysamples <- gbm.auto::samples # load samples
library(mapplots)
data(coast)
shape <- coast
gbmlooptest <- gbm.loop(loops = 10, # the number of loops required, integer
savecsv = F, # save the variances in simple & extended format
calcpreds = T,
varmap = T, # create a map of the variance outputs?
measure = "CPUE", # map legend, variance of what? Default CPUE
cleanup = F, # remove gbm.auto-generated directory each loop?
grids = mygrids,         # explantory data to predict to. Import with (e.g.)
# read.csv and specify object name.
samples = mysamples,  # explanatory and response variables to predict from.
# Keep col names short, no odd characters, starting numerals or terminal periods
# Spaces may be converted to periods in directory names, underscores won't.
# Can be a subset
expvar = c(4:10),               # list of column numbers of explanatory variables in
# 'samples', expected e.g. c(1,35,67,etc.). No default
resvar = 11,               # column number of response variable (e.g. CPUE) in
# samples. Expected, e.g. 12. No default. Column name should be species name
tc = 2,            # permutations of tree complexity allowed, can be a
# vector with the largest sized number no larger than the number of
# explanatory variables e.g. c(2,7), or a list of 2 single numbers or vectors,
# the first to be passed to the binary BRT, the second to the Gaussian, e.g.
# tc = list(c(2,6), 2) or list(6, c(2,6))
lr = 0.01,   # permutations of learning rate allowed. Can be a
# vector or a list of 2 single numbers or vectors, the first to be passed to
# the binary BRT, the second to the Gaussian, e.g.
# lr = list(c(0.01,0.02),0.0001) or list(0.01,c(0.001, 0.0005))
bf = 0.5,             # permutations of bag fraction allowed, can be single
# number, vector or list, per tc and lr
ZI = "CHECK",         # are data zero-inflated? TRUE/FALSE/"CHECK".
# TRUE: delta BRT, log-normalised Gaus, reverse log-norm and bias corrected.
# FALSE: do Gaussian only, no log-normalisation.
# CHECK: Tests data for you. Default is TRUE.
simp = F,          # try simplfying best BRTs?
gridslat = 2,         # column number for latitude in 'grids'
gridslon = 1,         # column number for longitude in 'grids'
cols = grey.colors(1,1,1), # barplot colour vector. Assignment in order of
# explanatory variables. Default 1*white: white bars black borders. '1*' repeats
linesfiles = F,   # save individual line plots' data as csv's?
savegbm = F,       # save gbm objects and make available in environment after running? Open with load("Bin_Best_Model")
varint = F,        # calculate variable interactions? Default:TRUE, FALSE
# for error "contrasts can be applied only to factors with 2 or more levels"
map = T,           # save abundance map png files?
shape = shape,      # set coast shapefile, else downloaded and autogenerated
RSB = F,           # run Unrepresentativeness surface builder?
BnW = F,           # repeat maps in black and white e.g. for print journals
alerts = T,        # play sounds to mark progress steps
pngtype = "cairo-png"
) # filetype for png files, alternatively try "quartz"
traceback()
source('~/Dropbox/Galway/Analysis/R/gbm.auto/R/gbm.loop.R')
gbmlooptest <- gbm.loop(loops = 10, # the number of loops required, integer
savecsv = F, # save the variances in simple & extended format
calcpreds = T,
varmap = T, # create a map of the variance outputs?
measure = "CPUE", # map legend, variance of what? Default CPUE
cleanup = F, # remove gbm.auto-generated directory each loop?
grids = mygrids,         # explantory data to predict to. Import with (e.g.)
# read.csv and specify object name.
samples = mysamples,  # explanatory and response variables to predict from.
# Keep col names short, no odd characters, starting numerals or terminal periods
# Spaces may be converted to periods in directory names, underscores won't.
# Can be a subset
expvar = c(4:10),               # list of column numbers of explanatory variables in
# 'samples', expected e.g. c(1,35,67,etc.). No default
resvar = 11,               # column number of response variable (e.g. CPUE) in
# samples. Expected, e.g. 12. No default. Column name should be species name
tc = 2,            # permutations of tree complexity allowed, can be a
# vector with the largest sized number no larger than the number of
# explanatory variables e.g. c(2,7), or a list of 2 single numbers or vectors,
# the first to be passed to the binary BRT, the second to the Gaussian, e.g.
# tc = list(c(2,6), 2) or list(6, c(2,6))
lr = 0.01,   # permutations of learning rate allowed. Can be a
# vector or a list of 2 single numbers or vectors, the first to be passed to
# the binary BRT, the second to the Gaussian, e.g.
# lr = list(c(0.01,0.02),0.0001) or list(0.01,c(0.001, 0.0005))
bf = 0.5,             # permutations of bag fraction allowed, can be single
# number, vector or list, per tc and lr
ZI = "CHECK",         # are data zero-inflated? TRUE/FALSE/"CHECK".
# TRUE: delta BRT, log-normalised Gaus, reverse log-norm and bias corrected.
# FALSE: do Gaussian only, no log-normalisation.
# CHECK: Tests data for you. Default is TRUE.
simp = F,          # try simplfying best BRTs?
gridslat = 2,         # column number for latitude in 'grids'
gridslon = 1,         # column number for longitude in 'grids'
cols = grey.colors(1,1,1), # barplot colour vector. Assignment in order of
# explanatory variables. Default 1*white: white bars black borders. '1*' repeats
linesfiles = T,   # save individual line plots' data as csv's?
savegbm = F,       # save gbm objects and make available in environment after running? Open with load("Bin_Best_Model")
varint = F,        # calculate variable interactions? Default:TRUE, FALSE
# for error "contrasts can be applied only to factors with 2 or more levels"
map = T,           # save abundance map png files?
shape = shape,      # set coast shapefile, else downloaded and autogenerated
RSB = F,           # run Unrepresentativeness surface builder?
BnW = F,           # repeat maps in black and white e.g. for print journals
alerts = T,        # play sounds to mark progress steps
pngtype = "cairo-png"
) # filetype for png files, alternatively try "quartz"
source('~/Dropbox/Galway/Analysis/R/gbm.auto/R/gbm.loop.R')
gbmlooptest <- gbm.loop(grids = mygrids,
samples = mysamples,
expvar = c(4:10),
resvar = 11,
simp = F,
shape = shape)
traceback()
getwd()
source('~/Dropbox/Galway/Analysis/R/gbm.auto/R/gbm.loop.R')
setwd("/home/simon/Dropbox/Galway/Project Sections/5. Intro & Conclusion/Extra graphics/CofV/")
library("gbm.auto")
mygrids <- gbm.auto::grids # load grids
mysamples <- gbm.auto::samples # load samples
setwd("/home/simon/Dropbox/Galway/Project Sections/5. Intro & Conclusion/Extra graphics/CofV/")
# library("shapefiles")
# Crop_Map <- read.shapefile("/home/simon/Desktop/gbm temp/CroppedMap/Crop_Map")
library(mapplots)
data(coast)
shape <- coast
gbmlooptest <- gbm.loop(grids = mygrids,
samples = mysamples,
expvar = c(4:10),
resvar = 11,
simp = F,
shape = shape)
source('~/Dropbox/Galway/Analysis/R/gbm.auto/Gbm.auto_extras/gbm.loop_functionrun.R')
source('~/Dropbox/Galway/Analysis/R/gbm.auto/R/gbm.loop.R')
("/home/simon/Dropbox/Galway/Project Sections/5. Intro & Conclusion/Extra graphics/CofV/")
setwd("/home/simon/Dropbox/Galway/Project Sections/5. Intro & Conclusion/Extra graphics/CofV/")
gbmlooptest <- gbm.loop(grids = mygrids,
samples = mysamples,
expvar = c(4:10),
resvar = 11,
simp = F,
shape = shape)
source('~/Dropbox/Galway/Analysis/R/gbm.auto/R/gbm.cons.R')
gbm.plot
source('~/Dropbox/Galway/Analysis/R/gbm.auto/R/gbm.loop.R')
library("devtools", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.4")
document()
install_github("SimonDedman/gbm.auto")
library("devtools", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.4")
document()
