maploops = c("Combo","Biomass","Effort"), # sort loops to run
savethis = TRUE, # export all data as csv?
HRMSY = 0.15, # maximum % of each goodcols stock which can be removed yearly,
# as decimal (0.15 = 15%). Must protect remainder: 1-HRMSY.
# Single number or vector. If vector, Same order as goodcols
goodweight = NULL,  # single/vector weighting multiple(s) for goodcols array
badweight = NULL,  # ditto for badcols array
m = 1, # multiplication factor for Bpa units. 1000 to convert tonnes to kilos,
# 0.001 kilos to tonnes. Assumedly the same for all goodcols.
alerts = TRUE,  # play sounds to mark progress steps
BnW = FALSE,  # also produce greyscale images for print publications
shape = coast, #  set coastline shapefile, else uses British Isles. Generate your own with gbm.basemap
pngtype = "cairo-png") # addresses devtools::check's no visible binding for global variable https://cran.r-project.org/web/packages/data.table/vignettes/datatable-importing.html#globals
source('~/Dropbox/Galway/Analysis/R/gbm.auto/R/gbm.utils.R')
document()
library(devtools)
document()
source('~/Dropbox/Galway/Analysis/R/gbm.auto/R/gbm.utils.R')
document()
source('~/Dropbox/Galway/Analysis/R/gbm.auto/R/gbm.auto.R')
source('~/Dropbox/Galway/Analysis/R/gbm.auto/R/roc.R')
document()
library(devtools)
document()
build()
check()
source('~/Dropbox/Galway/Analysis/R/gbm.auto/R/gbm.rsb.R')
check()
devtools::run_examples()
source('~/Dropbox/Galway/Analysis/R/gbm.auto/R/gbm.basemap.R')
devtools::run_examples()
check()
source('~/Dropbox/Galway/Analysis/R/gbm.auto/R/gbm.map.R')
source('~/Dropbox/Galway/Analysis/R/gbm.auto/R/gbm.auto.R')
check()
library(devtools)
check()
?globalVariables
source('~/Dropbox/Galway/Analysis/R/gbm.auto/R/gbm.auto.R')
source('~/Dropbox/Galway/Analysis/R/gbm.auto/R/gbm.map.R')
library(devtools)
install_github("SimonDedman/gbm.auto", force = T)
library(gbm.auto)
check()
source('~/Dropbox/Galway/Analysis/R/gbm.auto/R/gbm.map.R')
document())
document()
library(devtools)
install_github("SimonDedman/gbm.auto", force = T)
library(gbm.auto)
cehck()
check()
source('~/Dropbox/Galway/Analysis/R/gbm.auto/R/gbm.auto.R')
source('~/Dropbox/Galway/Analysis/R/gbm.auto/R/gbm.map.R')
document()
library(devtools)
install_github("SimonDedman/gbm.auto", force = T)
check()
run_examples("gbm.basemap")
run_examples("gbm.basemap.R")
run_examples(gbm.basemap)
run_examples()
build()
document()
run_examples()
library(devtools)
run_examples()
library(devtools)
run_examples()
source('~/Dropbox/Galway/Analysis/R/gbm.auto/R/roc.R')
run_examples()
library(gbm.auto)
data(grids)
data(samples)
setwd("/home/simon/Desktop/gbmauto/")
library(shapefiles)
coast <- read.shapefile("/home/simon/Desktop/gbmauto/CroppedMap/Crop_Map")
getwd()
gbm.auto(grids = NULL,
samples = samples,
expvar = c(4:8, 10),
resvar = 11,
tc = 7,
lr = 0.005,
ZI = TRUE,
savegbm = TRUE,
multiplot = F,
linesfiles = F,
varint = F,
BnW = F)
getwd)()
getwd()
setwd("Cuckoo")
load("Bin_Best_Model")
Bin_Best_Model <- "Bin_Best_Model_Object"
source('~/Dropbox/Galway/Analysis/R/gbm.auto/R/gbm.predict.grids.R')
Bin_Preds <- gbm.predict.grids(model = get(Bin_Best_Model), # L1390
new.dat = grids,
want.grids = F,
sp.name = "Bin_Preds") #with want.grids=F this is just predict.gbm
save(bin_preds_original, file = "bin_preds_original")
save(Bin_Preds, file = "bin_preds_original")
Bin_Preds2 <- predict.gbm(model = get(Bin_Best_Model),
new.dat = grids,
n.trees = model$gbm.call$best.trees,
type = "response")
Bin_Preds <- gbm.predict.grids(model = get(Bin_Best_Model), # L1390
new.dat = grids,
want.grids = F,
sp.name = "Bin_Preds") #with want.grids=F this is just predict.gbm
Bin_Preds2 <- predict.gbm(object = get(Bin_Best_Model),
newdata = grids,
n.trees = model$gbm.call$best.trees,
type = "response")
Bin_Preds2 <- predict.gbm(object = get(Bin_Best_Model),
newdata = grids,
n.trees = get(Bin_Best_Model)$gbm.call$best.trees,
type = "response")
all.equal(Bin_Preds, Bin_Preds2)
source('~/Dropbox/Galway/Analysis/R/gbm.auto/R/gbm.auto.R')
build()
# gbm.predict.grids
# generate gbm object
library(devtools)
build()
check()
load("/home/simon/Dropbox/Galway/Analysis/R/gbm.auto/data/AllPreds_E.RData")
load("/home/simon/Dropbox/Galway/Analysis/R/gbm.auto/data/grids.RData")
load("/home/simon/Dropbox/Galway/Analysis/R/gbm.auto/data/AllScaledData.RData")
all.equal(AllPreds_E$Latitude, AllScaledData$Latitude)
all.equal(AllPreds_E$Latitude, AllScaledData$Latitude, grids$Latitude)
all.equal(AllPreds_E$Longitude, AllScaledData$Longitude, grids$Longitude)
all.equal(AllPreds_E$Effort, grids$Effort)
ecompare <- data.frame(AllPreds_E = AllPreds_E$Effort, grids = grids$Effort)
View(ecompare)
ecompare$diff <- ecompare$AllPreds_E - ecompare$grids
load("/home/simon/Dropbox/Galway/Analysis/R/gbm.auto/data/AllPreds_E.RData")
load("/home/simon/Dropbox/Galway/Analysis/R/gbm.auto/data/grids.RData")
load("/home/simon/Dropbox/Galway/Analysis/R/gbm.auto/data/AllScaledData.RData")
tmp <- data.frame(AllPreds_E_Latitude = AllPreds_E$Latitude,
AllScaledData_Latitude = AllScaledData$Latitude,
AllPreds_E_Longitude = AllPreds_E$Longitude,
AllScaledData_Longitude = AllScaledData$Longitude)
getwd()
setwd("/home/simon/Desktop/gbmauto/")
saveRDS(grids, file = "grids_gzip.RData", compress = "gzip")
saveRDS(grids, file = "grids_bzip2.RData", compress = "bzip2") # 5.1mb
saveRDS(tmp, file = "tmp.RData", compress = "gzip") # 4.2mb
load("/home/simon/Dropbox/Galway/Analysis/R/gbm.auto/data/Juveniles.RData")
load("/home/simon/Dropbox/Galway/Analysis/R/gbm.auto/data/samples.RData")
load("/home/simon/Dropbox/Galway/Analysis/R/gbm.auto/data/Adult_Females.RData")
saveRDS(grids, file = "grids_bzip2.RData", compress = "bzip2") # 4.2mb
saveRDS(Adult_Females, file = "Adult_Females_bzip2.RData", compress = "bzip2") # 4.2mb
saveRDS(AllPreds_E, file = "AllPreds_E_bzip2.RData", compress = "bzip2") # 4.2mb
saveRDS(AllScaledData, file = "AllScaledData_bzip2.RData", compress = "bzip2") # 4.2mb
saveRDS(Juveniles, file = "Juveniles_bzip2.RData", compress = "bzip2") # 4.2mb
saveRDS(samples, file = "samples_bzip2.RData", compress = "bzip2") # 4.2mb
build()
library(devtools)
build()
library(devtools)
build()
check()
load("/home/simon/Dropbox/Galway/Analysis/R/gbm.auto/data/Adult_Females.RData")
load("/home/simon/Dropbox/Galway/Analysis/R/gbm.auto/data/samples.RData")
load("/home/simon/Dropbox/Galway/Analysis/R/gbm.auto/data/Juveniles.RData")
load("/home/simon/Dropbox/Galway/Analysis/R/gbm.auto/data/AllScaledData.RData")
load("/home/simon/Dropbox/Galway/Analysis/R/gbm.auto/data/grids.RData")
load("/home/simon/Dropbox/Galway/Analysis/R/gbm.auto/data/AllPreds_E.RData")
build()
check()
load("/home/simon/Dropbox/Galway/Analysis/R/gbm.auto/data/AllPreds_E.RData")
AllPreds_E[1,]
AllPreds_E_sample <- AllPreds_E[sample(x = 1:length(AllPreds_E), size = (length(AllPreds_E)/3)),]
length(AllPreds_E)
AllPreds_E_sample <- AllPreds_E[sample(x = 1:nrow(AllPreds_E), size = (nrow(AllPreds_E)/3)),]
getwd()
setwd("/home/simon/Desktop/gbmauto/")
saveRDS(AllPreds_E_sample, file = "AllPreds_E.RData") # was 6.8mb now
AllPreds_E_sample <- AllPreds_E[1:75000,]
saveRDS(AllPreds_E_sample, file = "AllPreds_E.RData") # was 6.8mb now 4.6. 1/3 the rows but 2/3 the mb!
load("/home/simon/Dropbox/Galway/Analysis/R/gbm.auto/data/grids.RData")
grids_sample <- grids[1:75000,]
saveRDS(grids_sample, file = "grids.RData") # was 6.8mb now 1.7
load("/home/simon/Dropbox/Galway/Analysis/R/gbm.auto/data/AllScaledData.RData")
AllScaledData_sample <- AllScaledData[1:75000,]
saveRDS(AllScaledData_sample, file = "AllScaledData.RData") # was 5.1 now 1
load("/home/simon/Dropbox/Galway/Analysis/R/gbm.auto/data/Juveniles.RData")
load("/home/simon/Dropbox/Galway/Analysis/R/gbm.auto/data/samples.RData")
load("/home/simon/Dropbox/Galway/Analysis/R/gbm.auto/data/Adult_Females.RData")
build()
library(devtools)
build()
check()
# TOTALS: best of both: 13.7mb
readRDS("/home/simon/Dropbox/Galway/Analysis/R/gbm.auto/data/AllPreds_E.RData")
# TOTALS: best of both: 13.7mb
source("/home/simon/Dropbox/Galway/Analysis/R/gbm.auto/data/AllPreds_E.RData")
# TOTALS: best of both: 13.7mb
readr::read_rds("/home/simon/Dropbox/Galway/Analysis/R/gbm.auto/data/AllPreds_E.RData")
# TOTALS: best of both: 13.7mb
loadDb("/home/simon/Dropbox/Galway/Analysis/R/gbm.auto/data/AllPreds_E.RData")
check()
load("/home/simon/Dropbox/Galway/Analysis/R/gbm.auto/data/AllPreds_E.RData")
AllPreds_E_sample <- AllPreds_E[1:75000,]
setwd("/home/simon/Desktop/gbmauto/")
saveRDS(AllPreds_E_sample, file = "AllPreds_E.RDS") # was 6.8mb now 1.7
load("/home/simon/Dropbox/Galway/Analysis/R/gbm.auto/data/grids.RData")
grids_sample <- grids[1:75000,]
saveRDS(grids_sample, file = "grids.RDS") # was 5.1 now 1
load("/home/simon/Dropbox/Galway/Analysis/R/gbm.auto/data/AllScaledData.RData")
AllScaledData_sample <- AllScaledData[1:75000,]
saveRDS(AllScaledData_sample, file = "AllScaledData.RDS") # was 2.5 now 0.5
saveRDS(AllPreds_E_sample, file = "AllPreds_E.Rds") # was 6.8mb now 1.7
saveRDS(grids_sample, file = "grids.Rds") # was 5.1 now 1
saveRDS(AllScaledData_sample, file = "AllScaledData.Rds") # was 2.5 now 0.5
check()
load("/home/simon/Dropbox/Galway/Analysis/R/gbm.auto/data/Adult_Females.RData")
load("/home/simon/Dropbox/Galway/Analysis/R/gbm.auto/data/Juveniles.RData")
load("/home/simon/Dropbox/Galway/Analysis/R/gbm.auto/data/samples.RData")
load("/home/simon/Dropbox/Galway/Analysis/R/gbm.auto/data/Adult_Females.Rds")
setwd("/home/simon/Desktop/gbmauto/")
saveRDS(Adult_Females, file = "Adult_Females.Rds") # was 2.5 now 0.5
saveRDS(Juveniles, file = "Juveniles.Rds") # was 2.5 now 0.5
saveRDS(samples, file = "samples.Rds") # was 2.5 now 0.5
build()
library(devtools)
build()
check()
document()
build()
document()
setwd("/home/simon/Desktop/gbmauto/")
Adult_Females <- readRDS("/home/simon/Dropbox/Galway/Analysis/R/gbm.auto/data/Adult_Females.Rds")
AllPreds_E <- readRDS("/home/simon/Dropbox/Galway/Analysis/R/gbm.auto/data/AllPreds_E.Rds")
AllScaledData <- readRDS("/home/simon/Dropbox/Galway/Analysis/R/gbm.auto/data/AllScaledData.Rds")
grids <- readRDS("/home/simon/Dropbox/Galway/Analysis/R/gbm.auto/data/grids.Rds")
Juveniles <- readRDS("/home/simon/Dropbox/Galway/Analysis/R/gbm.auto/data/Juveniles.Rds")
samples <- readRDS("/home/simon/Dropbox/Galway/Analysis/R/gbm.auto/data/samples.Rds")
getwd()
save(grids, file = "grids.RData")
save(Juveniles, file = "Juveniles.RData")
save(AllPreds_E, file = "AllPreds_E.RData")
save(AllScaledData, file = "AllScaledData.RData")
library(devtools)
build()
document()
check()
R CMD build --resave-data
build()
check()
load("/home/simon/Dropbox/Galway/Analysis/R/gbm.auto/data/Adult_Females.RData")
load("/home/simon/Dropbox/Galway/Analysis/R/gbm.auto/data/samples.RData")
load("/home/simon/Dropbox/Galway/Analysis/R/gbm.auto/data/Juveniles.RData")
load("/home/simon/Dropbox/Galway/Analysis/R/gbm.auto/data/AllScaledData.RData")
load("/home/simon/Dropbox/Galway/Analysis/R/gbm.auto/data/grids.RData")
load("/home/simon/Dropbox/Galway/Analysis/R/gbm.auto/data/AllPreds_E.RData")
setwd("/home/simon/Desktop/gbmauto/")
save(grids, file = "grids.RData", compression_level = "xz")
save(AllPreds_E, file = "AllPreds_E.RData", compress = "xz")
save(grids, file = "grids.RData", compress = "xz")
save(AllPreds_E, file = "AllPreds_E.RData", compress = "xz")
save(AllScaledData, file = "AllScaledData.RData", compress = "xz")
save(Juveniles, file = "Juveniles.RData", compress = "xz")
save(samples, file = "samples.RData", compress = "xz")
save(Adult_Females, file = "Adult_Females.RData", compress = "xz")
library(devtools)
document()
build()
check()
usethis::use_readme_rmd()
install.packages("badgecreatr")
library(badgecreatr)
badgeplacer(location = ".", status = "active", githubaccount = SimonDedman, githubrepo = gbm.auto, branch = master, name = "README.Rmd")
badgeplacer(location = ".", status = "active", githubaccount = "SimonDedman", githubrepo = "gbm.auto", branch = master, name = "README.Rmd")
badgeplacer(location = ".", status = "active", githubaccount = "SimonDedman", githubrepo = "gbm.auto", branch = "master", name = "README.Rmd")
badgeplacer(location = ".", status = "active", githubaccount = "SimonDedman", githubrepo = "gbm.auto", name = "README.Rmd")
getwd()
badgeplacer(status = "active", githubaccount = "SimonDedman", githubrepo = "gbm.auto")
search_git(location = ".")
library(badgecreatr)
search_git(location = ".")
document()
build()
check()
devtools::build_win()
devtools::check_win()
library(devtools)
check_win()
devtools::check_win()
devtools::check_win_devel()
devtools::check_win_release()
maintainer("codetools")
library(devtools)
usethis::use_cran_comments()
build()
check()
build()
document()
source('~/Dropbox/Galway/Analysis/R/gbm.auto/R/roc.R')
library(devtools)
ducoment()
document()
build()
library(devtools)
build()
source('~/Dropbox/Galway/Analysis/R/gbm.auto/R/gbm.basemap.R')
check()
library(devtools)
build()
check()
library(gbm.auto)
data(grids)
data(samples)
setwd("/home/simon/Desktop/gbmauto/")
gbm.auto(grids = grids,
samples = samples,
expvar = c(4:8, 10),
resvar = 11,
tc = c(7),
lr = c(0.005),
ZI = TRUE,
savegbm = FALSE,
multiplot = T,
linesfiles = T,
varint = T,
shape = coast)
gbm.auto(grids = grids,
samples = samples,
expvar = c(4:8, 10),
resvar = 11,
tc = c(7),
lr = c(0.005),
ZI = TRUE,
savegbm = FALSE,
multiplot = T,
linesfiles = T,
varint = T)
gbm.auto(grids = grids,
samples = samples,
expvar = c(4:8, 10),
resvar = 11,
tc = c(7),
lr = c(0.005),
ZI = TRUE,
savegbm = FALSE,
multiplot = T,
linesfiles = T,
varint = T, getzip = "/home/simon/Documents/Si Work/Blocklab/iccat/SSM data/outputs/GSHHS_shp/")
getwd()
gbm.auto(grids = grids,
samples = samples,
expvar = c(4:8, 10),
resvar = 11,
tc = c(7),
lr = c(0.005),
ZI = TRUE,
savegbm = FALSE,
multiplot = T,
linesfiles = T,
varint = T, getzip = "/home/simon/Documents/Si Work/Blocklab/iccat/SSM data/outputs/GSHHS_shp/")
# basemap
gbm.basemap(bounds = c(-6.5, -3.37, 52.04, 54.89), # region to crop to: c(xmin,xmax,ymin,ymax)
grids = NULL, # if bounds unspecified, name your grids database here
gridslat = NULL, # if bounds unspecified, specify which column in grids is latitude
gridslon = NULL, # if bounds unspecified, specify which column in grids is longitude
getzip = "/home/simon/Documents/Si Work/Blocklab/iccat/SSM data/outputs/GSHHS_shp/", # download & unpack GSHHS data to WD? "TRUE" else absolute/relative reference to GSHHS_shp folder, inc that folder
zipvers = "2.3.7", # GSHHS version, in case it updates. Please email developer if this is incorrect
savename = "Crop_Map", #shapefile savename without the .shp
res = "f", # resolution, 1:5 (low:high) OR c,l,i,h,f (coarse, low, intermediate, high, full) or "CALC" to calculate based on bounds
extrabounds = TRUE) # grow bounds 16pct each direction to expand rectangular datasets basemaps over the entire square area created by basemap in mapplots
library(devtools)
library(gbm.auto)
setwd("/home/simon/Desktop/gbmauto/")
library(shapefiles)
coast <- read.shapefile("/home/simon/Desktop/gbmauto/CroppedMap/Crop_Map")
gbm.auto(grids = grids,
samples = samples,
expvar = c(4:8, 10),
resvar = 11,
tc = c(7),
lr = c(0.005),
ZI = TRUE,
savegbm = FALSE,
multiplot = T,
linesfiles = T,
varint = T,
shape = coast)
source('~/Dropbox/Galway/Analysis/R/gbm.auto/R/gbm.basemap.R')
message("
------------------------------------
This session has been reset.
------------------------------------
")
source('~/Dropbox/Galway/Analysis/R/gbm.auto/R/gbm.auto.R')
library(devtools)
build()
source('~/Dropbox/Galway/Analysis/R/gbm.auto/R/gbm.auto.R')
library(devtools)
document()
build()
library(gbm.auto)
data(grids)
data(samples)
setwd("/home/simon/Desktop/gbmauto/")
library(shapefiles)
coast <- read.shapefile("/home/simon/Desktop/gbmauto/CroppedMap/Crop_Map")
gbm.auto(grids = grids,
samples = samples,
expvar = c(4:8, 10),
resvar = 11,
tc = c(7),
lr = c(0.005),
ZI = TRUE,
savegbm = FALSE,
multiplot = T,
linesfiles = T,
varint = T,
shape = coast)
getwd()
gbm.auto(grids = grids,
samples = samples,
expvar = c(4:8, 10),
resvar = 11,
tc = c(7),
lr = c(0.005),
ZI = TRUE,
savegbm = FALSE,
multiplot = T,
linesfiles = T,
varint = T,
shape = coast)
gbm.auto(grids = grids,
samples = samples,
expvar = c(4:8, 10),
resvar = 11,
tc = c(7),
lr = c(0.005),
ZI = TRUE,
savegbm = FALSE,
multiplot = T,
linesfiles = T,
varint = T)
getwd()
setwd("/home/simon/Desktop/gbmauto/")
gbm.auto(grids = grids,
samples = samples,
expvar = c(4:8, 10),
resvar = 11,
tc = c(7),
lr = c(0.005),
ZI = TRUE,
savegbm = FALSE,
multiplot = T,
linesfiles = T,
varint = T)
gbm.auto(grids = grids,
samples = samples,
expvar = c(4:8, 10),
resvar = 11,
tc = c(7),
lr = c(0.005),
ZI = TRUE,
savegbm = FALSE,
multiplot = T,
linesfiles = T,
varint = T)
library(devtools)
build()
check()
library(devtools)
install_github("SimonDedman/gbm.auto", force = T)
library(gbm.auto)
data(grids)
data(samples)
setwd("/home/simon/Desktop/gbmauto/")
library(shapefiles)
coast <- read.shapefile("/home/simon/Desktop/gbmauto/CroppedMap/Crop_Map")
gbm.auto(grids = grids,
samples = samples,
expvar = c(4:8, 10),
resvar = 11,
tc = c(7),
lr = c(0.005),
ZI = TRUE,
savegbm = FALSE,
multiplot = T,
linesfiles = T,
varint = T,
shape = coast)
gbm.auto(grids = grids,
samples = samples,
expvar = c(4:8, 10),
resvar = 11,
tc = 7,
lr = 0.005,
savegbm = TRUE)
gbm.auto(grids = grids,
samples = samples,
expvar = c(4:8, 10),
resvar = 11,
tc = 7,
lr = 0.005,
savegbm = TRUE)
gbm.auto(grids = grids,
samples = samples,
expvar = c(4:8, 10),
resvar = 11,
tc = 7,
lr = 0.005,
savegbm = TRUE)
devtools::release()
