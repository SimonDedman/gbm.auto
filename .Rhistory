ntf2 <- n.trees[[2]]
} else {
ntf1 <- n.trees
ntf2 <- n.trees} # else make fam1 and fam2 the same. close if else n.trees
i <- resvar
dir.create(names(samples[i])) # create resvar-named directory for outputs
m = 1 # Gaus only loop counter to allow best gaus BRT choice
n = 1 # Print counter for all loops of BRT combos & best bin BRT choice
if (!is.null(grids)) if (!all(expvarnames %in% names(grids))) stop(print("Expvar column names in samples but missing from grids:"), print(expvarnames[which(!expvarnames %in% names(grids))]))
if (anyNA(samples[i])) stop("Response variable range contains NA values, please filter out these rows with: mysamples <- mysamples[-which(is.na(mysamples[resvar])),]")
####2. ZI check & log####
# if user has asked code to check for ZI, check it & set new ZI status
if (ZI == "CHECK") if (sum(samples[,i] == 0, na.rm = TRUE) / length(samples[,i]) >= 0.5) ZI = TRUE else ZI = FALSE
# ensure resvar has zeroes (expects mix of successful & unsuccessful samples for bernoulli/binary runs)
if (!ZI) if (min(samples[i]) > 0) print("No zeroes in response variable. If using a zero inflated model, Method expects unsuccessful, as well as successful, samples")
# create binary (0/1) response variable, for bernoulli BRTs
samples$brv <- ifelse(samples[i] > 0, 1, 0)
brvcol <- which(colnames(samples) == "brv") # brv column number for BRT
# create logged response variable, for gaussian BRTs when data are zero-inflated (otherwise just use resvar directly)
logem <- log1p(samples[,i]) # logs resvar i.e. containing zeroes
dont  <- samples[,i]
# log1p resvar if bin only (fam1 bin, fam2 FALSE), OR if resvar is delta & ZI & NOT poisson (which can't be logged, must be positive integers)
if (fam1 == "bernoulli" & (!gaus | (gaus & ZI & (fam2 != "poisson")))) {samples$grv <- logem} else {samples$grv <- dont}
grvcol <- which(colnames(samples) == "grv") # grv column number for BRT
grv_yes <- subset(samples, grv > 0) # nonzero subset for gaussian BRTs
is.null(loadgbm)
####3. Begin Report####
if (fam1 == "bernoulli" & (!gaus | (gaus & ZI))) { # do fam1 runs if it's bin only (fam1 bin, gaus (ie fam2) false), or if it's delta & ZI
reportcolno = 3 + (length(tc)*length(lr)*length(bf)) + (length(tcgaus)*length(lrgaus)*length(bfgaus)) + 14
# if only 1 permutation, = 19
} else { # else zi
reportcolno = 3 + (length(tcgaus)*length(lrgaus)*length(bfgaus)) + 7
# if only 1 permutation = 11
} # close if else ZI
if (!gaus) reportcolno = 3 + (length(tc)*length(lr)*length(bf)) + 7
# 14: best bin brt, best gaus brt,
# Bin_BRT_simp predictors kept (ordered), Bin_BRT_simp predictors dropped,
# Gaus_BRT_simp predictors kept (ordered),Gaus_BRT_simp predictors dropped,
# Simplified Binary BRT stats, Simplified Gaussian BRT stats,
# Best Binary BRT variables, Relative Influence (Bin),
# Best Gaussian BRT variables, Relative Influence (Gaus),
# Biggest Interactions (Bin), Biggest Interactions (Gaus)
# + 5 elements for each loop: parameter combo n (tc lr & bf values),
# Bin BRT n stats, Bin BRT n name
# Gaus BRT n stats, Gaus BRT n name
Report <- data.frame(matrix(NA, nrow = (max(6,length(expvar))), ncol = (reportcolno)))
# build blank df, rows=biggest of 6 (max static row number of stats) or n of exp. vars
colnames(Report) <- c("Explanatory Variables","Response Variables","Zero Inflated?") # populate static colnames 1:3
# name bin columns if ZI
if (!gaus) {colnames(Report)[(reportcolno - 6):reportcolno] <- c("Best Binary BRT",
"Bin_BRT_simp predictors dropped",
"Bin_BRT_simp predictors kept",
"Simplified Binary BRT stats",
"Best Binary BRT variables",
"Relative Influence (Bin)",
"Biggest Interactions (Bin)")
} else {
# do fam1 runs if it's bin only (fam1 bin, gaus (ie fam2) false), or if it's delta & ZI
if (fam1 == "bernoulli" & (!gaus | (gaus & ZI))) {colnames(Report)[(reportcolno - 13):(reportcolno - 7)] <- c("Best Binary BRT",
"Bin_BRT_simp predictors dropped",
"Bin_BRT_simp predictors kept",
"Simplified Binary BRT stats",
"Best Binary BRT variables",
"Relative Influence (Bin)",
"Biggest Interactions (Bin)")}
colnames(Report)[(reportcolno - 6):reportcolno] <- c("Best Gaussian BRT",
"Gaus_BRT_simp predictors dropped",
"Gaus_BRT_simp predictors kept",
"Simplified Gaussian BRT stats",
"Best Gaussian BRT variables",
"Relative Influence (Gaus)",
"Biggest Interactions (Gaus)")} # close if else gaus
# populate the final 14 column names
Report[1:length(expvar),1] <- names(samples[expvar]) # put expvar names in first column
Report[1,2] <- names(samples[i]) # put resvar in col 2
Report[1,3] <- ZI # ZI in col 3
StatsObjectsList <- list()
Bin_Best_Score <- 0 # create blanks for best results to use in loops
Bin_Best_Model <- 0
Gaus_Best_Score <- 0
Gaus_Best_Model <- 0
fam1 == "bernoulli" & (!gaus | (gaus & ZI))
j <- tc
k <- lr
l <- bf
####4. Binomial BRT####
assign(paste0("Bin_BRT",".tc",j,".lr",k,".bf",l),
gbm.step(data = samples,
gbm.x = expvar,
gbm.y = brvcol,
family = fam1,
tree.complexity = j,
learning.rate = k,
bag.fraction = l,
n.trees = ntf1)
)
View(Bin_BRT.tc2.lr0.001.bf0.5)
dev.print(file = paste0("./",names(samples[i]),"/pred_dev_bin.jpeg"), device = jpeg, width = 600)
print(paste0("Done Bin_BRT",".tc",j,".lr",k,".bf",l))
print(warnings())
####5. Select best bin model####
if (n == 1) { # if this is the first loop, best score & model name is this one by default
Bin_Best_Score <- get(paste0("Bin_BRT",".tc",j,".lr",k,".bf",l))$self.statistics$correlation[[1]]
Bin_Best_Model <- paste0("Bin_BRT",".tc",j,".lr",k,".bf",l)
# else if this models self.statistics$correlation > the best model, make this the new best model
}  else if (get(paste0("Bin_BRT",".tc",j,".lr",k,".bf",l))$self.statistics$correlation[[1]] > Bin_Best_Score) {
Bin_Best_Score <- get(paste0("Bin_BRT",".tc",j,".lr",k,".bf",l))$self.statistics$correlation[[1]]
Bin_Best_Model <- paste0("Bin_BRT",".tc",j,".lr",k,".bf",l)
} # close if else n==1
####6. Add bin stats to report####
if (fam1 == "bernoulli" & (!gaus | (gaus & ZI))) {Report[1:6,(3 + n)] <- c(paste0("trees: ",get(paste0("Bin_BRT",".tc",j,".lr",k,".bf",l))$n.trees),
paste0("Training Data Correlation: ", get(paste0("Bin_BRT",".tc",j,".lr",k,".bf",l))$self.statistics$correlation[[1]]),
paste0("CV Mean Deviance: ", get(paste0("Bin_BRT",".tc",j,".lr",k,".bf",l))$cv.statistics$deviance.mean),
paste0("CV Deviance SE: ", get(paste0("Bin_BRT",".tc",j,".lr",k,".bf",l))$cv.statistics$deviance.se),
paste0("CV Mean Correlation: ", get(paste0("Bin_BRT",".tc",j,".lr",k,".bf",l))$cv.statistics$correlation.mean),
paste0("CV Correlation SE: ", get(paste0("Bin_BRT",".tc",j,".lr",k,".bf",l))$cv.statistics$correlation.se))
# bin BRT name
colnames(Report)[3 + n] <- paste0("Bin_BRT",".tc",j,".lr",k,".bf",l)
# Add Bin stats objects to StatsObjectsList
StatsObjectsList[[length(StatsObjectsList) + 1]] <- get(paste0("Bin_BRT",".tc",j,".lr",k,".bf",l))$self.statistics # send to new position after last item
names(StatsObjectsList)[[length(StatsObjectsList)]] <- paste0("Bin_BRT",".tc",j,".lr",k,".bf",l, "__self.statistics") # name it. new length now includes self.statistics
StatsObjectsList[[length(StatsObjectsList) + 1]] <- get(paste0("Bin_BRT",".tc",j,".lr",k,".bf",l))$cv.statistics
names(StatsObjectsList)[[length(StatsObjectsList)]] <- paste0("Bin_BRT",".tc",j,".lr",k,".bf",l, "__cv.statistics")
} # close ZI if
if (alerts) beep(2) # progress printer, right aligned
if (gaus) {
print(paste0("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX    Completed BRT ",n," of ", (length(tc)*length(lr)*length(bf)) + (length(tcgaus)*length(lrgaus)*length(bfgaus)), "     XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX"))
} else { # close if else gaus
print(paste0("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX    Completed BRT ",n," of ", (length(tc)*length(lr)*length(bf)), "     XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX"))
} # else if gaus
n <- n + 1   # Add to print counter
gaus
tcgaus
lrgaus
k <- lrgaus
l
bfgaus
####7. Gaussian BRT####
assign(paste0("Gaus_BRT",".tc",j,".lr",k,".bf",l),
gbm.step(data = grv_yes,
gbm.x = expvar,
gbm.y = grvcol,
family = fam2,
tree.complexity = j,
learning.rate = k,
bag.fraction = l,
n.trees = ntf2)
)
lrgaus
lr = list(0.001, 0.001)
if (is.list(lr)) {
if (length(lr) > 2) {stop("Only 2 lr list items allowed: 1 per family")}
lrgaus <- lr[[2]]
lr <- lr[[1]]
} else {lrgaus <- lr} # close if else lr
lrgaus
k <- lrgaus
####7. Gaussian BRT####
assign(paste0("Gaus_BRT",".tc",j,".lr",k,".bf",l),
gbm.step(data = grv_yes,
gbm.x = expvar,
gbm.y = grvcol,
family = fam2,
tree.complexity = j,
learning.rate = k,
bag.fraction = l,
n.trees = ntf2)
)
lrgaus
lr
dev.print(file = paste0("./",names(samples[i]),"/pred_dev_gaus.jpeg"), device = jpeg, width = 600)
print(paste0("Done Gaus_BRT",".tc",j,".lr",k,".bf",l))
print(warnings())
last.warning
summary(warnings())
last.warning
assign("last.warning", NULL, envir = baseenv()) # dumps warnings so subsequent printing doesn't reprint the existing warning
last.warning
print(warnings())
savedir <- "~/Documents/My Documents/FinPrint French Poly/Analysis/DataExploration_03_2022/Teleosts"
savedir <- "/home/simon/Documents/Si Work/PostDoc Work/Gbmauto help/2022-03_Frances_Naomi/"
setwd(savedir)
# library(gbm)
remotes::install_github("SimonDedman/gbm.auto", force = TRUE)
library(gbm.auto)
library(dplyr)
wide.df1 <- data.frame(read.csv("wide.df1.teleosts.csv", header = TRUE, as.is = TRUE)) # importing CSV#
wide.df1$geo <- as.factor(wide.df1$geo)
wide.df1$isl_grp <- as.factor(wide.df1$isl_grp)
wide.df1$archi <- as.factor(wide.df1$archi)
wide.df1$Season <- as.factor(wide.df1$Season)
wide.df1$bait <- as.factor(wide.df1$bait)
wide.df1$topo <- as.factor(wide.df1$topo)
colnames(wide.df1)
hist(wide.df1$total_maxN_a)
gbm.auto(
grids = NULL,
samples = wide.df1 %>% filter(site != "Nuka Hiva"),
expvar = c("temp", "ave_npp", "depth", "visibility", "topo", "pop.dens", "bait", "time.no.bait", "isl_grp", "Season", "lagoon.size"), # fix to final variables
resvar = "total_maxN_a",
tc = c(2), #1,2,3,4,5  add combos you want to see for initial runs and it will try each. doens't run the whole gambit like the loops do
lr = 0.001, # 0.0005,0.001,0.005,0.01
bf = c(0.5), # 0.5,0.55,0.60,0.65,0.7,0.75
n.trees = 50,
ZI = TRUE, # "CHECK"
fam1 = c("bernoulli"), # if you want a poisson distribution need to select, will auto select gaussian unless zero inflated
fam2 = c("poisson"), #
simp = TRUE, # Change to true
gridslat = 2,
gridslon = 1,
multiplot = TRUE,
cols = grey.colors(1, 1, 1),
linesfiles = TRUE, # change to true for final run
smooth = TRUE,
savedir = savedir,
savegbm = TRUE, # change to true for final runs
loadgbm = NULL,
varint = TRUE,
map = TRUE,
shape = NULL,
RSB = TRUE,
BnW = TRUE,
alerts = TRUE, # this is the noise alerts
# pngtype = c("quartz"), # quartz for mac  this one for windows : "cairo-png"
pngtype = "cairo-png", # si linux
gaus = TRUE,
MLEvaluate = TRUE,
brv = NULL,
grv = NULL,
Bin_Preds = NULL,
Gaus_Preds = NULL)
gbm.auto(
grids = NULL,
samples = wide.df1 %>% filter(site != "Nuka Hiva"),
expvar = c("temp", "ave_npp", "depth", "visibility", "topo", "pop.dens", "bait", "time.no.bait", "isl_grp", "Season", "lagoon.size"), # fix to final variables
resvar = "total_maxN_a",
tc = c(2), #1,2,3,4,5  add combos you want to see for initial runs and it will try each. doens't run the whole gambit like the loops do
lr = 0.001, # 0.0005,0.001,0.005,0.01
bf = c(0.5), # 0.5,0.55,0.60,0.65,0.7,0.75
n.trees = 50,
ZI = TRUE, # "CHECK"
fam1 = c("bernoulli"), # if you want a poisson distribution need to select, will auto select gaussian unless zero inflated
fam2 = c("poisson"), #
simp = TRUE, # Change to true
gridslat = 2,
gridslon = 1,
multiplot = TRUE,
cols = grey.colors(1, 1, 1),
linesfiles = TRUE, # change to true for final run
smooth = TRUE,
savedir = savedir,
savegbm = TRUE, # change to true for final runs
loadgbm = NULL,
varint = TRUE,
map = TRUE,
shape = NULL,
RSB = TRUE,
BnW = TRUE,
alerts = TRUE, # this is the noise alerts
# pngtype = c("quartz"), # quartz for mac  this one for windows : "cairo-png"
pngtype = "cairo-png", # si linux
gaus = TRUE,
MLEvaluate = TRUE,
brv = NULL,
grv = NULL,
Bin_Preds = NULL,
Gaus_Preds = NULL)
# library(gbm)
remotes::install_github("SimonDedman/gbm.auto", force = TRUE)
savedir <- "/home/simon/Documents/Si Work/PostDoc Work/Gbmauto help/2022-03_Frances_Naomi/"
setwd(savedir)
library(gbm.auto)
library(dplyr)
wide.df1 <- data.frame(read.csv("wide.df1.teleosts.csv", header = TRUE, as.is = TRUE)) # importing CSV#
wide.df1$geo <- as.factor(wide.df1$geo)
wide.df1$isl_grp <- as.factor(wide.df1$isl_grp)
wide.df1$archi <- as.factor(wide.df1$archi)
wide.df1$Season <- as.factor(wide.df1$Season)
wide.df1$bait <- as.factor(wide.df1$bait)
wide.df1$topo <- as.factor(wide.df1$topo)
colnames(wide.df1)
hist(wide.df1$total_maxN_a)
gbm.auto(
grids = NULL,
samples = wide.df1 %>% filter(site != "Nuka Hiva"),
expvar = c("temp", "ave_npp", "depth", "visibility", "topo", "pop.dens", "bait", "time.no.bait", "isl_grp", "Season", "lagoon.size"), # fix to final variables
resvar = "total_maxN_a",
tc = c(2), #1,2,3,4,5  add combos you want to see for initial runs and it will try each. doens't run the whole gambit like the loops do
lr = 0.001, # 0.0005,0.001,0.005,0.01
bf = c(0.5), # 0.5,0.55,0.60,0.65,0.7,0.75
n.trees = 50,
ZI = TRUE, # "CHECK"
fam1 = c("bernoulli"), # if you want a poisson distribution need to select, will auto select gaussian unless zero inflated
fam2 = c("poisson"), #
simp = TRUE, # Change to true
gridslat = 2,
gridslon = 1,
multiplot = TRUE,
cols = grey.colors(1, 1, 1),
linesfiles = TRUE, # change to true for final run
smooth = TRUE,
savedir = savedir,
savegbm = TRUE, # change to true for final runs
loadgbm = NULL,
varint = TRUE,
map = TRUE,
shape = NULL,
RSB = TRUE,
BnW = TRUE,
alerts = TRUE, # this is the noise alerts
# pngtype = c("quartz"), # quartz for mac  this one for windows : "cairo-png"
pngtype = "cairo-png", # si linux
gaus = TRUE,
MLEvaluate = TRUE,
brv = NULL,
grv = NULL,
Bin_Preds = NULL,
Gaus_Preds = NULL)
savedir <- "/home/simon/Documents/Si Work/PostDoc Work/Gbmauto help/2022-03_Frances_Naomi/"
# library(gbm)
remotes::install_github("SimonDedman/gbm.auto", force = TRUE)
library(gbm.auto)
library(dplyr)
### Teleost  BRTs ###
# import full by set data frame#
wide.df1 <- data.frame(read.csv("wide.df1.teleosts.csv", header = TRUE, as.is = TRUE)) # importing CSV#
wide.df1$geo <- as.factor(wide.df1$geo)
wide.df1$isl_grp <- as.factor(wide.df1$isl_grp)
wide.df1$archi <- as.factor(wide.df1$archi)
wide.df1$Season <- as.factor(wide.df1$Season)
wide.df1$bait <- as.factor(wide.df1$bait)
wide.df1$topo <- as.factor(wide.df1$topo)
##### # BRT Total MaxN A without Nuka Hiva ####
colnames(wide.df1)
hist(wide.df1$total_maxN_a)
###
savedir <- "/home/simon/Documents/Si Work/PostDoc Work/Gbmauto help/2022-03_Frances_Naomi/"
setwd(savedir)
wide.df1 <- data.frame(read.csv("wide.df1.teleosts.csv", header = TRUE, as.is = TRUE)) # importing CSV#
wide.df1$geo <- as.factor(wide.df1$geo)
wide.df1$isl_grp <- as.factor(wide.df1$isl_grp)
wide.df1$archi <- as.factor(wide.df1$archi)
wide.df1$Season <- as.factor(wide.df1$Season)
wide.df1$bait <- as.factor(wide.df1$bait)
wide.df1$topo <- as.factor(wide.df1$topo)
colnames(wide.df1)
hist(wide.df1$total_maxN_a)
gbm.auto(
grids = NULL,
samples = wide.df1 %>% filter(site != "Nuka Hiva"),
expvar = c("temp", "ave_npp", "depth", "visibility", "topo", "pop.dens", "bait", "time.no.bait", "isl_grp", "Season", "lagoon.size"), # fix to final variables
resvar = "total_maxN_a",
tc = c(2), #1,2,3,4,5  add combos you want to see for initial runs and it will try each. doens't run the whole gambit like the loops do
lr = 0.001, # 0.0005,0.001,0.005,0.01
bf = c(0.5), # 0.5,0.55,0.60,0.65,0.7,0.75
n.trees = 50,
ZI = TRUE, # "CHECK"
fam1 = c("bernoulli"), # if you want a poisson distribution need to select, will auto select gaussian unless zero inflated
fam2 = c("poisson"), #
simp = TRUE, # Change to true
gridslat = 2,
gridslon = 1,
multiplot = TRUE,
cols = grey.colors(1, 1, 1),
linesfiles = TRUE, # change to true for final run
smooth = TRUE,
savedir = savedir,
savegbm = TRUE, # change to true for final runs
loadgbm = NULL,
varint = TRUE,
map = TRUE,
shape = NULL,
RSB = TRUE,
BnW = TRUE,
alerts = TRUE, # this is the noise alerts
# pngtype = c("quartz"), # quartz for mac  this one for windows : "cairo-png"
pngtype = "cairo-png", # si linux
gaus = TRUE,
MLEvaluate = TRUE,
brv = NULL,
grv = NULL,
Bin_Preds = NULL,
Gaus_Preds = NULL)
gbm.auto
library(devtools)
document()
library(devtools)
document()
savedir <- "/home/simon/Documents/Si Work/PostDoc Work/Gbmauto help/2022-03_Frances_Naomi/"
setwd(savedir)
# library(gbm)
remotes::install_github("SimonDedman/gbm.auto", force = TRUE)
library(gbm.auto)
library(dplyr)
### Teleost  BRTs ###
# import full by set data frame#
wide.df1 <- data.frame(read.csv("wide.df1.teleosts.csv", header = TRUE, as.is = TRUE)) # importing CSV#
wide.df1$geo <- as.factor(wide.df1$geo)
wide.df1$isl_grp <- as.factor(wide.df1$isl_grp)
wide.df1$archi <- as.factor(wide.df1$archi)
wide.df1$Season <- as.factor(wide.df1$Season)
wide.df1$bait <- as.factor(wide.df1$bait)
wide.df1$topo <- as.factor(wide.df1$topo)
colnames(wide.df1)
hist(wide.df1$total_maxN_a)
gbm.auto(
grids = NULL,
samples = wide.df1 %>% filter(site != "Nuka Hiva"),
expvar = c("temp", "ave_npp", "depth", "visibility", "topo", "pop.dens", "bait", "time.no.bait", "isl_grp", "Season", "lagoon.size"), # fix to final variables
resvar = "total_maxN_a",
tc = c(2), #1,2,3,4,5  add combos you want to see for initial runs and it will try each. doens't run the whole gambit like the loops do
lr = 0.001, # 0.0005,0.001,0.005,0.01
bf = c(0.5), # 0.5,0.55,0.60,0.65,0.7,0.75
n.trees = 50,
ZI = TRUE, # "CHECK"
fam1 = c("bernoulli"), # if you want a poisson distribution need to select, will auto select gaussian unless zero inflated
fam2 = c("poisson"), #
simp = TRUE, # Change to true
gridslat = 2,
gridslon = 1,
multiplot = TRUE,
cols = grey.colors(1, 1, 1),
linesfiles = TRUE, # change to true for final run
smooth = TRUE,
savedir = savedir,
savegbm = TRUE, # change to true for final runs
loadgbm = NULL,
varint = TRUE,
map = TRUE,
shape = NULL,
RSB = TRUE,
BnW = TRUE,
alerts = TRUE, # this is the noise alerts
# pngtype = c("quartz"), # quartz for mac  this one for windows : "cairo-png"
pngtype = "cairo-png", # si linux
gaus = TRUE,
MLEvaluate = TRUE,
brv = NULL,
grv = NULL,
Bin_Preds = NULL,
Gaus_Preds = NULL)
savedir <- "/home/simon/Documents/Si Work/PostDoc Work/Gbmauto help/2022-03_Frances_Naomi/"
setwd(savedir)
# library(gbm)
remotes::install_github("SimonDedman/gbm.auto", force = TRUE)
savedir <- "/home/simon/Documents/Si Work/PostDoc Work/Gbmauto help/2022-03_Frances_Naomi/"
setwd(savedir)
library(gbm.auto)
library(dplyr)
### Teleost  BRTs ###
# import full by set data frame#
wide.df1 <- data.frame(read.csv("wide.df1.teleosts.csv", header = TRUE, as.is = TRUE)) # importing CSV#
wide.df1$geo <- as.factor(wide.df1$geo)
wide.df1$isl_grp <- as.factor(wide.df1$isl_grp)
wide.df1$archi <- as.factor(wide.df1$archi)
wide.df1$Season <- as.factor(wide.df1$Season)
wide.df1$bait <- as.factor(wide.df1$bait)
wide.df1$topo <- as.factor(wide.df1$topo)
colnames(wide.df1)
hist(wide.df1$total_maxN_a)
gbm.auto(
grids = NULL,
samples = wide.df1 %>% filter(site != "Nuka Hiva"),
expvar = c("temp", "ave_npp", "depth", "visibility", "topo", "pop.dens", "bait", "time.no.bait", "isl_grp", "Season", "lagoon.size"), # fix to final variables
resvar = "total_maxN_a",
tc = c(2), #1,2,3,4,5  add combos you want to see for initial runs and it will try each. doens't run the whole gambit like the loops do
lr = 0.001, # 0.0005,0.001,0.005,0.01
bf = c(0.5), # 0.5,0.55,0.60,0.65,0.7,0.75
n.trees = 50,
ZI = TRUE, # "CHECK"
fam1 = c("bernoulli"), # if you want a poisson distribution need to select, will auto select gaussian unless zero inflated
fam2 = c("poisson"), #
simp = TRUE, # Change to true
gridslat = 2,
gridslon = 1,
multiplot = TRUE,
cols = grey.colors(1, 1, 1),
linesfiles = TRUE, # change to true for final run
smooth = TRUE,
savedir = savedir,
savegbm = TRUE, # change to true for final runs
loadgbm = NULL,
varint = TRUE,
map = TRUE,
shape = NULL,
RSB = TRUE,
BnW = TRUE,
alerts = TRUE, # this is the noise alerts
# pngtype = c("quartz"), # quartz for mac  this one for windows : "cairo-png"
pngtype = "cairo-png", # si linux
gaus = TRUE,
MLEvaluate = TRUE,
brv = NULL,
grv = NULL,
Bin_Preds = NULL,
Gaus_Preds = NULL)
?gbm.simplify
library(dismo)
gbm.simplify
library(devtools)
document()
build()
library(devtools)
document()
build()
check()
document()
search()
document()
remotes::install_github("SimonDedman/gbm.auto", force = TRUE)
library(devtools)
document()
