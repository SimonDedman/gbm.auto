yay <- list.files(path = loadgbm,pattern = "Bin_Best_Model")
nay <- list.files(path = loadgbm,pattern = "Bin_Best_Modef")
class(yay)
class(nay)
length(yay)
length(nay)
length(list.files(path = loadgbm, pattern = "Bin_Best_Model"))
length(list.files(path = loadgbm, pattern = "Bin_Best_Model")) ==1
length(list.files(path = loadgbm, pattern = "Bin_Best_Model")) != 1
?rowMeans
devtools::document()
install.packages("lifecycle")
usethis::use_lifecycle()
usethis::use_roxygen_md()
roxygen2md::roxygen2md()
devtools::document()
usethis::use_lifecycle()
devtools::document()
?read_csv
??read_csv
??last_col
??case_match
??ordered
tmp <-
readr::read_csv("/home/simon/Documents/Si Work/PostDoc Work/Gbmauto help/2022-03_Frances_Naomi/2023-02-21 categorical variables issue/count_elasmo/Gaus_Best_line_isl_grp.csv")
View(tmp)
tmp2 <-
readr::read_csv("/home/simon/Documents/Si Work/PostDoc Work/Gbmauto help/2022-03_Frances_Naomi/2023-02-21 categorical variables issue/count_elasmo/Gaus_Best_line_latitude.csv") |>
tmp2 <-
readr::read_csv("/home/simon/Documents/Si Work/PostDoc Work/Gbmauto help/2022-03_Frances_Naomi/2023-02-21 categorical variables issue/count_elasmo/Gaus_Best_line_latitude.csv")
class(tmp[, 1])
tmp[, 1]
as.vector(tmp[, 1])
class(as.vector(tmp[, 1]))
tmp[, 1][[1]]
class(tmp[, 1][[1]])
if (class(tmp[, 1][[1]]) == "character") stop("csv is not a categorical/factorial variable")
class(tmp[, 1][[1]])
# add check to see whether csv is categorical.
if (class(tmp[, 1][[1]]) != "character") stop("csv is not a categorical/factorial variable")
tmp <-
readr::read_csv("/home/simon/Documents/Si Work/PostDoc Work/Gbmauto help/2022-03_Frances_Naomi/2023-02-21 categorical variables issue/count_elasmo/Gaus_Best_line_isl_grp.csv")
# add check to see whether csv is categorical.
if (class(tmp[, 1][[1]]) != "character") stop("csv is not a categorical/factorial variable")
tmp <- tmp |>
dplyr::mutate(ycentred = y - mean(y))
tmp <-
readr::read_csv("/home/simon/Documents/Si Work/PostDoc Work/Gbmauto help/2022-03_Frances_Naomi/2023-02-21 categorical variables issue/count_elasmo/Gaus_Best_line_isl_grp.csv")
# add check to see whether csv is categorical.
if (class(tmp[, 1][[1]]) != "character") stop("csv is not a categorical/factorial variable")
tmp <- tmp |>
dplyr::mutate(ycentred = y - mean(y)) |>
dplyr::rename(Category = tidyselect::last_col(offset = 2))
tmp <-
readr::read_csv("/home/simon/Documents/Si Work/PostDoc Work/Gbmauto help/2022-03_Frances_Naomi/2023-02-21 categorical variables issue/count_elasmo/Gaus_Best_line_isl_grp.csv")
# add check to see whether csv is categorical.
if (class(tmp[, 1][[1]]) != "character") stop("csv is not a categorical/factorial variable")
tmp <- tmp |>
dplyr::mutate(ycentred = y - mean(y)) |>
dplyr::rename(Category = tidyselect::last_col(offset = 2)) |> # no first_col option
# alter axis titles
dplyr::mutate(Category = dplyr::case_match(Category,
"australes" ~ "Australes",
# add more here. Or do this in csv
.default = Category))
tmp <-
readr::read_csv("/home/simon/Documents/Si Work/PostDoc Work/Gbmauto help/2022-03_Frances_Naomi/2023-02-21 categorical variables issue/count_elasmo/Gaus_Best_line_isl_grp.csv")
# add check to see whether csv is categorical.
if (class(tmp[, 1][[1]]) != "character") stop("csv is not a categorical/factorial variable")
tmp <- tmp |>
dplyr::mutate(ycentred = y - mean(y)) |>
dplyr::rename(Category = tidyselect::last_col(offset = 2)) |> # no first_col option
# re-order the x axis for categorical variables so they are either
# 1) in order from high to low or
dplyr::arrange(ycentred)
tmp <-
readr::read_csv("/home/simon/Documents/Si Work/PostDoc Work/Gbmauto help/2022-03_Frances_Naomi/2023-02-21 categorical variables issue/count_elasmo/Gaus_Best_line_isl_grp.csv")
# add check to see whether csv is categorical.
if (class(tmp[, 1][[1]]) != "character") stop("csv is not a categorical/factorial variable")
tmp <- tmp |>
dplyr::mutate(ycentred = y - mean(y)) |>
dplyr::rename(Category = tidyselect::last_col(offset = 2)) |> # no first_col option
# re-order the x axis for categorical variables so they are either
# 1) in order from high to low or
dplyr::arrange(ycentred) |>
dplyr::mutate(Category = ordered(Category, levels = Category))
tmp <-
readr::read_csv("/home/simon/Documents/Si Work/PostDoc Work/Gbmauto help/2022-03_Frances_Naomi/2023-02-21 categorical variables issue/count_elasmo/Gaus_Best_line_isl_grp.csv")
# add check to see whether csv is categorical.
if (class(tmp[, 1][[1]]) != "character") stop("csv is not a categorical/factorial variable")
tmp <- tmp |>
dplyr::mutate(ycentred = y - mean(y)) |>
dplyr::rename(Category = tidyselect::last_col(offset = 2)) |> # no first_col option
# re-order the x axis for categorical variables so they are either
# 1) in order from high to low or
dplyr::arrange(ycentred)
tmp <-
readr::read_csv("/home/simon/Documents/Si Work/PostDoc Work/Gbmauto help/2022-03_Frances_Naomi/2023-02-21 categorical variables issue/count_elasmo/Gaus_Best_line_isl_grp.csv")
# add check to see whether csv is categorical.
if (class(tmp[, 1][[1]]) != "character") stop("csv is not a categorical/factorial variable")
tmp <- tmp |>
dplyr::mutate(ycentred = y - mean(y)) |>
dplyr::rename(Category = tidyselect::last_col(offset = 2)) |> # no first_col option
# re-order the x axis for categorical variables so they are either
# 1) in order from high to low or
dplyr::arrange(ycentred) |>
dplyr::mutate(Category = ordered(Category, levels = Category))
x <- "/home/simon/Documents/Si Work/PostDoc Work/Gbmauto help/2022-03_Frances_Naomi/2023-02-21 categorical variables issue/count_elasmo/Gaus_Best_line_isl_grp.csv"
levels = NULL
tmp$Category
x <- "/home/simon/Documents/Si Work/PostDoc Work/Gbmauto help/2022-03_Frances_Naomi/2023-02-21 categorical variables issue/count_elasmo/Gaus_Best_line_isl_grp.csv"
if (is.character(x)) {
readr::read_csv(x) # readr::read_csv("/home/simon/Documents/Si Work/PostDoc Work/Gbmauto help/2022-03_Frances_Naomi/2023-02-21 categorical variables issue/count_elasmo/Gaus_Best_line_isl_grp.csv")
} else {
x <- x
}
if (is.character(x)) {
x <- readr::read_csv(x) # readr::read_csv("/home/simon/Documents/Si Work/PostDoc Work/Gbmauto help/2022-03_Frances_Naomi/2023-02-21 categorical variables issue/count_elasmo/Gaus_Best_line_isl_grp.csv")
} else {
x <- x
}
# add check to see whether csv is categorical: first column
if (class(x[, 1][[1]]) != "character") stop("csv is not a categorical/factorial variable")
x <- x |>
dplyr::mutate(ycentred = y - mean(y)) |>
dplyr::rename(Category = tidyselect::last_col(offset = 2)) |> # no first_col option
# re-order the x axis for categorical variables so they are either
# 1) in order from high to low or
dplyr::arrange(ycentred)
x$Category
levels <- x$Category
length(levels) != length(x$Category)
if (length(levels) != length(x$Category)) stop("number of levels doesn't match number of categories in x")
levels
levels %in% x$Category
all(levels %in% x$Category)
!all(levels %in% x$Category)
all(levels %in% x$Category)
c("australes",
"west tuamotu",
"east tuamotu",
"leeward",
"windward",
"marquesas") %in% x$Category
c("australesZ",
"west tuamotu",
"east tuamotu",
"leeward",
"windward",
"marquesas") %in% x$Category
!c("australesZ",
"west tuamotu",
"east tuamotu",
"leeward",
"windward",
"marquesas") %in% x$Category
levels[!c("australesZ",
"west tuamotu",
"east tuamotu",
"leeward",
"windward",
"marquesas") %in% x$Category]
levels[!levels %in% x$Category]
levels <- c("west tuamotu",
"east tuamotu",
"leeward",
"windward",
"australes",
"marquesas")
x <- "/home/simon/Documents/Si Work/PostDoc Work/Gbmauto help/2022-03_Frances_Naomi/2023-02-21 categorical variables issue/count_elasmo/Gaus_Best_line_isl_grp.csv"
levels <- c("west tuamotu",
"east tuamotu",
"leeward",
"windward",
"australes",
"marquesas")
if (is.character(x)) {
x <- readr::read_csv(x) # readr::read_csv("/home/simon/Documents/Si Work/PostDoc Work/Gbmauto help/2022-03_Frances_Naomi/2023-02-21 categorical variables issue/count_elasmo/Gaus_Best_line_isl_grp.csv")
} else {
x <- x
}
# add check to see whether csv is categorical: first column
if (class(x[, 1][[1]]) != "character") stop("csv is not a categorical/factorial variable")
x <- x |>
dplyr::mutate(ycentred = y - mean(y)) |> #make mean column
dplyr::rename(Category = tidyselect::last_col(offset = 2)) |> # no first_col option
dplyr::arrange(ycentred) # re-order the x axis for categorical variables in order from high to low value
# re-reorder by levels if present
if (!is.null(levels)) {
# check level number matches x categories
if (length(levels) != length(x$Category)) stop("number of levels doesn't match number of categories in x")
# check names match
if (!all(levels %in% x$Category)) stop(paste0("The following level names not present in categories in x: ",
levels[!levels %in% x$Category]))
x <- x |>
dplyr::mutate(Category = ordered(Category, levels = levels)) |> # recreate Category as ordered factor with levels
dplyr::arrange(Category) # arrange by labels (implicit)
}
View(x)
rm(tmp)
rm(tmp2)
ggplot(x) +
geom_col(aes(x = Category,
y = ycentred))
ggplot2::ggplot(x) +
ggplot2::geom_col(aes(x = Category,
y = ycentred)) +
# alter axis labels
ggplot2::labs(x = "",
y = "Marginal Effect") +
ggplot2::theme_minimal() %+replace% ggplot2::theme(
axis.text = ggplot2::element_text(size = rel(1.5)),
axis.title = ggplot2::element_text(size = rel(2)),
legend.text = ggplot2::element_text(size = rel(1)),
legend.title = ggplot2::element_text(size = rel(1.5)),
legend.title.align = 0, # otherwise effect type title centre aligned for some reason
plot.background = ggplot2::element_rect(fill = "white", colour = "grey50"), # white background
strip.text.x = ggplot2::element_text(size = rel(2)),
panel.border = ggplot2::element_rect(colour = "black", fill = NA, linewidth = 1),
legend.spacing.x = unit(0, "cm"), # compress spacing between legend items, this is min
legend.background = ggplot2::element_blank(),
panel.background = ggplot2::element_rect(fill = "white", colour = "grey50"),
panel.grid = ggplot2::element_line(colour = "grey90"),
legend.key = ggplot2::element_blank())
ggplot2::ggplot(x) +
ggplot2::geom_col(aes(x = Category,
y = ycentred)) +
# alter axis labels
ggplot2::labs(x = "",
y = "Marginal Effect") +
ggplot2::scale_x_discrete(guides(x =  guide_axis(angle = 90))) +
ggplot2::theme_minimal() %+replace% ggplot2::theme(
axis.text = ggplot2::element_text(size = rel(ggplot2axistext)),
axis.title = ggplot2::element_text(size = rel(ggplot2axistitle)),
legend.text = ggplot2::element_text(size = rel(ggplot2legendtext)),
legend.title = ggplot2::element_text(size = rel(ggplot2legendtitle)),
legend.title.align = ggplot2legendtitlealign, # otherwise effect type title centre aligned for some reason
plot.background = ggplot2::element_rect(fill = ggplot2plotbackgroundfill,
colour = ggplot2plotbackgroundcolour), # white background
strip.text.x = ggplot2::element_text(size = rel(ggplot2striptextx)),
panel.border = ggplot2::element_rect(colour = ggplot2panelbordercolour,
fill = ggplot2panelborderfill,
linewidth = ggplot2panelborderlinewidth),
legend.spacing.x = ggplot2legendspacingx, # compress spacing between legend items, this is min
legend.background = ggplot2legendbackground,
panel.background = ggplot2::element_rect(fill = ggplot2panelbackgroundfill,
colour = ggplot2panelbackgroundcolour),
panel.grid = ggplot2::element_line(colour = ggplot2panelgridcolour),
legend.key = ggplot2legendkey)
ggplot2labsx = "",
ggplot2labsx = ""
ggplot2labsy = "Marginal Effect"
ggplot2axistext = 1.5
ggplot2axistitle = 2
ggplot2legendtext = 1
ggplot2legendtitle = 1.5
ggplot2legendtitlealign = 0
ggplot2plotbackgroundfill = "white"
ggplot2plotbackgroundcolour = "grey50"
ggplot2striptextx = 2
ggplot2panelbordercolour = "black"
ggplot2panelborderfill = NA
ggplot2panelborderlinewidth = 1
ggplot2legendspacingx = unit(0, "cm")
ggplot2legendbackground = ggplot2::element_blank()
ggplot2panelbackgroundfill = "white"
ggplot2panelbackgroundcolour = "grey50"
ggplot2panelgridcolour = "grey90"
ggplot2legendkey = ggplot2::element_blank()
ggsavefilename = paste0(saveloc, lubridate::today(), "_SankeyAlluvial_EMT.SoEv-EfTyp_Col-EfSz.png")
ggsaveplot = last_plot()
ggsavedevice = "png"
ggsavepath = ""
ggsavescale = 2
ggsavewidth = 10
ggsaveheight = 4
ggsaveunits = "in"
ggsavedpi = 300
ggsavelimitsize = TRUE
ggplot2::ggplot(x) +
ggplot2::geom_col(aes(x = Category,
y = ycentred)) +
# alter axis labels
ggplot2::labs(x = "",
y = "Marginal Effect") +
ggplot2::scale_x_discrete(guides(x =  guide_axis(angle = 90))) +
ggplot2::theme_minimal() %+replace% ggplot2::theme(
axis.text = ggplot2::element_text(size = rel(ggplot2axistext)),
axis.title = ggplot2::element_text(size = rel(ggplot2axistitle)),
legend.text = ggplot2::element_text(size = rel(ggplot2legendtext)),
legend.title = ggplot2::element_text(size = rel(ggplot2legendtitle)),
legend.title.align = ggplot2legendtitlealign, # otherwise effect type title centre aligned for some reason
plot.background = ggplot2::element_rect(fill = ggplot2plotbackgroundfill,
colour = ggplot2plotbackgroundcolour), # white background
strip.text.x = ggplot2::element_text(size = rel(ggplot2striptextx)),
panel.border = ggplot2::element_rect(colour = ggplot2panelbordercolour,
fill = ggplot2panelborderfill,
linewidth = ggplot2panelborderlinewidth),
legend.spacing.x = ggplot2legendspacingx, # compress spacing between legend items, this is min
legend.background = ggplot2legendbackground,
panel.background = ggplot2::element_rect(fill = ggplot2panelbackgroundfill,
colour = ggplot2panelbackgroundcolour),
panel.grid = ggplot2::element_line(colour = ggplot2panelgridcolour),
legend.key = ggplot2legendkey)
ggplot2::ggplot(x) +
ggplot2::geom_col(aes(x = Category,
y = ycentred)) +
# alter axis labels
ggplot2::labs(x = "",
y = "Marginal Effect") +
# ggplot2::scale_x_discrete(guides(x =  guide_axis(angle = 90))) +
ggplot2::theme_minimal() %+replace% ggplot2::theme(
axis.text = ggplot2::element_text(size = rel(ggplot2axistext)),
axis.title = ggplot2::element_text(size = rel(ggplot2axistitle)),
legend.text = ggplot2::element_text(size = rel(ggplot2legendtext)),
legend.title = ggplot2::element_text(size = rel(ggplot2legendtitle)),
legend.title.align = ggplot2legendtitlealign, # otherwise effect type title centre aligned for some reason
plot.background = ggplot2::element_rect(fill = ggplot2plotbackgroundfill,
colour = ggplot2plotbackgroundcolour), # white background
strip.text.x = ggplot2::element_text(size = rel(ggplot2striptextx)),
panel.border = ggplot2::element_rect(colour = ggplot2panelbordercolour,
fill = ggplot2panelborderfill,
linewidth = ggplot2panelborderlinewidth),
legend.spacing.x = ggplot2legendspacingx, # compress spacing between legend items, this is min
legend.background = ggplot2legendbackground,
panel.background = ggplot2::element_rect(fill = ggplot2panelbackgroundfill,
colour = ggplot2panelbackgroundcolour),
panel.grid = ggplot2::element_line(colour = ggplot2panelgridcolour),
legend.key = ggplot2legendkey)
ggplot2::ggplot(x) +
ggplot2::geom_col(aes(x = Category,
y = ycentred)) +
ggplot2::scale_x_discrete(guides(x =  guide_axis(angle = 90))) +
# alter axis labels
ggplot2::labs(x = "",
y = "Marginal Effect") +
ggplot2::theme_minimal() %+replace% ggplot2::theme(
axis.text = ggplot2::element_text(size = rel(ggplot2axistext)),
axis.title = ggplot2::element_text(size = rel(ggplot2axistitle)),
legend.text = ggplot2::element_text(size = rel(ggplot2legendtext)),
legend.title = ggplot2::element_text(size = rel(ggplot2legendtitle)),
legend.title.align = ggplot2legendtitlealign, # otherwise effect type title centre aligned for some reason
plot.background = ggplot2::element_rect(fill = ggplot2plotbackgroundfill,
colour = ggplot2plotbackgroundcolour), # white background
strip.text.x = ggplot2::element_text(size = rel(ggplot2striptextx)),
panel.border = ggplot2::element_rect(colour = ggplot2panelbordercolour,
fill = ggplot2panelborderfill,
linewidth = ggplot2panelborderlinewidth),
legend.spacing.x = ggplot2legendspacingx, # compress spacing between legend items, this is min
legend.background = ggplot2legendbackground,
panel.background = ggplot2::element_rect(fill = ggplot2panelbackgroundfill,
colour = ggplot2panelbackgroundcolour),
panel.grid = ggplot2::element_line(colour = ggplot2panelgridcolour),
legend.key = ggplot2legendkey)
ggplot2::ggplot(x) +
ggplot2::geom_col(aes(x = Category,
y = ycentred)) +
guides(x =  guide_axis(angle = 90)) +
# alter axis labels
ggplot2::labs(x = "",
y = "Marginal Effect") +
ggplot2::theme_minimal() %+replace% ggplot2::theme(
axis.text = ggplot2::element_text(size = rel(ggplot2axistext)),
axis.title = ggplot2::element_text(size = rel(ggplot2axistitle)),
legend.text = ggplot2::element_text(size = rel(ggplot2legendtext)),
legend.title = ggplot2::element_text(size = rel(ggplot2legendtitle)),
legend.title.align = ggplot2legendtitlealign, # otherwise effect type title centre aligned for some reason
plot.background = ggplot2::element_rect(fill = ggplot2plotbackgroundfill,
colour = ggplot2plotbackgroundcolour), # white background
strip.text.x = ggplot2::element_text(size = rel(ggplot2striptextx)),
panel.border = ggplot2::element_rect(colour = ggplot2panelbordercolour,
fill = ggplot2panelborderfill,
linewidth = ggplot2panelborderlinewidth),
legend.spacing.x = ggplot2legendspacingx, # compress spacing between legend items, this is min
legend.background = ggplot2legendbackground,
panel.background = ggplot2::element_rect(fill = ggplot2panelbackgroundfill,
colour = ggplot2panelbackgroundcolour),
panel.grid = ggplot2::element_line(colour = ggplot2panelgridcolour),
legend.key = ggplot2legendkey)
?guides
?guide_axis
ggplot2guideaxisangle = 0
ggplot2::ggplot(x) +
ggplot2::geom_col(aes(x = Category,
y = ycentred)) +
ggplot2::guides(x =  ggplot2::guide_axis(angle = ggplot2guideaxisangle)) +
# alter axis labels
ggplot2::labs(x = "",
y = "Marginal Effect") +
ggplot2::theme_minimal() %+replace% ggplot2::theme(
axis.text = ggplot2::element_text(size = rel(ggplot2axistext)),
axis.title = ggplot2::element_text(size = rel(ggplot2axistitle)),
legend.text = ggplot2::element_text(size = rel(ggplot2legendtext)),
legend.title = ggplot2::element_text(size = rel(ggplot2legendtitle)),
legend.title.align = ggplot2legendtitlealign, # otherwise effect type title centre aligned for some reason
plot.background = ggplot2::element_rect(fill = ggplot2plotbackgroundfill,
colour = ggplot2plotbackgroundcolour), # white background
strip.text.x = ggplot2::element_text(size = rel(ggplot2striptextx)),
panel.border = ggplot2::element_rect(colour = ggplot2panelbordercolour,
fill = ggplot2panelborderfill,
linewidth = ggplot2panelborderlinewidth),
legend.spacing.x = ggplot2legendspacingx, # compress spacing between legend items, this is min
legend.background = ggplot2legendbackground,
panel.background = ggplot2::element_rect(fill = ggplot2panelbackgroundfill,
colour = ggplot2panelbackgroundcolour),
panel.grid = ggplot2::element_line(colour = ggplot2panelgridcolour),
legend.key = ggplot2legendkey)
x <- "/home/simon/Documents/Si Work/PostDoc Work/Gbmauto help/2022-03_Frances_Naomi/2023-02-21 categorical variables issue/count_elasmo/Gaus_Best_line_isl_grp.csv"
levels <- c("west tuamotu",
"east tuamotu",
"leeward",
"windward",
"australes",
"marquesas")
if (is.character(x)) {
x <- readr::read_csv(x) # readr::read_csv("/home/simon/Documents/Si Work/PostDoc Work/Gbmauto help/2022-03_Frances_Naomi/2023-02-21 categorical variables issue/count_elasmo/Gaus_Best_line_isl_grp.csv")
} else {
x <- x
}
View(x)
# add check to see whether csv is categorical: first column
if (class(x[, 1][[1]]) != "character") stop("csv is not a categorical/factorial variable")
x <- x |>
# dplyr::mutate(ycentred = y - mean(y)) |> # make mean column
# The above exists already in gbm.auto L843
# Also it uses preset colname y produced by gbm.auto.
dplyr::rename(Category = tidyselect::last_col(offset = 2)) |> # no first_col option
dplyr::arrange(ycentred) # re-order the x axis for categorical variables in order from high to low value
# re-reorder by levels if present
if (!is.null(levels)) {
# check level number matches x categories
if (length(levels) != length(x$Category)) stop("number of levels doesn't match number of categories in x")
# check names match
if (!all(levels %in% x$Category)) stop(paste0("The following level names not present in categories in x: ",
levels[!levels %in% x$Category]))
x <- x |>
dplyr::mutate(Category = ordered(Category, levels = levels)) |> # recreate Category as ordered factor with levels
dplyr::arrange(Category) # arrange by labels (implicit)
}
ggplot2::ggplot(x) +
ggplot2::geom_col(aes(x = Category,
y = ycentred)) +
# rotate x axis labels
ggplot2::guides(x =  ggplot2::guide_axis(angle = ggplot2guideaxisangle)) +
# alter axis labels
ggplot2::labs(x = "",
y = "Marginal Effect") +
# change theme elements
ggplot2::theme_minimal() %+replace% ggplot2::theme(
axis.text = ggplot2::element_text(size = rel(ggplot2axistext)),
axis.title = ggplot2::element_text(size = rel(ggplot2axistitle)),
legend.text = ggplot2::element_text(size = rel(ggplot2legendtext)),
legend.title = ggplot2::element_text(size = rel(ggplot2legendtitle)),
legend.title.align = ggplot2legendtitlealign, # otherwise effect type title centre aligned for some reason
plot.background = ggplot2::element_rect(fill = ggplot2plotbackgroundfill,
colour = ggplot2plotbackgroundcolour), # white background
strip.text.x = ggplot2::element_text(size = rel(ggplot2striptextx)),
panel.border = ggplot2::element_rect(colour = ggplot2panelbordercolour,
fill = ggplot2panelborderfill,
linewidth = ggplot2panelborderlinewidth),
legend.spacing.x = ggplot2legendspacingx, # compress spacing between legend items, this is min
legend.background = ggplot2legendbackground,
panel.background = ggplot2::element_rect(fill = ggplot2panelbackgroundfill,
colour = ggplot2panelbackgroundcolour),
panel.grid = ggplot2::element_line(colour = ggplot2panelgridcolour),
legend.key = ggplot2legendkey)
factgorplotlevels <- c("west tuamotu",
"east tuamotu",
"leeward",
"windward",
"australes",
"marquesas")
View(x)
?last_plot
?unit
?aes
?rel
devtools::document()
(193129.590+194114)/2
devtools::document()
?waiver
devtools::document()
usethis::use_citation()
citation("gbm.auto")
usethis::use_github_action_check_standard()
citation("glue")
?citation
devtools::document()
devtools::check()
devtools::document()
devtools::check()
load("~/Dropbox/Galway/Analysis/R/gbm.auto/data/Juveniles.RData")
View(Juveniles)
devtools::document()
devtools::check()
?setNames
devtools::document()
devtools::check()
devtools::document()
devtools::release()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
?setNames
devtools::document()
devtools::check()
devtools::release()
?layer_spatial
devtools::document()
usethis::use_package_doc
devtools::document()
