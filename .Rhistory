alerts = FALSE,
randomvar = TRUE,
smooth = TRUE,
savedir = "/home/simon/Documents/Si Work/PostDoc Work/Gbmauto help/2022-12-06 Cat Wells/")
devtools::document()
# SD TEST HERE####
remotes::install_github("SimonDedman/gbm.auto") #only do this if needs updating again!
library(gbm.auto)
RSandVSsamples <- read.csv("/home/simon/Documents/Si Work/PostDoc Work/Gbmauto help/2022-12-06 Cat Wells/NarrowedVars_07272023_RSVS.csv")
MatureRSGrid <- read.csv("/home/simon/Documents/Si Work/PostDoc Work/Gbmauto help/2022-12-06 Cat Wells/MatureRSGrid.csv")
RSVScropmap <- sf::st_read(dsn = "/home/simon/Documents/Si Work/PostDoc Work/Gbmauto help/2022-12-06 Cat Wells/Map/CroppedMap/Crop_Map.shp")
setwd("/home/simon/Documents/Si Work/PostDoc Work/Gbmauto help/2022-12-06 Cat Wells/")
# but gbm.mapsf not outputting data, whereas gbm.map IS for b&w. Why?
# Abundance_Preds_only.csv col order = lat lon pred. Is this way due to changed order in grids?
# gbm.auto L1787 : gbm.mapsf(predabund = grids[c(gridslat, gridslon, predabund)],
# gbm.mapsf function defaults:
# gbm.mapsf <- function(
#     predabund = NULL, # predicted abundance data frame produced by gbm.auto (Abundance_Preds_only.csv), with Latitude, Longitude, and Predicted Abundance columns.
#     predabundlon = 2, # Longitude column number.
#     predabundlat = 1, # Latitude column number.
#     predabundpreds = 3,
# Looks right
predabund <- read.csv("/home/simon/Documents/Si Work/PostDoc Work/Gbmauto help/2022-12-06 Cat Wells/CPUESpawnVS/Abundance_Preds_only.csv")
gbm.auto::gbm.mapsf(predabund = predabund,
# predabundlon = 2, # Longitude column number.
# predabundlat = 1, # Latitude column number.
# predabundpreds = 3, # Predicted abundance column number.
# myLocation = NULL, # location for extents, format c(xmin, ymin, xmax, ymax).
# trim = TRUE, # remove NA & 0 values and crop to remaining date extents? Default TRUE.
# scale100 = FALSE, # scale Predicted Abundance to 100? Default FALSE.
# gmapsAPI = NULL, # enter your Google maps API here, quoted character string
# mapsource = "google", # Source for ggmap::get_map; uses Stamen as fallback if no Google Maps API present. Options: "google", "stamen", "gbm.basemap".
# googlemap = TRUE, # If pulling basemap from Google maps, this sets expansion factors since
# # Google Maps tiling zoom setup doesn't align to myLocation extents.
# maptype = "satellite",
# darkenproportion = 0, # amount to darken the basemap, 0-1.
mapzoom = 6, # google: 3 (continent) - 21 (building). stamen: 0-18
shape = RSVScropmap, # If mapsource is "gbm.basemap", enter the full path to gbm.basemaps downloaded map, typically Crop_Map.shp, including the .shp.
# expandfactor = 0, # extents expansion factor for basemap. default was 1.6
# colourscale = "viridis", # Scale fill colour scheme to use, default "viridis", other option is "gradient".
# colorscale = NULL, # Scale fill colour scheme to use, default NULL, populating this will overwrite colourscale.
# heatcolours = c("white", "yellow", "orange","red", "brown4"), # Vector of colours if gradient selected for colourscale, defaults to heatmap theme.
# colournumber = 8, # Number of colours to spread heatcolours over, if gradient selected for colourscale. Default 8.
studyspecies = "TEST",
# plottitle = paste0("Predicted abundance of ", studyspecies),
# plotsubtitle = "CPUE", # data %>% distinct(ID) %>% nrow() # 13
# legendtitle = "CPUE",
# plotcaption = paste0("gbm.auto::gbm.map, ", lubridate::today()),
# axisxlabel = "Longitude",
# axisylabel = "Latitude",
legendposition = c(0.05, 0.18),
# fontsize = 12,
# fontfamily = "Times New Roman",
# filesavename = paste0(lubridate::today(), "_", studyspecies, "_", legendtitle, ".png"),
savedir = "/home/simon/Documents/Si Work/PostDoc Work/Gbmauto help/2022-12-06 Cat Wells/CPUESpawnVS/gbmmapsftest"
)
if (TRUE & TRUE) print("yay")
mapsource = "google"
mapzoom = NULL
if (mapsource == "google" & mapzoom == NULL) print("yay")
mapzoom == NULL
is.null(mapzoom)
devtools::document()
# SD TEST HERE####
remotes::install_github("SimonDedman/gbm.auto") #only do this if needs updating again!
# ctrl shift F10
library(gbm.auto)
RSandVSsamples <- read.csv("/home/simon/Documents/Si Work/PostDoc Work/Gbmauto help/2022-12-06 Cat Wells/NarrowedVars_07272023_RSVS.csv")
MatureRSGrid <- read.csv("/home/simon/Documents/Si Work/PostDoc Work/Gbmauto help/2022-12-06 Cat Wells/MatureRSGrid.csv")
RSVScropmap <- sf::st_read(dsn = "/home/simon/Documents/Si Work/PostDoc Work/Gbmauto help/2022-12-06 Cat Wells/Map/CroppedMap/Crop_Map.shp")
setwd("/home/simon/Documents/Si Work/PostDoc Work/Gbmauto help/2022-12-06 Cat Wells/")
# but gbm.mapsf not outputting data, whereas gbm.map IS for b&w. Why?
# Abundance_Preds_only.csv col order = lat lon pred. Is this way due to changed order in grids?
# gbm.auto L1787 : gbm.mapsf(predabund = grids[c(gridslat, gridslon, predabund)],
# gbm.mapsf function defaults:
# gbm.mapsf <- function(
#     predabund = NULL, # predicted abundance data frame produced by gbm.auto (Abundance_Preds_only.csv), with Latitude, Longitude, and Predicted Abundance columns.
#     predabundlon = 2, # Longitude column number.
#     predabundlat = 1, # Latitude column number.
#     predabundpreds = 3,
# Looks right
predabund <- read.csv("/home/simon/Documents/Si Work/PostDoc Work/Gbmauto help/2022-12-06 Cat Wells/CPUESpawnVS/Abundance_Preds_only.csv")
gbm.auto::gbm.mapsf(predabund = predabund,
# predabundlon = 2, # Longitude column number.
# predabundlat = 1, # Latitude column number.
# predabundpreds = 3, # Predicted abundance column number.
# myLocation = NULL, # location for extents, format c(xmin, ymin, xmax, ymax).
# trim = TRUE, # remove NA & 0 values and crop to remaining date extents? Default TRUE.
# scale100 = FALSE, # scale Predicted Abundance to 100? Default FALSE.
# gmapsAPI = NULL, # enter your Google maps API here, quoted character string
# mapsource = "google", # Source for ggmap::get_map; uses Stamen as fallback if no Google Maps API present. Options: "google", "stamen", "gbm.basemap".
# googlemap = TRUE, # If pulling basemap from Google maps, this sets expansion factors since
# # Google Maps tiling zoom setup doesn't align to myLocation extents.
# maptype = "satellite",
# darkenproportion = 0, # amount to darken the basemap, 0-1.
# mapzoom = NULL, # google: 3 (continent) - 21 (building). stamen: 0-18
shape = RSVScropmap, # If mapsource is "gbm.basemap", enter the full path to gbm.basemaps downloaded map, typically Crop_Map.shp, including the .shp.
# expandfactor = 0, # extents expansion factor for basemap. default was 1.6
# colourscale = "viridis", # Scale fill colour scheme to use, default "viridis", other option is "gradient".
# colorscale = NULL, # Scale fill colour scheme to use, default NULL, populating this will overwrite colourscale.
# heatcolours = c("white", "yellow", "orange","red", "brown4"), # Vector of colours if gradient selected for colourscale, defaults to heatmap theme.
# colournumber = 8, # Number of colours to spread heatcolours over, if gradient selected for colourscale. Default 8.
studyspecies = "TEST",
# plottitle = paste0("Predicted abundance of ", studyspecies),
# plotsubtitle = "CPUE", # data %>% distinct(ID) %>% nrow() # 13
# legendtitle = "CPUE",
# plotcaption = paste0("gbm.auto::gbm.map, ", lubridate::today()),
# axisxlabel = "Longitude",
# axisylabel = "Latitude",
legendposition = c(0.05, 0.18),
# fontsize = 12,
# fontfamily = "Times New Roman",
# filesavename = paste0(lubridate::today(), "_", studyspecies, "_", legendtitle, ".png"),
savedir = "/home/simon/Documents/Si Work/PostDoc Work/Gbmauto help/2022-12-06 Cat Wells/CPUESpawnVS/gbmmapsftest"
)
gbm.auto::gbm.mapsf(predabund = predabund,
# predabundlon = 2, # Longitude column number.
# predabundlat = 1, # Latitude column number.
# predabundpreds = 3, # Predicted abundance column number.
# myLocation = NULL, # location for extents, format c(xmin, ymin, xmax, ymax).
trim = TRUE, # remove NA & 0 values and crop to remaining date extents? Default TRUE.
# scale100 = FALSE, # scale Predicted Abundance to 100? Default FALSE.
# gmapsAPI = NULL, # enter your Google maps API here, quoted character string
# mapsource = "google", # Source for ggmap::get_map; uses Stamen as fallback if no Google Maps API present. Options: "google", "stamen", "gbm.basemap".
# googlemap = TRUE, # If pulling basemap from Google maps, this sets expansion factors since
# # Google Maps tiling zoom setup doesn't align to myLocation extents.
# maptype = "satellite",
# darkenproportion = 0, # amount to darken the basemap, 0-1.
# mapzoom = NULL, # google: 3 (continent) - 21 (building). stamen: 0-18
shape = RSVScropmap, # If mapsource is "gbm.basemap", enter the full path to gbm.basemaps downloaded map, typically Crop_Map.shp, including the .shp.
# expandfactor = 0, # extents expansion factor for basemap. default was 1.6
# colourscale = "viridis", # Scale fill colour scheme to use, default "viridis", other option is "gradient".
# colorscale = NULL, # Scale fill colour scheme to use, default NULL, populating this will overwrite colourscale.
# heatcolours = c("white", "yellow", "orange","red", "brown4"), # Vector of colours if gradient selected for colourscale, defaults to heatmap theme.
# colournumber = 8, # Number of colours to spread heatcolours over, if gradient selected for colourscale. Default 8.
studyspecies = "TEST",
# plottitle = paste0("Predicted abundance of ", studyspecies),
# plotsubtitle = "CPUE", # data %>% distinct(ID) %>% nrow() # 13
# legendtitle = "CPUE",
# plotcaption = paste0("gbm.auto::gbm.map, ", lubridate::today()),
# axisxlabel = "Longitude",
# axisylabel = "Latitude",
legendposition = c(0.05, 0.18),
# fontsize = 12,
# fontfamily = "Times New Roman",
# filesavename = paste0(lubridate::today(), "_", studyspecies, "_", legendtitle, ".png"),
savedir = "/home/simon/Documents/Si Work/PostDoc Work/Gbmauto help/2022-12-06 Cat Wells/CPUESpawnVS/gbmmapsftest"
)
gbm.auto::gbm.mapsf(predabund = predabund,
# predabundlon = 2, # Longitude column number.
# predabundlat = 1, # Latitude column number.
# predabundpreds = 3, # Predicted abundance column number.
# myLocation = NULL, # location for extents, format c(xmin, ymin, xmax, ymax).
trim = TRUE, # remove NA & 0 values and crop to remaining date extents? Default TRUE.
trimfivepct = TRUE,
# scale100 = FALSE, # scale Predicted Abundance to 100? Default FALSE.
# gmapsAPI = NULL, # enter your Google maps API here, quoted character string
# mapsource = "google", # Source for ggmap::get_map; uses Stamen as fallback if no Google Maps API present. Options: "google", "stamen", "gbm.basemap".
# googlemap = TRUE, # If pulling basemap from Google maps, this sets expansion factors since
# # Google Maps tiling zoom setup doesn't align to myLocation extents.
# maptype = "satellite",
# darkenproportion = 0, # amount to darken the basemap, 0-1.
# mapzoom = NULL, # google: 3 (continent) - 21 (building). stamen: 0-18
shape = RSVScropmap, # If mapsource is "gbm.basemap", enter the full path to gbm.basemaps downloaded map, typically Crop_Map.shp, including the .shp.
# expandfactor = 0, # extents expansion factor for basemap. default was 1.6
# colourscale = "viridis", # Scale fill colour scheme to use, default "viridis", other option is "gradient".
# colorscale = NULL, # Scale fill colour scheme to use, default NULL, populating this will overwrite colourscale.
# heatcolours = c("white", "yellow", "orange","red", "brown4"), # Vector of colours if gradient selected for colourscale, defaults to heatmap theme.
# colournumber = 8, # Number of colours to spread heatcolours over, if gradient selected for colourscale. Default 8.
studyspecies = "TEST",
# plottitle = paste0("Predicted abundance of ", studyspecies),
# plotsubtitle = "CPUE", # data %>% distinct(ID) %>% nrow() # 13
# legendtitle = "CPUE",
# plotcaption = paste0("gbm.auto::gbm.map, ", lubridate::today()),
# axisxlabel = "Longitude",
# axisylabel = "Latitude",
legendposition = c(0.05, 0.18),
# fontsize = 12,
# fontfamily = "Times New Roman",
# filesavename = paste0(lubridate::today(), "_", studyspecies, "_", legendtitle, ".png"),
savedir = "/home/simon/Documents/Si Work/PostDoc Work/Gbmauto help/2022-12-06 Cat Wells/CPUESpawnVS/gbmmapsftest"
)
devtools::document()
devtools::check()
?rename
data("iris")
tmp <- iris |> dplyr::rename("MYSPECIES" = "Species")
devtools::document()
devtools::check()
View(iris)
tmp <- iris |> dplyr::arrange("Sepal.Length")
View(tmp)
tmp <- iris |> dplyr::arrange(Sepal.Length)
View(tmp)
tmp <- iris |> dplyr::arrange("Petal.Length")
View(tmp)
tmp <- iris |> dplyr::mutate(Petal.Length = ordered("Petal.Length"))
View(tmp)
?ordered
x <- readr@@read_csv("/home/simon/Documents/Si Work/PostDoc Work/Kroetz & Dedman Sawfish BRT/P.Pectinata.CPUE.m2/AllExpvars/P.Pectinata.CPUE.m2/Bin_Best_line_Mesh.Inch.csv")
x <- readr::read_csv("/home/simon/Documents/Si Work/PostDoc Work/Kroetz & Dedman Sawfish BRT/P.Pectinata.CPUE.m2/AllExpvars/P.Pectinata.CPUE.m2/Bin_Best_line_Mesh.Inch.csv")
x <- x |>
# dplyr::mutate(ycentred = y - mean(y)) |> # make mean column
# The above exists already in gbm.auto L843
# Also it uses preset colname y produced by gbm.auto.
dplyr::rename("Category" = tidyselect::last_col(offset = 2), # no first_col option
"ycentred" = tidyselect::last_col()) |>
# 2023-08-30 quoted Category to hopefully address gbm.factorplot: no visible binding for global variable ‘Category’
# also need to do for ycentred
dplyr::arrange(ycentred) # re-order the x axis for categorical variables in order from high to low value
View(x)
x <- readr::read_csv("/home/simon/Documents/Si Work/PostDoc Work/Kroetz & Dedman Sawfish BRT/P.Pectinata.CPUE.m2/AllExpvars/P.Pectinata.CPUE.m2/Bin_Best_line_Year.csv")
View(x)
x <- x |>
# dplyr::mutate(ycentred = y - mean(y)) |> # make mean column
# The above exists already in gbm.auto L843
# Also it uses preset colname y produced by gbm.auto.
dplyr::rename("Category" = tidyselect::last_col(offset = 2), # no first_col option
"ycentred" = tidyselect::last_col()) |> # attempt to address no visible binding for global variable ‘Category’
# 2023-08-30 quoted Category to hopefully address gbm.factorplot: no visible binding for global variable ‘Category’
# also need to do for ycentred
dplyr::arrange("ycentred") # re-order the x axis for categorical variables in order from high to low value
View(x)
x <- x |>
# dplyr::mutate(ycentred = y - mean(y)) |> # make mean column
# The above exists already in gbm.auto L843
# Also it uses preset colname y produced by gbm.auto.
dplyr::rename("Category" = tidyselect::last_col(offset = 2), # no first_col option
"ycentred" = tidyselect::last_col()) |> # attempt to address no visible binding for global variable ‘Category’
# 2023-08-30 quoted Category to hopefully address gbm.factorplot: no visible binding for global variable ‘Category’
# also need to do for ycentred
dplyr::arrange(ycentred) # re-order the x axis for categorical variables in order from high to low value
devtools::document()
devtools::check()
data("iris")
tmp <- iris |> dplyr::mutate("Category" = dplyr::ordered(Sepal.Length))
tmp <- iris |> dplyr::mutate("Category" = ordered(Sepal.Length))
View(tmp)
tmp <- iris |> dplyr::mutate("Category" = ordered(Sepal.Length)) |> arrange(Category)
tmp <- iris |> dplyr::mutate("Category" = ordered(Sepal.Length)) |> dplyr::arrange(Category)
View(tmp)
tmp <- iris |> dplyr::mutate("Category" = ordered(Sepal.Length)) |> dplyr::arrange("Category")
rm(tmp)
tmp <- iris |> dplyr::mutate("Category" = ordered(Sepal.Length)) |> dplyr::arrange("Category")
View(tmp)
rm(tmp)
tmp <- iris |> dplyr::mutate("Category" = ordered("Sepal.Length")) |> dplyr::arrange(Category)
View(tmp)
# cran tests
# attempt to address no visible binding for global variable ‘Category’ and ycentred
mydata <- read.csv("/home/simon/Documents/Si Work/PostDoc Work/Kroetz & Dedman Sawfish BRT/P.Pectinata.CPUE.m2/AllExpvars/P.Pectinata.CPUE.m2/Bin_Best_line_Year.png")
# cran tests
# attempt to address no visible binding for global variable ‘Category’ and ycentred
mydata <- read.csv("/home/simon/Documents/Si Work/PostDoc Work/Kroetz & Dedman Sawfish BRT/P.Pectinata.CPUE.m2/AllExpvars/P.Pectinata.CPUE.m2/Bin_Best_line_Year.csv")
View(mydata)
gbm.auto::gbm.factorplot(x = mydata, ggsavefilename = "/home/simon/Documents/Si Work/PostDoc Work/Kroetz & Dedman Sawfish BRT/P.Pectinata.CPUE.m2/AllExpvars/P.Pectinata.CPUE.m2/Bin_Best_line_Year_ggTEST")
gbm.auto::gbm.factorplot(x = mydata, ggsavefilename = "/home/simon/Documents/Si Work/PostDoc Work/Kroetz & Dedman Sawfish BRT/P.Pectinata.CPUE.m2/AllExpvars/P.Pectinata.CPUE.m2/Bin_Best_line_Year_ggTEST.png")
gbm.auto::gbm.factorplot(x = mydata,
ggsavefilename = "/home/simon/Documents/Si Work/PostDoc Work/Kroetz & Dedman Sawfish BRT/P.Pectinata.CPUE.m2/AllExpvars/P.Pectinata.CPUE.m2/Bin_Best_line_Year_ggTEST.png",
gsavewidth = 4*480,
ggsaveheight = 4*480,
ggsaveunits = "px")
gbm.auto::gbm.factorplot(x = mydata,
ggsavefilename = "/home/simon/Documents/Si Work/PostDoc Work/Kroetz & Dedman Sawfish BRT/P.Pectinata.CPUE.m2/AllExpvars/P.Pectinata.CPUE.m2/Bin_Best_line_Year_ggTEST.png")
gbm.auto::gbm.factorplot(x = mydata,
ggsavefilename = "/home/simon/Documents/Si Work/PostDoc Work/Kroetz & Dedman Sawfish BRT/P.Pectinata.CPUE.m2/AllExpvars/P.Pectinata.CPUE.m2/Bin_Best_line_Year_ggTEST.png",
gsavewidth = (4*480),
ggsaveheight = (4*480),
ggsaveunits = "px")
4*480
gbm.auto::gbm.factorplot(x = mydata,
ggsavefilename = "/home/simon/Documents/Si Work/PostDoc Work/Kroetz & Dedman Sawfish BRT/P.Pectinata.CPUE.m2/AllExpvars/P.Pectinata.CPUE.m2/Bin_Best_line_Year_ggTEST.png",
gsavewidth = 1920,
ggsaveheight = 1920,
ggsaveunits = "px")
gbm.auto::gbm.factorplot(x = mydata,
ggsavefilename = "/home/simon/Documents/Si Work/PostDoc Work/Kroetz & Dedman Sawfish BRT/P.Pectinata.CPUE.m2/AllExpvars/P.Pectinata.CPUE.m2/Bin_Best_line_Year_ggTEST.png",
gsavewidth = 1920,
ggsaveheight = 1920,
ggsaveunits = "cm")
gbm.auto::gbm.factorplot(x = mydata,
ggsavefilename = "/home/simon/Documents/Si Work/PostDoc Work/Kroetz & Dedman Sawfish BRT/P.Pectinata.CPUE.m2/AllExpvars/P.Pectinata.CPUE.m2/Bin_Best_line_Year_ggTEST.png",
gsavewidth = 19,
ggsaveheight = 19,
ggsaveunits = "cm")
gbm.auto::gbm.factorplot(x = mydata,
ggsavefilename = "/home/simon/Documents/Si Work/PostDoc Work/Kroetz & Dedman Sawfish BRT/P.Pectinata.CPUE.m2/AllExpvars/P.Pectinata.CPUE.m2/Bin_Best_line_Year_ggTEST.png",
gsavewidth = 30,
ggsaveheight = 19,
ggsaveunits = "cm")
gbm.auto::gbm.factorplot(x = mydata,
ggsavefilename = "/home/simon/Documents/Si Work/PostDoc Work/Kroetz & Dedman Sawfish BRT/P.Pectinata.CPUE.m2/AllExpvars/P.Pectinata.CPUE.m2/Bin_Best_line_Year_ggTEST.png",
gsavewidth = 50,
ggsaveheight = 19,
ggsaveunits = "cm")
gbm.auto::gbm.factorplot(x = mydata,
ggsavefilename = "/home/simon/Documents/Si Work/PostDoc Work/Kroetz & Dedman Sawfish BRT/P.Pectinata.CPUE.m2/AllExpvars/P.Pectinata.CPUE.m2/Bin_Best_line_Year_ggTEST.png",
gsavewidth = 5,
ggsaveheight = 19,
ggsaveunits = "cm")
gbm.auto::gbm.factorplot(x = mydata,
ggsavefilename = "/home/simon/Documents/Si Work/PostDoc Work/Kroetz & Dedman Sawfish BRT/P.Pectinata.CPUE.m2/AllExpvars/P.Pectinata.CPUE.m2/Bin_Best_line_Year_ggTEST.png",
# gsavewidth = 5,
ggsaveheight = 19,
ggsaveunits = "cm")
gbm.auto::gbm.factorplot(x = mydata,
ggsavefilename = "/home/simon/Documents/Si Work/PostDoc Work/Kroetz & Dedman Sawfish BRT/P.Pectinata.CPUE.m2/AllExpvars/P.Pectinata.CPUE.m2/Bin_Best_line_Year_ggTEST.png",
# gsavewidth = 5,
ggsaveheight = 9,
ggsaveunits = "cm")
gbm.auto::gbm.factorplot(x = mydata,
ggsavefilename = "/home/simon/Documents/Si Work/PostDoc Work/Kroetz & Dedman Sawfish BRT/P.Pectinata.CPUE.m2/AllExpvars/P.Pectinata.CPUE.m2/Bin_Best_line_Year_ggTEST.png",
# gsavewidth = 5,
ggsaveheight = 4*480,
ggsaveunits = "px")
gbm.auto::gbm.factorplot(x = mydata,
ggsavefilename = "/home/simon/Documents/Si Work/PostDoc Work/Kroetz & Dedman Sawfish BRT/P.Pectinata.CPUE.m2/AllExpvars/P.Pectinata.CPUE.m2/Bin_Best_line_Year_ggTEST.png",
# gsavewidth = 5,
ggsaveheight = 3*480,
ggsaveunits = "px")
gbm.auto::gbm.factorplot(x = mydata,
ggsavefilename = "/home/simon/Documents/Si Work/PostDoc Work/Kroetz & Dedman Sawfish BRT/P.Pectinata.CPUE.m2/AllExpvars/P.Pectinata.CPUE.m2/Bin_Best_line_Year_ggTEST.png",
# gsavewidth = 5,
ggsaveheight = 1*480,
ggsaveunits = "px")
gbm.auto::gbm.factorplot(x = mydata,
ggsavefilename = "/home/simon/Documents/Si Work/PostDoc Work/Kroetz & Dedman Sawfish BRT/P.Pectinata.CPUE.m2/AllExpvars/P.Pectinata.CPUE.m2/Bin_Best_line_Year_ggTEST.png",
# gsavewidth = 5,
ggsaveheight = 240,
ggsaveunits = "px")
gbm.auto::gbm.factorplot(x = mydata,
ggsavefilename = "/home/simon/Documents/Si Work/PostDoc Work/Kroetz & Dedman Sawfish BRT/P.Pectinata.CPUE.m2/AllExpvars/P.Pectinata.CPUE.m2/Bin_Best_line_Year_ggTEST.png",
ggsavewidth = 4*480,
ggsaveheight = 4*480,
ggsaveunits = "px")
source("~/Dropbox/Galway/Analysis/R/gbm.auto/R/gbm.factorplot.R")
gbm.auto::gbm.factorplot(x = mydata,
ggsavefilename = "/home/simon/Documents/Si Work/PostDoc Work/Kroetz & Dedman Sawfish BRT/P.Pectinata.CPUE.m2/AllExpvars/P.Pectinata.CPUE.m2/Bin_Best_line_Year_ggTEST.png",
ggsavewidth = 4*480,
ggsaveheight = 4*480,
ggsaveunits = "px")
source("~/Dropbox/Galway/Analysis/R/gbm.auto/R/gbm.factorplot.R")
gbm.auto::gbm.factorplot(x = mydata,
ggsavefilename = "/home/simon/Documents/Si Work/PostDoc Work/Kroetz & Dedman Sawfish BRT/P.Pectinata.CPUE.m2/AllExpvars/P.Pectinata.CPUE.m2/Bin_Best_line_Year_ggTEST.png",
ggsavewidth = 4*480,
ggsaveheight = 4*480,
ggsaveunits = "px")
factorplotlevels = NULL
ggplot2guideaxisangle = 0
ggplot2labsx = ""
ggplot2labsy = "Marginal Effect"
ggplot2axistext = 1.5
ggplot2axistitle = 2
ggplot2legendtext = 1
ggplot2legendtitle = 1.5
ggplot2legendtitlealign = 0
ggplot2plotbackgroundfill = "white"
ggplot2plotbackgroundcolour = "grey50"
ggplot2striptextx = 2
ggplot2panelbordercolour = "black"
ggplot2panelborderfill = NA
ggplot2panelborderlinewidth = 1
ggplot2legendspacingx = grid::unit(0, "cm")
ggplot2legendbackground = ggplot2::element_blank()
ggplot2panelbackgroundfill = "white"
ggplot2panelbackgroundcolour = "grey50"
ggplot2panelgridcolour = "grey90"
ggplot2legendkey = ggplot2::element_blank()
ggsavefilename = paste0(lubridate::today(), "_Categorical-variable.png")
ggsaveplot = ggplot2::last_plot()
ggsavedevice = "png"
ggsavepath = ""
ggsavescale = 2
ggsavewidth = 10
ggsaveheight = 4
ggsaveunits = "in"
ggsavedpi = 300
ggsavelimitsize = TRUE
x = mydata
ggsavefilename = "/home/simon/Documents/Si Work/PostDoc Work/Kroetz & Dedman Sawfish BRT/P.Pectinata.CPUE.m2/AllExpvars/P.Pectinata.CPUE.m2/Bin_Best_line_Year_ggTEST.png"
ggsavewidth = 4*480
ggsaveheight = 4*480
ggsaveunits = "px"
is.character(x)
if (is.character(x)) {
x <- readr::read_csv(x) # readr::read_csv("/home/simon/Documents/Si Work/PostDoc Work/Gbmauto help/2022-03_Frances_Naomi/2023-02-21 categorical variables issue/count_elasmo/Gaus_Best_line_isl_grp.csv")
} else {
x <- x
}
tmp <- x
View(x)
x <- x |>
# dplyr::mutate(ycentred = y - mean(y)) |> # make mean column
# The above exists already in gbm.auto L843
# Also it uses preset colname y produced by gbm.auto.
dplyr::rename("Category" = tidyselect::last_col(offset = 2), # no first_col option
"ycentred" = tidyselect::last_col()) |> # attempt to address no visible binding for global variable ‘Category’
# 2023-08-30 quoted Category to hopefully address gbm.factorplot: no visible binding for global variable ‘Category’
# also need to do for ycentred
dplyr::arrange(ycentred) # re-order the x axis for categorical variables in order from high to low value
is.null(factorplotlevels)
# re-reorder by factorplotlevels if present
if (!is.null(factorplotlevels)) {
# check level number matches x categories
if (length(factorplotlevels) != length(x[, "Category"])) stop("number of factorplotlevels doesn't match number of categories in x") # x$Category
# check names match
if (!all(factorplotlevels %in% x[, "Category"])) stop(paste0("The following level names not present in categories in x: ", # x$Category
factorplotlevels[!factorplotlevels %in% x[, "Category"]])) # x$Category
x <- x |>
dplyr::mutate(Category = ordered(Category, levels = factorplotlevels)) |> # recreate Category as ordered factor with factorplotlevels. Can't quote "Category" in ordered
dplyr::arrange(Category) # arrange by labels (implicit). Can't quote "Category"
} else {
if (is.integer(x$Category)) x <- x |> dplyr::mutate(Category = ordered(Category)) # make integers ordered factor to avoid defaulting to continuous
}
View(x)
ggplot2::ggplot(x) +
ggplot2::geom_col(ggplot2::aes(x = Category, # x[, "Category"]
y = ycentred)) + # x[, "ycentred"]
# rotate x axis labels
ggplot2::guides(x =  ggplot2::guide_axis(angle = ggplot2guideaxisangle)) +
# alter axis labels
ggplot2::labs(x = "",
y = "Marginal Effect") +
# change theme elements
ggplot2::theme_minimal() %+replace% ggplot2::theme(
axis.text = ggplot2::element_text(size = ggplot2::rel(ggplot2axistext)),
axis.title = ggplot2::element_text(size = ggplot2::rel(ggplot2axistitle)),
legend.text = ggplot2::element_text(size = ggplot2::rel(ggplot2legendtext)),
legend.title = ggplot2::element_text(size = ggplot2::rel(ggplot2legendtitle)),
legend.title.align = ggplot2legendtitlealign, # otherwise effect type title centre aligned for some reason
plot.background = ggplot2::element_rect(fill = ggplot2plotbackgroundfill,
colour = ggplot2plotbackgroundcolour), # white background
strip.text.x = ggplot2::element_text(size = ggplot2::rel(ggplot2striptextx)),
panel.border = ggplot2::element_rect(colour = ggplot2panelbordercolour,
fill = ggplot2panelborderfill,
linewidth = ggplot2panelborderlinewidth),
legend.spacing.x = ggplot2legendspacingx, # compress spacing between legend items, this is min
legend.background = ggplot2legendbackground,
panel.background = ggplot2::element_rect(fill = ggplot2panelbackgroundfill,
colour = ggplot2panelbackgroundcolour),
panel.grid = ggplot2::element_line(colour = ggplot2panelgridcolour),
legend.key = ggplot2legendkey)
library(ggplot2)
ggplot2::ggplot(x) +
ggplot2::geom_col(ggplot2::aes(x = Category, # x[, "Category"]
y = ycentred)) + # x[, "ycentred"]
# rotate x axis labels
ggplot2::guides(x =  ggplot2::guide_axis(angle = ggplot2guideaxisangle)) +
# alter axis labels
ggplot2::labs(x = "",
y = "Marginal Effect") +
# change theme elements
ggplot2::theme_minimal() %+replace% ggplot2::theme(
axis.text = ggplot2::element_text(size = ggplot2::rel(ggplot2axistext)),
axis.title = ggplot2::element_text(size = ggplot2::rel(ggplot2axistitle)),
legend.text = ggplot2::element_text(size = ggplot2::rel(ggplot2legendtext)),
legend.title = ggplot2::element_text(size = ggplot2::rel(ggplot2legendtitle)),
legend.title.align = ggplot2legendtitlealign, # otherwise effect type title centre aligned for some reason
plot.background = ggplot2::element_rect(fill = ggplot2plotbackgroundfill,
colour = ggplot2plotbackgroundcolour), # white background
strip.text.x = ggplot2::element_text(size = ggplot2::rel(ggplot2striptextx)),
panel.border = ggplot2::element_rect(colour = ggplot2panelbordercolour,
fill = ggplot2panelborderfill,
linewidth = ggplot2panelborderlinewidth),
legend.spacing.x = ggplot2legendspacingx, # compress spacing between legend items, this is min
legend.background = ggplot2legendbackground,
panel.background = ggplot2::element_rect(fill = ggplot2panelbackgroundfill,
colour = ggplot2panelbackgroundcolour),
panel.grid = ggplot2::element_line(colour = ggplot2panelgridcolour),
legend.key = ggplot2legendkey)
devtools::document()
source("~/Dropbox/Galway/Analysis/R/gbm.auto/R/gbm.factorplot.R")
rm(list = c("gbm.factorplot"))
devtools::document()
# cran tests
# attempt to address no visible binding for global variable ‘Category’ and ycentred
remotes::install_github("SimonDedman/gbm.auto")
# ctrl shift F10
library(gbm.auto)
mydata <- read.csv("/home/simon/Documents/Si Work/PostDoc Work/Kroetz & Dedman Sawfish BRT/P.Pectinata.CPUE.m2/AllExpvars/P.Pectinata.CPUE.m2/Bin_Best_line_Year.csv")
gbm.auto::gbm.factorplot(x = mydata,
ggsavefilename = "/home/simon/Documents/Si Work/PostDoc Work/Kroetz & Dedman Sawfish BRT/P.Pectinata.CPUE.m2/AllExpvars/P.Pectinata.CPUE.m2/Bin_Best_line_Year_ggTEST.png",
ggsavewidth = 4*480,
ggsaveheight = 4*480,
ggsaveunits = "px")
source("~/Desktop/gbm.factorplot-BKUP.R")
devtools::document()
rm(list = c("gbm.factorplot"))
devtools::document()
devtools::check()
# cran tests
# attempt to address no visible binding for global variable ‘Category’ and ycentred
remotes::install_github("SimonDedman/gbm.auto")
# ctrl shift F10
library(gbm.auto)
mydata <- read.csv("/home/simon/Documents/Si Work/PostDoc Work/Kroetz & Dedman Sawfish BRT/P.Pectinata.CPUE.m2/AllExpvars/P.Pectinata.CPUE.m2/Bin_Best_line_Year.csv")
gbm.auto::gbm.factorplot(x = mydata,
ggsavefilename = "/home/simon/Documents/Si Work/PostDoc Work/Kroetz & Dedman Sawfish BRT/P.Pectinata.CPUE.m2/AllExpvars/P.Pectinata.CPUE.m2/Bin_Best_line_Year_ggTEST.png",
ggsavewidth = 4*480,
ggsaveheight = 4*480,
ggsaveunits = "px")
devtools::build()
devtools::check()
devtools::build()
devtools::release()
devtools::document()
devtools::check()
devtools::check_win_devel()
devtools::release()
devtools::document()
devtools::release()
devtools::document()
